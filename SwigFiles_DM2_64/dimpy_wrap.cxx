/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
  return wrapper(a, NULL);			\
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)	\
SWIGINTERN void					\
wrapper##_closure(PyObject *a) {		\
    SwigPyObject *sobj;				\
    sobj = (SwigPyObject *)a;			\
    Py_XDECREF(sobj->dict);	                \
    if (sobj->own) {				\
	PyObject *o = wrapper(a, NULL);		\
	Py_XDECREF(o);				\
    }						\
    if (PyType_IS_GC(a->ob_type)) {		\
	PyObject_GC_Del(a);			\
    } else {					\
	PyObject_Del(a);			\
    }						\
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)				\
SWIGINTERN int							\
wrapper##_closure(PyObject *a) {				\
    PyObject *pyresult;						\
    int result;							\
    pyresult = wrapper(a, NULL);				\
    result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;	\
    Py_XDECREF(pyresult);					\
    return result;						\
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a, PyObject *b) {	\
    PyObject *tuple, *result;			\
    tuple = PyTuple_New(1);			\
    assert(tuple);				\
    PyTuple_SET_ITEM(tuple, 0, b);		\
    Py_XINCREF(b);				\
    result = wrapper(a, tuple);			\
    Py_DECREF(tuple);				\
    return result;				\
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(b);						\
    Py_XINCREF(c);						\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *callable_object, PyObject *args, PyObject *) {	\
    return wrapper(callable_object, args);			\
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_closure(PyObject *a) {			\
    PyObject *resultobj;				\
    Py_ssize_t result;					\
    resultobj = wrapper(a, NULL);			\
    result = PyNumber_AsSsize_t(resultobj, NULL);	\
    Py_DECREF(resultobj);				\
    return result;					\
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));		\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) { \
    PyObject *tuple, *resultobj;					\
    int result;								\
    tuple = PyTuple_New(d ? 3 : 2);					\
    assert(tuple);							\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));			\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));			\
    if (d) {								\
        PyTuple_SET_ITEM(tuple, 2, d);					\
        Py_INCREF(d);							\
    }									\
    resultobj = wrapper(a, tuple);					\
    result = resultobj ? 0 : -1;					\
    Py_DECREF(tuple);							\
    Py_XDECREF(resultobj);						\
    return result;							\
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *tuple, *result;				\
    tuple = PyTuple_New(1);				\
    assert(tuple);					\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));	\
    result = wrapper(a, tuple);				\
    Py_DECREF(tuple);					\
    return result;					\
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *arg, *result;				\
    arg = _PyLong_FromSsize_t(b);			\
    result = wrapper(a, arg);				\
    Py_DECREF(arg);					\
    return result;					\
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(c);						\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(c ? 2 : 1);				\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    Py_XINCREF(b);						\
    if (c) {							\
        PyTuple_SET_ITEM(tuple, 1, c);				\
        Py_XINCREF(c);						\
    }								\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    return wrapper(a, NULL);			\
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)	\
SWIGINTERN long					\
wrapper##_closure(PyObject *a) {		\
    PyObject *pyresult;				\
    long result;				\
    pyresult = wrapper(a, NULL);		\
    if (!pyresult || !PyLong_Check(pyresult))	\
	return -1;				\
    result = PyLong_AsLong(pyresult);		\
    Py_DECREF(pyresult);			\
    return result;				\
}

#define SWIGPY_ITERNEXT_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    PyObject *result;				\
    result = wrapper(a, NULL);			\
    if (result && result == Py_None) {		\
	Py_DECREF(result);			\
	result = NULL;				\
    }						\
    return result;				\
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *pyobj) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)pyobj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", pyobj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, val);
  Py_XINCREF(val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  _PyObject_GC_UNTRACK(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyTypeObject *type, PyObject *name, PyObject *value) {
  PyObject *attribute;
  descrsetfunc local_set;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,
#endif
      "swig_static_var_getset_descriptor",
      sizeof(PyGetSetDescrObject),
      0,
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                                   /* tp_alloc -> tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    staticvar_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
#endif
  }
  return &staticvar_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  int base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  int i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
    Py_INCREF((PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CDialog swig_types[0]
#define SWIGTYPE_p_DM_FileReference swig_types[1]
#define SWIGTYPE_p_Gatan__DM__Component swig_types[2]
#define SWIGTYPE_p_Gatan__DM__Function swig_types[3]
#define SWIGTYPE_p_Gatan__DM__Image swig_types[4]
#define SWIGTYPE_p_Gatan__DM__ImageDisplay swig_types[5]
#define SWIGTYPE_p_Gatan__DM__ImageDocument swig_types[6]
#define SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay swig_types[7]
#define SWIGTYPE_p_Gatan__DM__ROI swig_types[8]
#define SWIGTYPE_p_Gatan__DM__RasterImageDisplay swig_types[9]
#define SWIGTYPE_p_Gatan__DM__ScriptObject swig_types[10]
#define SWIGTYPE_p_Gatan__DM__String swig_types[11]
#define SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay swig_types[12]
#define SWIGTYPE_p_Gatan__DM__TagGroup swig_types[13]
#define SWIGTYPE_p_Gatan__DM__Throwable swig_types[14]
#define SWIGTYPE_p_Gatan__DM__Window swig_types[15]
#define SWIGTYPE_p_Gatan__PlugIn__DM_Env swig_types[16]
#define SWIGTYPE_p_Py_ssize_t swig_types[17]
#define SWIGTYPE_p_SSIZE_T swig_types[18]
#define SWIGTYPE_p_SwigPyObject swig_types[19]
#define SWIGTYPE_p_SystemIdleProc swig_types[20]
#define SWIGTYPE_p_TagGroupIterator swig_types[21]
#define SWIGTYPE_p_ULONG_PTR swig_types[22]
#define SWIGTYPE_p_bool swig_types[23]
#define SWIGTYPE_p_char swig_types[24]
#define SWIGTYPE_p_char_range swig_types[25]
#define SWIGTYPE_p_complex128_t swig_types[26]
#define SWIGTYPE_p_double swig_types[27]
#define SWIGTYPE_p_float swig_types[28]
#define SWIGTYPE_p_long swig_types[29]
#define SWIGTYPE_p_rgba_uint8_os_t swig_types[30]
#define SWIGTYPE_p_short swig_types[31]
#define SWIGTYPE_p_std__string swig_types[32]
#define SWIGTYPE_p_uint16 swig_types[33]
#define SWIGTYPE_p_uint32 swig_types[34]
#define SWIGTYPE_p_ulong swig_types[35]
#define SWIGTYPE_p_ulong_ptr_t swig_types[36]
static swig_type_info *swig_types[38];
static swig_module_info swig_module = {swig_types, 37, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _DimPy.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__DimPy

#else
#  define SWIG_init    init_DimPy

#endif
#define SWIG_name    "_DimPy"

#define SWIGVERSION 0x030007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#define _GATANPLUGIN_USES_LIBRARY_VERSION 2
//we define _GATAN_USE_STL_STRING to add some functions for converting to std::string which we can then convert to char*
//doesn't seem to work though
#define _GATAN_USE_STL_STRING
#include "DMPlugInBasic.h"

using namespace Gatan;
//we make the default flags include the new buffer object flag:

#if PY_VERSION_HEX < 0x03000000
#undef Py_TPFLAGS_DEFAULT 
//mfm 19Mar12 The flags really indicate a field is present, there's no promise there's an implementation
//as such we can add flags globally and only implement the fields as appropriate (I think). So we
//annd Py_TPFLAGS_HAVE_NEWBUFFER, which images use, and Py_TPFLAGS_HAVE_ITER, so that taggroups can return 
//their keys (this is the default dictionary behaviour)
#define Py_TPFLAGS_DEFAULT (Py_TPFLAGS_DEFAULT_EXTERNAL|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_ITER) 
#endif


class TagGroupIterator
{
public:
	Gatan::DM::TagGroup tg;
	Py_ssize_t pos;
};


int PythonGatanDMImage_bf_getbuffer(PyObject *pyobj, Py_buffer *view, int flags)
{
  //need to convert obj into a Gatan::DM::Image pointer
  void *argp; 
  int res; 
   res = SWIG_ConvertPtr(pyobj, &argp, SWIGTYPE_p_Gatan__DM__Image, 0); 
  if (!SWIG_IsOK(res)) { 
    SWIG_Error(SWIG_ArgError(res), "in method 'Gatan__DM__Image::__getbuffer__', argument 1 of type 'Gatan__DM__Image *'"); 
    return SWIG_ERROR; 
    } 

  //GetDataType() returns an int, 
  //1=short, 10 = ushort, 
  //9=byte, 6=ubyte, 
  //7=long, 11=ulong
  //14=binary (byte)
  //2=float, 12=double
  //3=float,float 13 = double, double
  //23=RGB (byte, byte, byte)

  Gatan::DM::Image *self = reinterpret_cast<Gatan::DM::Image*>(argp); 
  GatanPlugIn::ImageDataLocker* idl = new GatanPlugIn::ImageDataLocker(*self);
  int dt = self->GetDataType();
  view->format = dt==1 ? "h" : dt==10 ? "H" ://short, ushort
                  dt==9 ? "b" : dt==6 ? "B" ://byte, ubyte
                  dt==7 ? "i" : dt==11 ? "I" ://long, ulong
                  dt==2 ? "f" : dt==12 ? "d" ://float, double
                  dt==14 ? "B" :  //binary
                  dt==23 ? "BBB" : //RGB
                  dt==3 ? "ff" : dt==13 ? "dd" ://complexf, complexd
		  NULL; //unknown
  view->obj = pyobj;
  Py_INCREF(pyobj);
  view->buf = idl->get();
  view->readonly = 0;
  view->itemsize = self->GetDataElementByteSize();
  view->ndim = self->GetNumDimensions();
  
  view->shape = new Py_ssize_t [view->ndim];
  view->strides = new Py_ssize_t [view->ndim];
  int px=1;
  // The last index is the fast one (ie stride=view->itemsize)

  for(int i=0; i<view->ndim; i++)
  {
	// i is the 'DM' index (0=x, 1=y, 2=z(? - check - how is nd data stored??))
	// py_index is python index (0=y, 1=x)
	int py_index = view->ndim - 1 - i;
    view->shape[py_index] = self->GetDimensionSize(i);
    view->strides[py_index] = px*view->itemsize;
	// for the next dimension, our stride is longer by the size of
	// the dimension we just added
    px*= view->shape[py_index];
  }
  view->len = px;
  view->suboffsets = NULL;
  view->internal = idl;
  return 0; //success(?) //0 is returned on success and -1 on error.
}

int PythonGatanDMImage_bf_releasebuffer(PyObject *pyobj, Py_buffer *view)
{
  //we must destroy what we made in get buffer
  if(view->shape)
    delete[] view->shape;
  if(view->strides)
    delete[] view->strides;
  //and we're done with our datalocker too
  if(view->internal)
  {
    GatanPlugIn::ImageDataLocker* idl = (GatanPlugIn::ImageDataLocker*) view->internal;
    if(!view->readonly)
      idl->MarkDataChanged(); //may have
    delete idl;
  }
  //I'm not sure we should DECREF here?
  //if(view->obj)
  //  Py_DECREF(pyobj);

  return 0;
}

Py_ssize_t PythonTagGroup_mp_length(PyObject *self)
{
  //need to convert obj into a Gatan::DM::TagGroup pointer
  void *argp; 
  int res; 
   res = SWIG_ConvertPtr(self, &argp, SWIGTYPE_p_Gatan__DM__TagGroup, 0); 
  if (!SWIG_IsOK(res)) { 
    SWIG_Error(SWIG_ArgError(res), "in method 'TagGroup::__length__', argument 1 of type 'TagGroup *'"); 
    return 0; 
    } 
  Gatan::DM::TagGroup *tg = reinterpret_cast<Gatan::DM::TagGroup*>(argp);
  return tg->CountTags();
}

PyObject* PythonTagGroup_mp_subscript(PyObject *self, PyObject *key)
{
	//note that some of the swig functions use self in a macro, so we need to be careful about naming if using them
	//might be easier to not use them?
	PyObject *resultobj = 0;
	Gatan::DM::TagGroup ret; 
	Gatan::DM::String str;
  //need to convert o into a Gatan::DM::Image pointer
  //and key should be a string
  void *argp; 
  int res; 
   res = SWIG_ConvertPtr(self, &argp, SWIGTYPE_p_Gatan__DM__TagGroup, 0); 
  if (!SWIG_IsOK(res)) { 
    SWIG_exception_fail(SWIG_ArgError(res), "in method 'TagGroup::__subscript__', argument 1 of type 'TagGroup *'"); 
  } 
   char* skey=NULL;
  char buffer[64];
	if(PyString_Check(key))
	{
		skey = PyString_AsString(key);
	}
	else if (PyInt_Check(key))
	{
		sprintf_s(buffer, 64, "[%d]", PyInt_AsLong(key));
		skey=buffer;
	}
	else if(PyUnicode_Check(key)) {
		if(PyUnicode_READY(key)==0 && PyUnicode_KIND(key)==PyUnicode_1BYTE_KIND) {
			skey=(char*)PyUnicode_DATA(key);
		}
		else {
			SWIG_exception_fail(SWIG_ValueError, "in method 'TagGroup::__subscript__', argument 2 must be 8-bit unicode");
		}
	}
    else { 
    SWIG_exception_fail(SWIG_ValueError, "in method 'TagGroup::__subscript__', argument 2 of type 'String' or 'int' or 'unicode'"); 
  } 
  Gatan::DM::TagGroup *tg = reinterpret_cast<Gatan::DM::TagGroup*>(argp);
  //if we're a list, we have indexed tags only. They can be set and got using "[3]" eg as key
  //but only if that element already exists using one of the inserttag commands
  //else we have tags that can be tagggroups, arrays, strings, lists, etc. There's a getseeds() function
  //that might give us the types we have, but we can also just try. lets' start with taggroup and strings

  if(tg->GetTagAsTagGroup(skey,ret))
  {
    //we return a taggroup
	  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(ret))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  }
	else if(tg->GetTagAsString(skey,str))
	{
		resultobj = PyString_FromString( str.get_string().c_str());
	}
  return resultobj; //NULL on failure, else o[key]
  fail:
  return NULL;
}

int SetTagOrIndexedTag(Gatan::DM::TagGroup& tg, PyObject *pykey, int _index, PyObject *v)
{
	//we set key and index based on the pykey and _index parameters. If pykey is not null
	//we use that, else we use _index
	char* key=NULL;
	int kindex = _index;
	if(pykey!=NULL)
	{
		if(PyInt_Check(pykey))
			kindex = PyInt_AsLong(pykey);
		else if(PyString_Check(pykey))
			key = PyString_AsString(pykey);
		else if(PyUnicode_Check(pykey) && 
			PyUnicode_READY(pykey)==0 && 
			PyUnicode_KIND(pykey)==PyUnicode_1BYTE_KIND){
				key=(char*)PyUnicode_DATA(pykey);
			}
		else
		{
			PyErr_SetString(PyExc_TypeError,"SetTagOrIndexedTag: Expect 'int' or 'String' key");
			 return -1;
		}
	}
	
	if(key==NULL)
		while(kindex >= tg.CountTags())
			tg.InsertTagAsLong(tg.CountTags(), 0);
			
	//if key!=null, sets the tag key to the value v
	//if key==null sets the indexed tag at location kindex to v
	if(PyFloat_Check(v))
	{
		if(	key!=NULL)
			tg.SetTagAsDouble(key, PyFloat_AsDouble(v));
		else
			tg.SetIndexedTagAsDouble(kindex, PyFloat_AsDouble(v));
	}
	else if (PyInt_Check(v))
	{
		if(	key!=NULL)
			tg.SetTagAsLong(key, PyInt_AsLong(v));
		else
			tg.SetIndexedTagAsLong(kindex, PyInt_AsLong(v));
	}
	else if(PyDict_Check(v))
	{
		//mfm 6Mar11 note that a mapping is less than a dictionary, as a mapping has x=o[key] and o[key]=v
		//methods only, but no guarantee of iteration or enumeration of keys. A dict does have these extra properties
		//so we will can convert dicts to taggroups, but not general mappings (similarly a taggroup is dict like as well
		//as a mapping, as we can enumerate the keys)
		Gatan::DM::TagGroup newtg = Gatan::DM::NewTagGroup();
		PyObject *nkey, *nvalue;
		Py_ssize_t pos = 0;
		int res=0;
		while (PyDict_Next(v, &pos, &nkey, &nvalue)) 
		{
			if(SetTagOrIndexedTag(newtg, nkey, -1, nvalue)==-1)
				return -1;
		}
		if(	key!=NULL)
			tg.SetTagAsTagGroup(key, newtg);
		else
			tg.SetIndexedTagAsTagGroup(kindex, newtg);
	}
	else if(PyString_Check(v))
	{
		if(	key!=NULL)
			tg.SetTagAsText(key, PyString_AsString(v));
		else
			tg.SetIndexedTagAsText(kindex, PyString_AsString(v));
	}
	else if(PyUnicode_Check(v) && PyUnicode_READY(v)==0 && PyUnicode_KIND(v)==PyUnicode_1BYTE_KIND) {
		if(	key!=NULL)
			tg.SetTagAsText(key, (char*)PyUnicode_DATA(v));
		else
			tg.SetIndexedTagAsText(kindex, (char*)PyUnicode_DATA(v));
	}
	else if(PySequence_Check(v))
	{
		//note a string is a sequence, so we should check for strings first
		Gatan::DM::TagGroup newtg = Gatan::DM::NewTagList();
		Py_ssize_t len = PySequence_Length(v);
		for(Py_ssize_t i=0; i<len; i++)
		{
			if(SetTagOrIndexedTag(newtg, NULL, i, PySequence_GetItem(v, i))==-1)
				return -1;
		}
		
		if(	key!=NULL)
			tg.SetTagAsTagGroup(key, newtg);
		else
			tg.SetIndexedTagAsTagGroup(kindex, newtg);
	}
	else
	{
		PyErr_SetString(PyExc_TypeError,"SetTagOrIndexedTag: Unexpected type");
     return -1;
	}
	return 0;
}

int PythonTagGroup_mp_ass_subscript(PyObject *self, PyObject *key, PyObject *v)
{
  // sets self[key]=v. For taggroups, key should always be a string, and v can be lots of things, but strings are easiest
	Gatan::DM::TagGroup us; 
  //need to convert self into a Gatan::DM::Image pointer
  //and key should be a string
  void *argp; 
  int res; 
  res = SWIG_ConvertPtr(self, &argp, SWIGTYPE_p_Gatan__DM__TagGroup, 0);  
	if (!SWIG_IsOK(res)) { return -1; }
	Gatan::DM::TagGroup *tg = reinterpret_cast<Gatan::DM::TagGroup*>(argp);
	return SetTagOrIndexedTag(*tg, key, -1, v);
fail:
	return -1;
}

//we're our own iterator?
PyObject* self_tp_iter(PyObject *self) { return self; }

PyObject* PythonTagGroup_tp_iter(PyObject *self) 
{
	void *argp; 
  int res; 
  res = SWIG_ConvertPtr(self, &argp, SWIGTYPE_p_Gatan__DM__TagGroup, 0); 
	if (!SWIG_IsOK(res)) { return NULL; }	
	Gatan::DM::TagGroup *tg = reinterpret_cast<Gatan::DM::TagGroup*>(argp);
	
	TagGroupIterator *p = new TagGroupIterator;
	p->tg = *tg;
	p->pos = 0;
	return SWIG_NewPointerObj(p, SWIGTYPE_p_TagGroupIterator, SWIG_POINTER_OWN |  0 );	
}

PyObject* TagGroupIterator_tp_iternext(PyObject *self)
{
	void *argp; 
  int res; 
  res = SWIG_ConvertPtr(self, &argp, SWIGTYPE_p_TagGroupIterator, 0); 
	if (!SWIG_IsOK(res)) { return NULL; }	
	TagGroupIterator *p = reinterpret_cast<TagGroupIterator*>(argp);
	
	PyObject* ret= NULL;
	if(p->pos < p->tg.CountTags())
	{
		if(p->tg.IsList())
			ret= PyLong_FromSsize_t(p->pos); //we just return an int
		else
			ret= PyString_FromString(p->tg.GetTagLabel(p->pos).get_string().c_str());
		p->pos++;
	}
	
	return ret;
}


SWIGINTERN int Gatan_DM_Image_dims(Gatan::DM::Image *self){ return self->GetNumDimensions(); }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}

SWIGINTERN long Gatan_DM_Image_cheeseHashFunc(Gatan::DM::Image const *self){ return 3; }

  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_TagGroupIterator_tg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *arg1 = (TagGroupIterator *) 0 ;
  Gatan::DM::TagGroup *arg2 = (Gatan::DM::TagGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupIterator_tg_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagGroupIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIterator_tg_set" "', argument " "1"" of type '" "TagGroupIterator *""'"); 
  }
  arg1 = reinterpret_cast< TagGroupIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gatan__DM__TagGroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupIterator_tg_set" "', argument " "2"" of type '" "Gatan::DM::TagGroup *""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  if (arg1) (arg1)->tg = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIterator_tg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *arg1 = (TagGroupIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Gatan::DM::TagGroup *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TagGroupIterator_tg_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagGroupIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIterator_tg_get" "', argument " "1"" of type '" "TagGroupIterator *""'"); 
  }
  arg1 = reinterpret_cast< TagGroupIterator * >(argp1);
  result = (Gatan::DM::TagGroup *)& ((arg1)->tg);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gatan__DM__TagGroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIterator_pos_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *arg1 = (TagGroupIterator *) 0 ;
  Py_ssize_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupIterator_pos_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagGroupIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIterator_pos_set" "', argument " "1"" of type '" "TagGroupIterator *""'"); 
  }
  arg1 = reinterpret_cast< TagGroupIterator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Py_ssize_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupIterator_pos_set" "', argument " "2"" of type '" "Py_ssize_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupIterator_pos_set" "', argument " "2"" of type '" "Py_ssize_t""'");
    } else {
      Py_ssize_t * temp = reinterpret_cast< Py_ssize_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->pos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIterator_pos_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *arg1 = (TagGroupIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_ssize_t result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TagGroupIterator_pos_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagGroupIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIterator_pos_get" "', argument " "1"" of type '" "TagGroupIterator *""'"); 
  }
  arg1 = reinterpret_cast< TagGroupIterator * >(argp1);
  result =  ((arg1)->pos);
  resultobj = SWIG_NewPointerObj((new Py_ssize_t(static_cast< const Py_ssize_t& >(result))), SWIGTYPE_p_Py_ssize_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_TagGroupIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_TagGroupIterator takes no arguments");
  result = (TagGroupIterator *)new TagGroupIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagGroupIterator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_TagGroupIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TagGroupIterator *arg1 = (TagGroupIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_TagGroupIterator takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagGroupIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagGroupIterator" "', argument " "1"" of type '" "TagGroupIterator *""'"); 
  }
  arg1 = reinterpret_cast< TagGroupIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_dims(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = (Gatan::DM::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Image_dims takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Gatan__DM__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_dims" "', argument " "1"" of type '" "Gatan::DM::Image *""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (int)Gatan_DM_Image_dims(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_cheeseHashFunc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = (Gatan::DM::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Image_cheeseHashFunc takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Gatan__DM__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_cheeseHashFunc" "', argument " "1"" of type '" "Gatan::DM::Image const *""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan_DM_Image_cheeseHashFunc((Gatan::DM::Image const *)arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_HASHFUNC_CLOSURE(_wrap_Image_cheeseHashFunc)

SWIGINTERN int _wrap_new_Image(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_Image takes no arguments");
  result = (Gatan::DM::Image *)new Gatan::DM::Image();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gatan__DM__Image, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Image(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = (Gatan::DM::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Image takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Image" "', argument " "1"" of type '" "Gatan::DM::Image *""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_TagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_TagGroup takes no arguments");
  result = (Gatan::DM::TagGroup *)new Gatan::DM::TagGroup();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_TagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = (Gatan::DM::TagGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_TagGroup takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup *""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbortAcquisitionDaemon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AbortAcquisitionDaemon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbortAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbortAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::AbortAcquisitionDaemon((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbortAllAcquisitionDaemons(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":AbortAllAcquisitionDaemons")) SWIG_fail;
  Gatan::DM::AbortAllAcquisitionDaemons();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddCustomTool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AddCustomTool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddCustomTool" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AddCustomTool" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::AddCustomTool((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AddFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddFunction" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddFunction" "', argument " "2"" of type '" "void *""'"); 
  }
  Gatan::DM::AddFunction((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddPathToCopyToImageList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AddPathToCopyToImageList",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddPathToCopyToImageList" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Gatan::DM::AddPathToCopyToImageList((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddScriptFileToMenu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AddScriptFileToMenu",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddScriptFileToMenu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddScriptFileToMenu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddScriptFileToMenu" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddScriptFileToMenu" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AddScriptFileToMenu" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Gatan::DM::AddScriptFileToMenu((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddScriptFileToPackage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AddScriptFileToPackage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddScriptFileToPackage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddScriptFileToPackage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AddScriptFileToPackage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddScriptFileToPackage" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AddScriptFileToPackage" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "AddScriptFileToPackage" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AddScriptFileToPackage" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  Gatan::DM::AddScriptFileToPackage((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,arg7);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddScriptToMenu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AddScriptToMenu",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddScriptToMenu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddScriptToMenu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddScriptToMenu" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddScriptToMenu" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AddScriptToMenu" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Gatan::DM::AddScriptToMenu((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddScriptToPackage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AddScriptToPackage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddScriptToPackage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddScriptToPackage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AddScriptToPackage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddScriptToPackage" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AddScriptToPackage" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "AddScriptToPackage" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AddScriptToPackage" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  Gatan::DM::AddScriptToPackage((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,arg7);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddTagsToPackage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AddTagsToPackage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddTagsToPackage" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddTagsToPackage" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddTagsToPackage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AddTagsToPackage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddTagsToPackage" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  Gatan::DM::AddTagsToPackage((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjustScriptMenuItem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  char arg7 ;
  long arg8 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  char val7 ;
  int ecode7 = 0 ;
  long val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:AdjustScriptMenuItem",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjustScriptMenuItem" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdjustScriptMenuItem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AdjustScriptMenuItem" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AdjustScriptMenuItem" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AdjustScriptMenuItem" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AdjustScriptMenuItem" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AdjustScriptMenuItem" "', argument " "7"" of type '" "char""'");
  } 
  arg7 = static_cast< char >(val7);
  ecode8 = SWIG_AsVal_long(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AdjustScriptMenuItem" "', argument " "8"" of type '" "long""'");
  } 
  arg8 = static_cast< long >(val8);
  Gatan::DM::AdjustScriptMenuItem((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AllocString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AllocString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AllocString" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::AllocString(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplicationGetApplicationMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)":ApplicationGetApplicationMode")) SWIG_fail;
  result = Gatan::DM::ApplicationGetApplicationMode();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplicationGetBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ApplicationGetBounds",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplicationGetBounds" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApplicationGetBounds" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApplicationGetBounds" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ApplicationGetBounds" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  Gatan::DM::ApplicationGetBounds(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplicationGetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  long *arg2 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ApplicationGetOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplicationGetOrigin" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApplicationGetOrigin" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::ApplicationGetOrigin(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplyDataBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApplyDataBar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplyDataBar" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApplyDataBar" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  Gatan::DM::ApplyDataBar((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApproveDisplayBuffer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApproveDisplayBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApproveDisplayBuffer" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApproveDisplayBuffer" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ApproveDisplayBuffer((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApproveSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApproveSurvey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApproveSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApproveSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ApproveSurvey((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoCorrelate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoCorrelate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoCorrelate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutoCorrelate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::AutoCorrelate((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoCorrelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoCorrelation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoCorrelation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutoCorrelation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::AutoCorrelation((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Beep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Beep")) SWIG_fail;
  Gatan::DM::Beep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BinaryImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinaryImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BinaryImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BinaryImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::BinaryImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BinaryImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinaryImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BinaryImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::BinaryImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryImage__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::BinaryImage((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryImage__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BinaryImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinaryImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::BinaryImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BinaryImage__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BinaryImage__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BinaryImage__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BinaryImage__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BinaryImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::BinaryImage(char const *,long,long,long,long)\n"
    "    Gatan::DM::BinaryImage(char const *,long,long,long)\n"
    "    Gatan::DM::BinaryImage(char const *,long)\n"
    "    Gatan::DM::BinaryImage(char const *,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BrowseTagFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":BrowseTagFile")) SWIG_fail;
  Gatan::DM::BrowseTagFile();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChooseMenuItem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ChooseMenuItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChooseMenuItem" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChooseMenuItem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ChooseMenuItem" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)Gatan::DM::ChooseMenuItem((char const *)arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassAddMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ::Gatan::PlugIn::DM_Env *arg1 = (::Gatan::PlugIn::DM_Env *) 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Function result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassAddMethod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gatan__PlugIn__DM_Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassAddMethod" "', argument " "1"" of type '" "::Gatan::PlugIn::DM_Env *""'"); 
  }
  arg1 = reinterpret_cast< ::Gatan::PlugIn::DM_Env * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassAddMethod" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassAddMethod" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClassAddMethod" "', argument " "3"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassAddMethod" "', argument " "3"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Function * >(argp3);
  result = Gatan::DM::ClassAddMethod(arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::Function const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Function(static_cast< const Gatan::DM::Function& >(result))), SWIGTYPE_p_Gatan__DM__Function, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassRemoveMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassRemoveMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassRemoveMethod" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassRemoveMethod" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassRemoveMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassRemoveMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Function * >(argp2);
  Gatan::DM::ClassRemoveMethod((Gatan::DM::String const &)*arg1,(Gatan::DM::Function const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CleanImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CleanImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CleanImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CleanImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::CleanImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClearDisplayBuffer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClearDisplayBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClearDisplayBuffer" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClearDisplayBuffer" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ClearDisplayBuffer((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClearSelection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClearSelection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClearSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClearSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ClearSelection((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClipboardGetAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClipboardGetAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClipboardGetAsString" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClipboardGetAsString" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::ClipboardGetAsString(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClipboardGetAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClipboardGetAsTagGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClipboardGetAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClipboardGetAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (bool)Gatan::DM::ClipboardGetAsTagGroup(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClipboardSetAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClipboardSetAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClipboardSetAsString" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClipboardSetAsString" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::ClipboardSetAsString((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClipboardSetAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClipboardSetAsTagGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClipboardSetAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClipboardSetAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  Gatan::DM::ClipboardSetAsTagGroup((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CloseFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DM_FileReference arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CloseFile",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_DM_FileReference,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CloseFile" "', argument " "1"" of type '" "DM_FileReference""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CloseFile" "', argument " "1"" of type '" "DM_FileReference""'");
    } else {
      DM_FileReference * temp = reinterpret_cast< DM_FileReference * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  Gatan::DM::CloseFile(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CloseImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CloseImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CloseImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CloseImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::CloseImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CloseProgressWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CloseProgressWindow")) SWIG_fail;
  Gatan::DM::CloseProgressWindow();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CloseTimeBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CloseTimeBar")) SWIG_fail;
  Gatan::DM::CloseTimeBar();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommandDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":CommandDown")) SWIG_fail;
  result = (bool)Gatan::DM::CommandDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LMouseButtonDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":LMouseButtonDown")) SWIG_fail;
  result = (bool)Gatan::DM::LMouseButtonDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMouseButtonDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":RMouseButtonDown")) SWIG_fail;
  result = (bool)Gatan::DM::RMouseButtonDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ComplexImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComplexImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComplexImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ComplexImage" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  result = Gatan::DM::ComplexImage((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComplexImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComplexImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComplexImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::ComplexImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexImage__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComplexImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComplexImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::ComplexImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexImage__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComplexImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::ComplexImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ComplexImage__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ComplexImage__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ComplexImage__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ComplexImage__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ComplexImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ComplexImage(char const *,long,long,long,long,long)\n"
    "    Gatan::DM::ComplexImage(char const *,long,long,long,long)\n"
    "    Gatan::DM::ComplexImage(char const *,long,long,long)\n"
    "    Gatan::DM::ComplexImage(char const *,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComplexToPacked(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexToPacked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexToPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexToPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ComplexToPacked((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexToPacked2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexToPacked2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexToPacked2" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexToPacked2" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexToPacked2" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ComplexToPacked2((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentAddChildAfter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::Component *arg2 = 0 ;
  Gatan::DM::Component *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComponentAddChildAfter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentAddChildAfter" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAfter" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentAddChildAfter" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAfter" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Component * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentAddChildAfter" "', argument " "3"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAfter" "', argument " "3"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Component * >(argp3);
  Gatan::DM::ComponentAddChildAfter((Gatan::DM::Component const &)*arg1,(Gatan::DM::Component const &)*arg2,(Gatan::DM::Component const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentAddChildAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::Component *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentAddChildAtBeginning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentAddChildAtBeginning" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAtBeginning" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentAddChildAtBeginning" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAtBeginning" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Component * >(argp2);
  Gatan::DM::ComponentAddChildAtBeginning((Gatan::DM::Component const &)*arg1,(Gatan::DM::Component const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentAddChildAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::Component *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentAddChildAtEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentAddChildAtEnd" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAtEnd" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentAddChildAtEnd" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildAtEnd" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Component * >(argp2);
  Gatan::DM::ComponentAddChildAtEnd((Gatan::DM::Component const &)*arg1,(Gatan::DM::Component const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentAddChildBefore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::Component *arg2 = 0 ;
  Gatan::DM::Component *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComponentAddChildBefore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentAddChildBefore" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildBefore" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentAddChildBefore" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildBefore" "', argument " "2"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Component * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentAddChildBefore" "', argument " "3"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddChildBefore" "', argument " "3"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Component * >(argp3);
  Gatan::DM::ComponentAddChildBefore((Gatan::DM::Component const &)*arg1,(Gatan::DM::Component const &)*arg2,(Gatan::DM::Component const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentAddNewComponent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ComponentAddNewComponent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentAddNewComponent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentAddNewComponent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentAddNewComponent" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentAddNewComponent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentAddNewComponent" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentAddNewComponent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ComponentAddNewComponent" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Gatan::DM::ComponentAddNewComponent((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentClone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentClone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentClone" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentClone" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentClone" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Gatan::DM::ComponentClone((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentCountChildren(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentCountChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentCountChildren" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentCountChildren" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentCountChildren((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentCountChildrenOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentCountChildrenOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentCountChildrenOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentCountChildrenOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentCountChildrenOfType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::ComponentCountChildrenOfType((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetBoundingRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetBoundingRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetBoundingRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetBoundingRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetBoundingRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetBoundingRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetBoundingRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetBoundingRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetBoundingRect((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetBoundingRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetBoundingRectInView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetBoundingRectInView" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetBoundingRectInView" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetBoundingRectInView" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetBoundingRectInView" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetBoundingRectInView" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetBoundingRectInView" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetBoundingRectInView((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChild(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentGetChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChild" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChild" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentGetChild" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ComponentGetChild((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChildByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentGetChildByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChildByID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChildByID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentGetChildByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ComponentGetChildByID((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChildToLocalTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetChildToLocalTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChildToLocalTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChildToLocalTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetChildToLocalTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetChildToLocalTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetChildToLocalTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetChildToLocalTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetChildToLocalTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChildToPageTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetChildToPageTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChildToPageTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChildToPageTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetChildToPageTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetChildToPageTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetChildToPageTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetChildToPageTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetChildToPageTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChildToViewTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetChildToViewTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChildToViewTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChildToViewTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetChildToViewTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetChildToViewTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetChildToViewTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetChildToViewTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetChildToViewTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetChildToWindowTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetChildToWindowTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetChildToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetChildToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetChildToWindowTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetChildToWindowTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetChildToWindowTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetChildToWindowTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetChildToWindowTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetControlPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComponentGetControlPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentGetControlPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetControlPoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetControlPoint" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  result = (bool)Gatan::DM::ComponentGetControlPoint((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetDescendentByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentGetDescendentByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetDescendentByID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetDescendentByID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentGetDescendentByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ComponentGetDescendentByID((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetDrawingMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetDrawingMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetDrawingMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetDrawingMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetDrawingMode((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetFillMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetFillMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetFillMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFillMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetFillMode((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetFontAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetFontAttributes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetFontAttributes" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFontAttributes" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetFontAttributes((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetFontFaceName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetFontFaceName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetFontFaceName" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFontFaceName" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::ComponentGetFontFaceName((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetFontInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComponentGetFontInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetFontInfo" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFontInfo" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetFontInfo" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFontInfo" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetFontInfo" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetFontInfo" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  Gatan::DM::ComponentGetFontInfo((Gatan::DM::Component const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetFontSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetFontSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetFontSize" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetFontSize" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetFontSize((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetID" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetID((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetImageDocument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetImageDocument" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetImageDocument" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::ComponentGetImageDocument((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetLocalToPageTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetLocalToPageTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetLocalToPageTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetLocalToPageTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetLocalToPageTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetLocalToPageTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetLocalToPageTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetLocalToPageTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetLocalToPageTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetLocalToViewTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetLocalToViewTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetLocalToViewTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetLocalToViewTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetLocalToViewTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetLocalToViewTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetLocalToViewTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetLocalToViewTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetLocalToViewTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetLocalToWindowTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetLocalToWindowTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetLocalToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetLocalToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetLocalToWindowTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetLocalToWindowTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetLocalToWindowTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetLocalToWindowTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetLocalToWindowTransform((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetNthChildOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComponentGetNthChildOfType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetNthChildOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetNthChildOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentGetNthChildOfType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentGetNthChildOfType" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::ComponentGetNthChildOfType((Gatan::DM::Component const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetParentComponent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetParentComponent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetParentComponent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetParentComponent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::ComponentGetParentComponent((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetParentImageDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetParentImageDisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetParentImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetParentImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::ComponentGetParentImageDisplay((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetRect((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentGetRectInView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetRectInView" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetRectInView" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentGetRectInView" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComponentGetRectInView" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComponentGetRectInView" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComponentGetRectInView" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ComponentGetRectInView((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetTagGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::ComponentGetTagGroup((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentGetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentGetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentGetType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentGetType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::ComponentGetType((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentIsOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentIsOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentIsOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentIsOfType" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentIsOfType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::ComponentIsOfType((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentIsSelected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentIsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentIsSelected" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentIsSelected" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (bool)Gatan::DM::ComponentIsSelected((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentIsValid" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentIsValid" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (bool)Gatan::DM::ComponentIsValid((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentOffsetControlPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentOffsetControlPoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentOffsetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentOffsetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentOffsetControlPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentOffsetControlPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentOffsetControlPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentOffsetControlPoint" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::ComponentOffsetControlPoint((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentPositionAroundPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ComponentPositionAroundPoint",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentPositionAroundPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentPositionAroundPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentPositionAroundPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentPositionAroundPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentPositionAroundPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentPositionAroundPoint" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ComponentPositionAroundPoint" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ComponentPositionAroundPoint" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  Gatan::DM::ComponentPositionAroundPoint((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentRemoveFromParent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComponentRemoveFromParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentRemoveFromParent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentRemoveFromParent" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  Gatan::DM::ComponentRemoveFromParent((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetControlPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentSetControlPoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetControlPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetControlPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentSetControlPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentSetControlPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentSetControlPoint" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::ComponentSetControlPoint((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetDrawingMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetDrawingMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetDrawingMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetDrawingMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetDrawingMode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ComponentSetDrawingMode((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetFillMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetFillMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetFillMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFillMode" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetFillMode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ComponentSetFillMode((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetFontAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetFontAttributes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetFontAttributes" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontAttributes" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetFontAttributes" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ComponentSetFontAttributes((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetFontFaceName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetFontFaceName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetFontFaceName" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontFaceName" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentSetFontFaceName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontFaceName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ComponentSetFontFaceName((Gatan::DM::Component const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetFontInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComponentSetFontInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetFontInfo" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontInfo" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentSetFontInfo" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontInfo" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentSetFontInfo" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentSetFontInfo" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  Gatan::DM::ComponentSetFontInfo((Gatan::DM::Component const &)*arg1,(Gatan::DM::String const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetFontSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetFontSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetFontSize" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetFontSize" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetFontSize" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ComponentSetFontSize((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentSetRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetRect" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetRect" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentSetRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentSetRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentSetRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ComponentSetRect((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetSelected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetSelected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetSelected" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetSelected" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetSelected" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ComponentSetSelected((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentSetSelectable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComponentSetSelectable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentSetSelectable" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentSetSelectable" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentSetSelectable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ComponentSetSelectable((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComponentTransformCoordinates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ComponentTransformCoordinates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentTransformCoordinates" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentTransformCoordinates" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentTransformCoordinates" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComponentTransformCoordinates" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComponentTransformCoordinates" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ComponentTransformCoordinates" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ComponentTransformCoordinates((Gatan::DM::Component const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConjMultiplyPackedByPacked(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConjMultiplyPackedByPacked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConjMultiplyPackedByPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConjMultiplyPackedByPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConjMultiplyPackedByPacked" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConjMultiplyPackedByPacked" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ConjMultiplyPackedByPacked((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectObject(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Gatan::DM::ScriptObject *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ConnectObject",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ConnectObject" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConnectObject" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConnectObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ConnectObject" "', argument " "4"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConnectObject" "', argument " "4"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ConnectObject" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  Gatan::DM::ConnectObject(arg1,(char const *)arg2,(char const *)arg3,(Gatan::DM::ScriptObject const &)*arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinueCancelDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinueCancelDialog",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinueCancelDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (bool)Gatan::DM::ContinueCancelDialog((char const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ControlDown")) SWIG_fail;
  result = (bool)Gatan::DM::ControlDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertImageData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConvertImageData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertImageData" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertImageData" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConvertImageData" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertImageData" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ConvertImageData((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertImageDataSlice_2D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  long arg8 ;
  long arg9 ;
  long arg10 ;
  long arg11 ;
  long arg12 ;
  long arg13 ;
  long arg14 ;
  long arg15 ;
  long arg16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  long val8 ;
  int ecode8 = 0 ;
  long val9 ;
  int ecode9 = 0 ;
  long val10 ;
  int ecode10 = 0 ;
  long val11 ;
  int ecode11 = 0 ;
  long val12 ;
  int ecode12 = 0 ;
  long val13 ;
  int ecode13 = 0 ;
  long val14 ;
  int ecode14 = 0 ;
  long val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:ConvertImageDataSlice_2D",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertImageDataSlice_2D" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertImageDataSlice_2D" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConvertImageDataSlice_2D" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertImageDataSlice_2D" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConvertImageDataSlice_2D" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ConvertImageDataSlice_2D" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ConvertImageDataSlice_2D" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ConvertImageDataSlice_2D" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ConvertImageDataSlice_2D" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  ecode8 = SWIG_AsVal_long(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ConvertImageDataSlice_2D" "', argument " "8"" of type '" "long""'");
  } 
  arg8 = static_cast< long >(val8);
  ecode9 = SWIG_AsVal_long(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ConvertImageDataSlice_2D" "', argument " "9"" of type '" "long""'");
  } 
  arg9 = static_cast< long >(val9);
  ecode10 = SWIG_AsVal_long(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ConvertImageDataSlice_2D" "', argument " "10"" of type '" "long""'");
  } 
  arg10 = static_cast< long >(val10);
  ecode11 = SWIG_AsVal_long(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ConvertImageDataSlice_2D" "', argument " "11"" of type '" "long""'");
  } 
  arg11 = static_cast< long >(val11);
  ecode12 = SWIG_AsVal_long(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ConvertImageDataSlice_2D" "', argument " "12"" of type '" "long""'");
  } 
  arg12 = static_cast< long >(val12);
  ecode13 = SWIG_AsVal_long(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ConvertImageDataSlice_2D" "', argument " "13"" of type '" "long""'");
  } 
  arg13 = static_cast< long >(val13);
  ecode14 = SWIG_AsVal_long(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ConvertImageDataSlice_2D" "', argument " "14"" of type '" "long""'");
  } 
  arg14 = static_cast< long >(val14);
  ecode15 = SWIG_AsVal_long(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "ConvertImageDataSlice_2D" "', argument " "15"" of type '" "long""'");
  } 
  arg15 = static_cast< long >(val15);
  ecode16 = SWIG_AsVal_long(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "ConvertImageDataSlice_2D" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  Gatan::DM::ConvertImageDataSlice_2D((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertInt16ToFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConvertInt16ToFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertInt16ToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertInt16ToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConvertInt16ToFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertInt16ToFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ConvertInt16ToFloat((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertPICTToRGBImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertPICTToRGBImage",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ConvertPICTToRGBImage" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::ConvertPICTToRGBImage(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToByte(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToByte",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToByte" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToByte" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToByte((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToComplex((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToFloat((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToLong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToLong" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToLong" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToLong((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToPackedComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToPackedComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToPackedComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToPackedComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToPackedComplex((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertToShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConvertToShort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertToShort" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertToShort" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ConvertToShort((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertUInt8ToFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConvertUInt8ToFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertUInt8ToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertUInt8ToFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConvertUInt8ToFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertUInt8ToFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ConvertUInt8ToFloat((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConvertUInt8ToDisplay8(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ConvertUInt8ToDisplay8",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConvertUInt8ToDisplay8" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConvertUInt8ToDisplay8" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConvertUInt8ToDisplay8" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConvertUInt8ToDisplay8" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ConvertUInt8ToDisplay8" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ConvertUInt8ToDisplay8" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ConvertUInt8ToDisplay8" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ConvertUInt8ToDisplay8" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  Gatan::DM::ConvertUInt8ToDisplay8((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Convolution(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Convolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Convolution" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Convolution" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Convolution" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Convolution" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::Convolution((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CopyGWorldCTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CopyGWorldCTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CopyGWorldCTable" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CopyGWorldCTable" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::CopyGWorldCTable((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountAllImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountAllImages")) SWIG_fail;
  result = (long)Gatan::DM::CountAllImages();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountDocumentWindows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountDocumentWindows")) SWIG_fail;
  result = (long)Gatan::DM::CountDocumentWindows();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountDocumentWindowsOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CountDocumentWindowsOfType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CountDocumentWindowsOfType" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::CountDocumentWindowsOfType(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountFloatingWindows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountFloatingWindows")) SWIG_fail;
  result = (long)Gatan::DM::CountFloatingWindows();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountImageDocuments(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountImageDocuments")) SWIG_fail;
  result = (long)Gatan::DM::CountImageDocuments();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountImages")) SWIG_fail;
  result = (long)Gatan::DM::CountImages();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountScreens(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":CountScreens")) SWIG_fail;
  result = (long)Gatan::DM::CountScreens();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CountScriptFunctions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CountScriptFunctions",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CountScriptFunctions" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (long)Gatan::DM::CountScriptFunctions((char const *)arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBinary1DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CreateBinary1DImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateBinary1DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateBinary1DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::CreateBinary1DImage((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBinary2DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateBinary2DImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateBinary2DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateBinary2DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateBinary2DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateBinary2DImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBinary3DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateBinary3DImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateBinary3DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateBinary3DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateBinary3DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateBinary3DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreateBinary3DImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateByteImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateByteImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateByteImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateByteImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateByteImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateByteImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateComplex1DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateComplex1DImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateComplex1DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateComplex1DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateComplex1DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateComplex1DImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateComplex2DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateComplex2DImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateComplex2DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateComplex2DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateComplex2DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateComplex2DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreateComplex2DImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateComplex3DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CreateComplex3DImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateComplex3DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateComplex3DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateComplex3DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateComplex3DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateComplex3DImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::CreateComplex3DImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateComplexImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateComplexImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateComplexImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreateDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::CreateDirectory((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreateFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::CreateFile((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateFileForWriting(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DM_FileReference result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreateFileForWriting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateFileForWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateFileForWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::CreateFileForWriting((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new DM_FileReference(static_cast< const DM_FileReference& >(result))), SWIGTYPE_p_DM_FileReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateFloatImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateFloatImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateFloatImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateFloatImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateFloatImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateFloatImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateImageFromDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreateImageFromDisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateImageFromDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateImageFromDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::CreateImageFromDisplay((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateInteger1DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateInteger1DImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateInteger1DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateInteger1DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateInteger1DImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateInteger1DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreateInteger1DImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateInteger2DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CreateInteger2DImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateInteger2DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateInteger2DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateInteger2DImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateInteger2DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateInteger2DImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::CreateInteger2DImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateInteger3DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CreateInteger3DImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateInteger3DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateInteger3DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateInteger3DImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateInteger3DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateInteger3DImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CreateInteger3DImage" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  result = Gatan::DM::CreateInteger3DImage((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateLongImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateLongImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateLongImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateLongImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateLongImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateLongImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateMaskFromAnnotations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay arg1 ;
  long arg2 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateMaskFromAnnotations",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateMaskFromAnnotations" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateMaskFromAnnotations" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const""'");
    } else {
      Gatan::DM::RasterImageDisplay * temp = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateMaskFromAnnotations" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateMaskFromAnnotations" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CreateMaskFromAnnotations" "', argument " "4"" of type '" "bool *""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  result = Gatan::DM::CreateMaskFromAnnotations(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreatePackedComplexImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreatePackedComplexImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreatePackedComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreatePackedComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreatePackedComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreatePackedComplexImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreatePackedComplexImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreatePackedComplexImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreatePackedComplexImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreatePackedComplexImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreatePackedComplexImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreatePackedComplexImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreatePackedComplexImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreatePackedComplexImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CreatePackedComplexImage__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CreatePackedComplexImage__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CreatePackedComplexImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::CreatePackedComplexImage(char const *,long,long)\n"
    "    Gatan::DM::CreatePackedComplexImage(char const *,long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CreateReal1DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateReal1DImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateReal1DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateReal1DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateReal1DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateReal1DImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateReal2DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateReal2DImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateReal2DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateReal2DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateReal2DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateReal2DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreateReal2DImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateReal3DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CreateReal3DImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateReal3DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateReal3DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateReal3DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateReal3DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateReal3DImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::CreateReal3DImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateRGB1DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateRGB1DImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateRGB1DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateRGB1DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateRGB1DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateRGB1DImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateRGB2DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CreateRGB2DImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateRGB2DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateRGB2DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateRGB2DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateRGB2DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::CreateRGB2DImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateRGB3DImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CreateRGB3DImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateRGB3DImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateRGB3DImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateRGB3DImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateRGB3DImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateRGB3DImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::CreateRGB3DImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateRGBImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateRGBImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateRGBImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateRGBImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateRGBImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateRGBImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateRGBImageFromPicture(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreateRGBImageFromPicture",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateRGBImageFromPicture" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::CreateRGBImageFromPicture(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateShortImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CreateShortImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateShortImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateShortImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateShortImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::CreateShortImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCorrelate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CrossCorrelate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCorrelate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCorrelate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossCorrelate" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCorrelate" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::CrossCorrelate((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCorrelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CrossCorrelation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCorrelation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCorrelation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossCorrelation" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCorrelation" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::CrossCorrelation((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossProduct(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CrossProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossProduct" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossProduct" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossProduct" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossProduct" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::CrossProduct((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CWCloseWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CWCloseWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CWCloseWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::CWCloseWindow(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CWCreateWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  short arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  long val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CWCreateWindow",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CWCreateWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CWCreateWindow" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CWCreateWindow" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CWCreateWindow" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CWCreateWindow" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  result = (long)Gatan::DM::CWCreateWindow(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CWDeleteWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CWDeleteWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CWDeleteWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::CWDeleteWindow(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CWGetWindowPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CWGetWindowPtr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CWGetWindowPtr" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::CWGetWindowPtr(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CWInvalidateWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CWInvalidateWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CWInvalidateWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::CWInvalidateWindow(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeallocString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeallocString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DeallocString" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::DeallocString(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Delay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Delay",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Delay" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::Delay(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeleteDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeleteDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeleteDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::DeleteDirectory((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeleteFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeleteFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeleteFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::DeleteFile((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeleteImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeleteImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeleteImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::DeleteImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeleteImageFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeleteImageFile",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteImageFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Gatan::DM::DeleteImageFile((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestroyPicture(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestroyPicture",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestroyPicture" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  Gatan::DM::DestroyPicture(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisconnectObject(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DisconnectObject",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DisconnectObject" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisconnectObject" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DisconnectObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Gatan::DM::DisconnectObject(arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisplayAt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DisplayAt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayAt" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayAt" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisplayAt" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DisplayAt" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::DisplayAt((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisplayImageDocumentWithDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  CDialog *arg2 = (CDialog *) 0 ;
  uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DisplayImageDocumentWithDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayImageDocumentWithDialog" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayImageDocumentWithDialog" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_CDialog, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayImageDocumentWithDialog" "', argument " "2"" of type '" "CDialog *""'"); 
  }
  arg2 = reinterpret_cast< CDialog * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DisplayImageDocumentWithDialog" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayImageDocumentWithDialog" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::DisplayImageDocumentWithDialog((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoesClassExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoesClassExist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoesClassExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoesClassExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::DoesClassExist((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoesDirectoryExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoesDirectoryExist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoesDirectoryExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoesDirectoryExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::DoesDirectoryExist((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoesFileExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoesFileExist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoesFileExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoesFileExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::DoesFileExist((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoesFunctionExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoesFunctionExist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoesFunctionExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoesFunctionExist" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::DoesFunctionExist((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoesImageExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoesImageExist",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoesImageExist" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (bool)Gatan::DM::DoesImageExist(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoEvents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DoEvents")) SWIG_fail;
  Gatan::DM::DoEvents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowAddText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EditorWindowAddText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowAddText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowAddText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EditorWindowAddText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowAddText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::EditorWindowAddText((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowGetFont(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  ulong *arg3 = (ulong *) 0 ;
  ulong *arg4 = (ulong *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EditorWindowGetFont",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowGetFont" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowGetFont" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EditorWindowGetFont" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowGetFont" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ulong, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EditorWindowGetFont" "', argument " "3"" of type '" "ulong *""'"); 
  }
  arg3 = reinterpret_cast< ulong * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ulong, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EditorWindowGetFont" "', argument " "4"" of type '" "ulong *""'"); 
  }
  arg4 = reinterpret_cast< ulong * >(argp4);
  Gatan::DM::EditorWindowGetFont((Gatan::DM::Window const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowGetText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EditorWindowGetText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowGetText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowGetText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = Gatan::DM::EditorWindowGetText((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowPrint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EditorWindowPrint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowPrint" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowPrint" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (bool)Gatan::DM::EditorWindowPrint((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowSaveToFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EditorWindowSaveToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowSaveToFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSaveToFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EditorWindowSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::EditorWindowSaveToFile((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowSetFont(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  ulong arg3 ;
  ulong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EditorWindowSetFont",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowSetFont" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetFont" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EditorWindowSetFont" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetFont" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EditorWindowSetFont" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetFont" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EditorWindowSetFont" "', argument " "4"" of type '" "ulong""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetFont" "', argument " "4"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  Gatan::DM::EditorWindowSetFont((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EditorWindowSetText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EditorWindowSetText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EditorWindowSetText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetText" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EditorWindowSetText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EditorWindowSetText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::EditorWindowSetText((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMBeamShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EMBeamShift",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EMBeamShift" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMBeamShift" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::EMBeamShift(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMChangeFocus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EMChangeFocus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EMChangeFocus" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::EMChangeFocus(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMChangeStigmation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EMChangeStigmation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EMChangeStigmation" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMChangeStigmation" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::EMChangeStigmation(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMChangeTilt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EMChangeTilt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EMChangeTilt" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMChangeTilt" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::EMChangeTilt(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMCloseCommunication(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMCloseCommunication")) SWIG_fail;
  Gatan::DM::EMCloseCommunication();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMImageShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EMImageShift",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EMImageShift" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMImageShift" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::EMImageShift(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMLinkControlFunctions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EMLinkControlFunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMLinkControlFunctions" "', argument " "1"" of type '" "void *""'"); 
  }
  Gatan::DM::EMLinkControlFunctions(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMPrepareImageShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMPrepareImageShift")) SWIG_fail;
  Gatan::DM::EMPrepareImageShift();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMPrepareShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMPrepareShift")) SWIG_fail;
  Gatan::DM::EMPrepareShift();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMPrepareStigmation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMPrepareStigmation")) SWIG_fail;
  Gatan::DM::EMPrepareStigmation();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMPrepareTilt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMPrepareTilt")) SWIG_fail;
  Gatan::DM::EMPrepareTilt();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMSetupCommunication(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMSetupCommunication")) SWIG_fail;
  Gatan::DM::EMSetupCommunication();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMUnlinkControlFunctions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":EMUnlinkControlFunctions")) SWIG_fail;
  Gatan::DM::EMUnlinkControlFunctions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ErrorDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorDialog",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ErrorDialog" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  Gatan::DM::ErrorDialog(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecuteScriptFile__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ulong arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExecuteScriptFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecuteScriptFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExecuteScriptFile" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExecuteScriptFile" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)Gatan::DM::ExecuteScriptFile((char const *)arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecuteScriptFile__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecuteScriptFile",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecuteScriptFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (double)Gatan::DM::ExecuteScriptFile((char const *)arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExecuteScriptFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ExecuteScriptFile__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ulong, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ExecuteScriptFile__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ExecuteScriptFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ExecuteScriptFile(char const *,ulong)\n"
    "    Gatan::DM::ExecuteScriptFile(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExecuteScriptString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExecuteScriptString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExecuteScriptString" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExecuteScriptString" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (double)Gatan::DM::ExecuteScriptString((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Extract2D_Linear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  long arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Extract2D_Linear",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Extract2D_Linear" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Extract2D_Linear" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Extract2D_Linear" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Extract2D_Linear" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Extract2D_Linear" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Extract2D_Linear" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Extract2D_Linear" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Extract2D_Linear" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Extract2D_Linear" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Extract2D_Linear" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Extract2D_Linear" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  Gatan::DM::Extract2D_Linear((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::FFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindFrontImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)":FindFrontImage")) SWIG_fail;
  result = Gatan::DM::FindFrontImage();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindFunctionBySignature__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char_range *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Function result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindFunctionBySignature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_char_range,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindFunctionBySignature" "', argument " "1"" of type '" "char_range const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindFunctionBySignature" "', argument " "1"" of type '" "char_range const &""'"); 
  }
  arg1 = reinterpret_cast< char_range * >(argp1);
  result = Gatan::DM::FindFunctionBySignature((char_range const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Function(static_cast< const Gatan::DM::Function& >(result))), SWIGTYPE_p_Gatan__DM__Function, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindFunctionBySignature__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char_range *arg1 = 0 ;
  char_range *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Function result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FindFunctionBySignature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_char_range,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindFunctionBySignature" "', argument " "1"" of type '" "char_range const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindFunctionBySignature" "', argument " "1"" of type '" "char_range const &""'"); 
  }
  arg1 = reinterpret_cast< char_range * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char_range,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FindFunctionBySignature" "', argument " "2"" of type '" "char_range const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindFunctionBySignature" "', argument " "2"" of type '" "char_range const &""'"); 
  }
  arg2 = reinterpret_cast< char_range * >(argp2);
  result = Gatan::DM::FindFunctionBySignature((char_range const &)*arg1,(char_range const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Function(static_cast< const Gatan::DM::Function& >(result))), SWIGTYPE_p_Gatan__DM__Function, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindFunctionBySignature(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_char_range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FindFunctionBySignature__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_char_range, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_char_range, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FindFunctionBySignature__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FindFunctionBySignature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::FindFunctionBySignature(char_range const &)\n"
    "    Gatan::DM::FindFunctionBySignature(char_range const &,char_range const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FindImageByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindImageByID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FindImageByID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::FindImageByID(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindImageByIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindImageByIndex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FindImageByIndex" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::FindImageByIndex(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindImageByLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindImageByLabel",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindImageByLabel" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Gatan::DM::FindImageByLabel((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindImageByName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindImageByName",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindImageByName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Gatan::DM::FindImageByName((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindLike(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  short arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FindLike",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindLike" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FindLike" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FindLike" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FindLike" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  result = Gatan::DM::FindLike((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindNextImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindNextImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindNextImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindNextImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::FindNextImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindReferenceImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  short arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FindReferenceImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindReferenceImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FindReferenceImage" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FindReferenceImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FindReferenceImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::FindReferenceImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)":FirstImage")) SWIG_fail;
  result = Gatan::DM::FirstImage();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlipHorizontal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlipHorizontal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlipHorizontal" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlipHorizontal" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::FlipHorizontal((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlipVertical(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlipVertical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlipVertical" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlipVertical" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::FlipVertical((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatingModelessDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatingModelessDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatingModelessDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FloatingModelessDialog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatingModelessDialog" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::FloatingModelessDialog((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fngetkey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)":fngetkey")) SWIG_fail;
  result = (short)Gatan::DM::fngetkey();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceSurvey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ForceSurvey((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeSemaphore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeSemaphore",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FreeSemaphore" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::FreeSemaphore(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionCountParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Function *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionCountParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionCountParameters" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionCountParameters" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Function * >(argp1);
  result = Gatan::DM::FunctionCountParameters((Gatan::DM::Function const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionGenerateStub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Function *arg1 = 0 ;
  bool arg2 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FunctionGenerateStub",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionGenerateStub" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionGenerateStub" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Function * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctionGenerateStub" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FunctionGenerateStub" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionGenerateStub" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = Gatan::DM::FunctionGenerateStub((Gatan::DM::Function const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Function *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionIsValid" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionIsValid" "', argument " "1"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Function * >(argp1);
  result = (bool)Gatan::DM::FunctionIsValid((Gatan::DM::Function const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Get1DSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Get1DSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Get1DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Get1DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Get1DSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::Get1DSize((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Get2DSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Get2DSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Get2DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Get2DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Get2DSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Get2DSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::Get2DSize((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Get3DSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Get3DSize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Get3DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Get3DSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Get3DSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Get3DSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Get3DSize" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  Gatan::DM::Get3DSize((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetPlatformImplementation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG_PTR result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowGetPlatformImplementation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetPlatformImplementation" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetPlatformImplementation" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = Gatan::DM::WindowGetPlatformImplementation((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ULONG_PTR(static_cast< const ULONG_PTR& >(result))), SWIGTYPE_p_ULONG_PTR, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool *arg3 = (bool *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetBoolean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetBoolean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetBoolean" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (bool)Gatan::DM::GetBoolean((char const *)arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetCalibrationDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GetCalibrationDialog",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetCalibrationDialog" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetCalibrationDialog" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetCalibrationDialog" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetCalibrationDialog" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetCalibrationDialog" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetCalibrationDialog" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (bool)Gatan::DM::GetCalibrationDialog(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetCLUT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetCLUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetCLUT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetCLUT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::GetCLUT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDataPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetDataPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDataPtr" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDataPtr" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::GetDataPtr((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (short)Gatan::DM::GetDataType((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetDate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDate" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetDate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetDate" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::GetDate(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDirectoryDialog__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetDirectoryDialog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDirectoryDialog" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetDirectoryDialog" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::GetDirectoryDialog(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDirectoryDialog__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetDirectoryDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDirectoryDialog" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDirectoryDialog" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetDirectoryDialog" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDirectoryDialog" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetDirectoryDialog" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDirectoryDialog" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::GetDirectoryDialog((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDirectoryDialog(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GetDirectoryDialog__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gatan__DM__String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GetDirectoryDialog__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetDirectoryDialog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetDirectoryDialog(char *,long)\n"
    "    Gatan::DM::GetDirectoryDialog(Gatan::DM::String const &,Gatan::DM::String const &,Gatan::DM::String &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetDisplayAsImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetDisplayAsImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDisplayAsImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDisplayAsImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::GetDisplayAsImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDocumentWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetDocumentWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDocumentWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetDocumentWindow(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetDocumentWindowByTitle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetDocumentWindowByTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDocumentWindowByTitle" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetDocumentWindowByTitle" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::GetDocumentWindowByTitle((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetEstimatedMinMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetEstimatedMinMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetEstimatedMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetEstimatedMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetEstimatedMinMax" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetEstimatedMinMax" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::GetEstimatedMinMax((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short *arg1 = (short *) 0 ;
  long *arg2 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetException",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetException" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetException" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::GetException(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetExceptionDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetExceptionDescription")) SWIG_fail;
  result = Gatan::DM::GetExceptionDescription();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetExceptionString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetExceptionString",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetExceptionString" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Gatan::DM::GetExceptionString(arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFilesInDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetFilesInDirectory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFilesInDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFilesInDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFilesInDirectory" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFilesInDirectory" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::GetFilesInDirectory((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFloatingWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetFloatingWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetFloatingWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetFloatingWindow(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFourImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  Gatan::DM::Image *arg5 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GetFourImages",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFourImages" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFourImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetFourImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetFourImages" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImages" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetFourImages" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImages" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg5 = reinterpret_cast< Gatan::DM::Image * >(argp5);
  result = (bool)Gatan::DM::GetFourImages((char const *)arg1,*arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFourImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  Gatan::DM::Image *arg5 = 0 ;
  Gatan::DM::Image *arg6 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GetFourImagesWithPrompt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFourImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFourImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetFourImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetFourImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetFourImagesWithPrompt" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImagesWithPrompt" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg5 = reinterpret_cast< Gatan::DM::Image * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetFourImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg6 = reinterpret_cast< Gatan::DM::Image * >(argp6);
  result = (bool)Gatan::DM::GetFourImagesWithPrompt((char const *)arg1,(char const *)arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFourLabeledImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  Gatan::DM::Image *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  Gatan::DM::Image *arg8 = 0 ;
  char *arg9 = (char *) 0 ;
  Gatan::DM::Image *arg10 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:GetFourLabeledImagesWithPrompt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg6 = reinterpret_cast< Gatan::DM::Image * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "8"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "8"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg8 = reinterpret_cast< Gatan::DM::Image * >(argp8);
  res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "9"" of type '" "char const *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "10"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFourLabeledImagesWithPrompt" "', argument " "10"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg10 = reinterpret_cast< Gatan::DM::Image * >(argp10);
  result = (bool)Gatan::DM::GetFourLabeledImagesWithPrompt((char const *)arg1,(char const *)arg2,(char const *)arg3,*arg4,(char const *)arg5,*arg6,(char const *)arg7,*arg8,(char const *)arg9,*arg10);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFrontImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetFrontImage")) SWIG_fail;
  result = Gatan::DM::GetFrontImage();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFrontImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetFrontImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFrontImage" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetFrontImage" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::GetFrontImage(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFrontImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_GetFrontImage__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetFrontImage__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetFrontImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetFrontImage()\n"
    "    Gatan::DM::GetFrontImage(Gatan::DM::Image &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetFrontImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetFrontImageDocument")) SWIG_fail;
  result = Gatan::DM::GetFrontImageDocument();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFrontImageID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetFrontImageID")) SWIG_fail;
  result = (long)Gatan::DM::GetFrontImageID();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageDataSeed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageDataSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageDataSeed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetImageDataSeed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::GetImageDataSeed((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageDocument",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetImageDocument" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetImageDocument(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageDocumentByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageDocumentByID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetImageDocumentByID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetImageDocumentByID(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageDocumentByPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageDocumentByPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageDocumentByPath" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetImageDocumentByPath" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::GetImageDocumentByPath((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageFromID__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetImageFromID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageFromID" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetImageFromID" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetImageFromID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::GetImageFromID(*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageFromID__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageFromID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetImageFromID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetImageFromID(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageFromID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_GetImageFromID__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GetImageFromID__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetImageFromID'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetImageFromID(Gatan::DM::Image &,long)\n"
    "    Gatan::DM::GetImageFromID(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetImageID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetImageID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::GetImageID((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetImageWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetImageWindow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetImageWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::GetImageWindow((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetInteger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long *arg3 = (long *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetInteger",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetInteger" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetInteger" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetInteger" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  result = (bool)Gatan::DM::GetInteger((char const *)arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetInversionMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetInversionMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetInversionMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetInversionMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::GetInversionMode((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLabel__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::GetLabel((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLabel__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetLabel" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::GetLabel((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLabel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetLabel__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetLabel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetLabel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetLabel(Gatan::DM::Image const &)\n"
    "    Gatan::DM::GetLabel(Gatan::DM::Image const &,char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLimits" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLimits" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetLimits" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetLimits" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::GetLimits((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetMaximalDocumentWindowRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GetMaximalDocumentWindowRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetMaximalDocumentWindowRect" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetMaximalDocumentWindowRect" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetMaximalDocumentWindowRect" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetMaximalDocumentWindowRect" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetMaximalDocumentWindowRect" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::GetMaximalDocumentWindowRect(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::GetName((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::GetName((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetName__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetName__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetName(Gatan::DM::Image const &)\n"
    "    Gatan::DM::GetName(Gatan::DM::Image const &,char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetNamedImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetNamedImage",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNamedImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Gatan::DM::GetNamedImage((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetNamedImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetNamedImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNamedImage" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetNamedImage" "', argument " "1"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetNamedImage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)Gatan::DM::GetNamedImage(*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetNamedImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetNamedImage__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetNamedImage__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetNamedImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::GetNamedImage(char const *)\n"
    "    Gatan::DM::GetNamedImage(Gatan::DM::Image &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetNextImageID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetNextImageID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNextImageID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::GetNextImageID(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetNthDocumentWindowOfType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetNthDocumentWindowOfType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNthDocumentWindowOfType" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNthDocumentWindowOfType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::GetNthDocumentWindowOfType(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetNthImageID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetNthImageID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNthImageID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::GetNthImageID(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetNumber",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNumber" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNumber" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetNumber" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = (bool)Gatan::DM::GetNumber((char const *)arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOneImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetOneImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOneImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetOneImage" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetOneImage" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = (bool)Gatan::DM::GetOneImage((char const *)arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOneImageWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetOneImageWithPrompt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOneImageWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetOneImageWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetOneImageWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetOneImageWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  result = (bool)Gatan::DM::GetOneImageWithPrompt((char const *)arg1,(char const *)arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOneLabeledImageWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GetOneLabeledImageWithPrompt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOneLabeledImageWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetOneLabeledImageWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetOneLabeledImageWithPrompt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetOneLabeledImageWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetOneLabeledImageWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  result = (bool)Gatan::DM::GetOneLabeledImageWithPrompt((char const *)arg1,(char const *)arg2,(char const *)arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetOrigin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetOrigin" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetOrigin" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::GetOrigin((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOSTickCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetOSTickCount")) SWIG_fail;
  result = Gatan::DM::GetOSTickCount();
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetOSTicksPerSecond(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetOSTicksPerSecond")) SWIG_fail;
  result = Gatan::DM::GetOSTicksPerSecond();
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetPackageTags(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetPackageTags",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPackageTags" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Gatan::DM::GetPackageTags((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetPersistentTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetPersistentTagGroup")) SWIG_fail;
  result = Gatan::DM::GetPersistentTagGroup();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetUserPersistentTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetUserPersistentTagGroup")) SWIG_fail;
  result = Gatan::DM::GetUserPersistentTagGroup();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetPixel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPixel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetPixel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetPixel" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetPixel" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (double)Gatan::DM::GetPixel((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetPlatformInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetPlatformInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPlatformInfo" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::GetPlatformInfo(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRawSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetRawSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRawSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRawSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::GetRawSize((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRawStreamPos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRawStreamPos",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetRawStreamPos" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetRawStreamPos" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::GetRawStreamPos(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRawStreamSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRawStreamSize",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetRawStreamSize" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetRawStreamSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::GetRawStreamSize(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetResultsWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetResultsWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetResultsWindow" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = Gatan::DM::GetResultsWindow(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetROIFromID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetROIFromID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetROIFromID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetROIFromID(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetScale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetScale" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetScale" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::GetScale((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetScreenSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  long *arg2 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetScreenSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetScreenSize" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetScreenSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  Gatan::DM::GetScreenSize(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetScriptObjectFromID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ScriptObject result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetScriptObjectFromID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetScriptObjectFromID" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetScriptObjectFromID(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ScriptObject(static_cast< const Gatan::DM::ScriptObject& >(result))), SWIGTYPE_p_Gatan__DM__ScriptObject, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetSelection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GetSelection",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetSelection" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSelection" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetSelection" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetSelection" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  result = (bool)Gatan::DM::GetSelection((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::GetSize((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetSpecialDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetSpecialDirectory",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSpecialDirectory" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = Gatan::DM::GetSpecialDirectory(arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetSpecialWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetSpecialWindow",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSpecialWindow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::GetSpecialWindow(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetString" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)Gatan::DM::GetString((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetSurvey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::GetSurvey((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetThreeImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GetThreeImages",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetThreeImages" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetThreeImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetThreeImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetThreeImages" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImages" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  result = (bool)Gatan::DM::GetThreeImages((char const *)arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetThreeImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  Gatan::DM::Image *arg5 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GetThreeImagesWithPrompt",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetThreeImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetThreeImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetThreeImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetThreeImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetThreeImagesWithPrompt" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeImagesWithPrompt" "', argument " "5"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg5 = reinterpret_cast< Gatan::DM::Image * >(argp5);
  result = (bool)Gatan::DM::GetThreeImagesWithPrompt((char const *)arg1,(char const *)arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetThreeLabeledImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  Gatan::DM::Image *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  Gatan::DM::Image *arg8 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:GetThreeLabeledImagesWithPrompt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg6 = reinterpret_cast< Gatan::DM::Image * >(argp6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "8"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetThreeLabeledImagesWithPrompt" "', argument " "8"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg8 = reinterpret_cast< Gatan::DM::Image * >(argp8);
  result = (bool)Gatan::DM::GetThreeLabeledImagesWithPrompt((char const *)arg1,(char const *)arg2,(char const *)arg3,*arg4,(char const *)arg5,*arg6,(char const *)arg7,*arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTicks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetTicks")) SWIG_fail;
  result = Gatan::DM::GetTicks();
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTicksPerSecond(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetTicksPerSecond")) SWIG_fail;
  result = Gatan::DM::GetTicksPerSecond();
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetTime",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetTime" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTime" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetTime" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::GetTime(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTwoImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetTwoImages",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTwoImages" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTwoImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoImages" "', argument " "2"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetTwoImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoImages" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  result = (bool)Gatan::DM::GetTwoImages((char const *)arg1,*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTwoImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GetTwoImagesWithPrompt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTwoImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTwoImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetTwoImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoImagesWithPrompt" "', argument " "3"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetTwoImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  result = (bool)Gatan::DM::GetTwoImagesWithPrompt((char const *)arg1,(char const *)arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetTwoLabeledImagesWithPrompt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  Gatan::DM::Image *arg6 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GetTwoLabeledImagesWithPrompt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "4"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Gatan__DM__Image,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTwoLabeledImagesWithPrompt" "', argument " "6"" of type '" "Gatan::DM::Image &""'"); 
  }
  arg6 = reinterpret_cast< Gatan::DM::Image * >(argp6);
  result = (bool)Gatan::DM::GetTwoLabeledImagesWithPrompt((char const *)arg1,(char const *)arg2,(char const *)arg3,*arg4,(char const *)arg5,*arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetUnitsH(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetUnitsH",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetUnitsH" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetUnitsH" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetUnitsH" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (float)Gatan::DM::GetUnitsH((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetUnitString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetUnitString" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::GetUnitString((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetUnitsV(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetUnitsV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetUnitsV" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetUnitsV" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetUnitsV" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (float)Gatan::DM::GetUnitsV((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetVarianceFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetVarianceFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetVarianceFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetVarianceFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::GetVarianceFloat((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetWindowPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetWindowPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetWindowPosition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetWindowPosition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetWindowPosition" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetWindowPosition" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::GetWindowPosition((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GetWindowSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetWindowSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetWindowSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetWindowSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetWindowSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::GetWindowSize((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetZoom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetZoom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetZoom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetZoom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::GetZoom((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GrabSemaphore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GrabSemaphore",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GrabSemaphore" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::GrabSemaphore(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GroupAnnotationUngroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GroupAnnotationUngroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GroupAnnotationUngroup" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GroupAnnotationUngroup" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  Gatan::DM::GroupAnnotationUngroup((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HasAcquisitionDaemon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HasAcquisitionDaemon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HasAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HasAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::HasAcquisitionDaemon((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HideImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HideImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HideImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HideImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::HideImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::IFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCalculateHistogram(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  long arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageCalculateHistogram",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCalculateHistogram" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCalculateHistogram" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCalculateHistogram" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCalculateHistogram" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageCalculateHistogram" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageCalculateHistogram" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageCalculateHistogram" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ImageCalculateHistogram((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCalculateMinMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageCalculateMinMax",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCalculateMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCalculateMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageCalculateMinMax" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageCalculateMinMax" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageCalculateMinMax" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageCalculateMinMax" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageCalculateMinMax((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageClone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageClone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageClone" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageClone" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageClone((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCopyCalibrationFrom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCopyCalibrationFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCopyCalibrationFrom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCopyCalibrationFrom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCopyCalibrationFrom" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCopyCalibrationFrom" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ImageCopyCalibrationFrom((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCountImageDisplays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCountImageDisplays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCountImageDisplays" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCountImageDisplays" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (long)Gatan::DM::ImageCountImageDisplays((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCountImageDisplaysInImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::ImageDocument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCountImageDisplaysInImageDocument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCountImageDisplaysInImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCountImageDisplaysInImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCountImageDisplaysInImageDocument" "', argument " "2"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCountImageDisplaysInImageDocument" "', argument " "2"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp2);
  result = (long)Gatan::DM::ImageCountImageDisplaysInImageDocument((Gatan::DM::Image const &)*arg1,(Gatan::DM::ImageDocument const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreateImageDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCreateImageDisplay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreateImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCreateImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageCreateImageDisplay" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageCreateImageDisplay((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDataChanged(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDataChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDataChanged" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDataChanged" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ImageDataChanged((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayAccumulateROIsToMask(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ImageDisplayAccumulateROIsToMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ImageDisplayAccumulateROIsToMask" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  Gatan::DM::ImageDisplayAccumulateROIsToMask((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayAddKeyListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageDisplayAddKeyListener",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayAddKeyListener" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddKeyListener" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayAddKeyListener" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayAddKeyListener" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayAddKeyListener" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  Gatan::DM::ImageDisplayAddKeyListener((Gatan::DM::ImageDisplay const &)*arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayAddROI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayAddROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayAddROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayAddROI" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROI" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  Gatan::DM::ImageDisplayAddROI((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayAddROIAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayAddROIAtBeginning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayAddROIAtBeginning" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROIAtBeginning" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayAddROIAtBeginning" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROIAtBeginning" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  Gatan::DM::ImageDisplayAddROIAtBeginning((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayAddROIAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayAddROIAtEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayAddROIAtEnd" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROIAtEnd" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayAddROIAtEnd" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayAddROIAtEnd" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  Gatan::DM::ImageDisplayAddROIAtEnd((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayChangeDisplayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayChangeDisplayType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayChangeDisplayType" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayChangeDisplayType" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplayChangeDisplayType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ImageDisplayChangeDisplayType((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayCountROIs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayCountROIs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayCountROIs" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayCountROIs" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (long)Gatan::DM::ImageDisplayCountROIs((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayDeleteROI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayDeleteROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayDeleteROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayDeleteROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayDeleteROI" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayDeleteROI" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  Gatan::DM::ImageDisplayDeleteROI((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayDoesROIExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayDoesROIExist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayDoesROIExist" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayDoesROIExist" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayDoesROIExist" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)Gatan::DM::ImageDisplayDoesROIExist((Gatan::DM::ImageDisplay const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayExportToFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayExportToFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayExportToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayExportToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayExportToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayExportToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayExportToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayExportToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::ImageDisplayExportToFile((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetBufferedImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetBufferedImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetBufferedImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetBufferedImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetBufferedImage((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetComplexMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetComplexMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetComplexMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetComplexMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (long)Gatan::DM::ImageDisplayGetComplexMode((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetComplexModeRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetComplexModeRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetComplexModeRange" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetComplexModeRange" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (float)Gatan::DM::ImageDisplayGetComplexModeRange((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetContrastLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetContrastLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetContrastLimits" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetContrastLimits" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDisplayGetContrastLimits((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetOutlierTrimLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetOutlierTrimLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetOutlierTrimLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetOutlierTrimLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetOutlierTrimLimits" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetOutlierTrimLimits" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  Gatan::DM::ImageDisplayGetOutlierTrimLimits((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetContrastChangeTriggerFractions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetContrastChangeTriggerFractions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetContrastChangeTriggerFractions" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetContrastChangeTriggerFractions" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetContrastChangeTriggerFractions" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetContrastChangeTriggerFractions" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  Gatan::DM::ImageDisplayGetContrastChangeTriggerFractions((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetContrastMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetContrastMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetContrastMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetContrastMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (long)Gatan::DM::ImageDisplayGetContrastMode((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetContrastParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetContrastParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetContrastParameters" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetContrastParameters" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetContrastParameters" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetContrastParameters" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDisplayGetContrastParameters((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDisplayedImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetDisplayedImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetDisplayedImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetDisplayedImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetDisplayedImage((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDisplayedLayers__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetDisplayedLayers",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::ImageDisplayGetDisplayedLayers((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDisplayedLayers__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplayGetDisplayedLayers",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDisplayGetDisplayedLayers" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::ImageDisplayGetDisplayedLayers((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDisplayedLayers(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDisplay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageDisplayGetDisplayedLayers__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDisplay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_long, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_long, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ImageDisplayGetDisplayedLayers__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageDisplayGetDisplayedLayers'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ImageDisplayGetDisplayedLayers(Gatan::DM::ImageDisplay const &,long *,long *)\n"
    "    Gatan::DM::ImageDisplayGetDisplayedLayers(Gatan::DM::ImageDisplay const &,long *,long *,long *,long *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDisplayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetDisplayType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetDisplayType" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetDisplayType" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (long)Gatan::DM::ImageDisplayGetDisplayType((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetDoAutoSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetDoAutoSurvey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (bool)Gatan::DM::ImageDisplayGetDoAutoSurvey((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetExportImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  ulong arg2 ;
  Gatan::DM::ImageDisplay *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplayGetExportImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetExportImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetExportImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetExportImage" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetExportImage" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetExportImage" "', argument " "3"" of type '" "Gatan::DM::ImageDisplay &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetExportImage" "', argument " "3"" of type '" "Gatan::DM::ImageDisplay &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp3);
  result = Gatan::DM::ImageDisplayGetExportImage((Gatan::DM::ImageDisplay const &)*arg1,arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetImage" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetImage((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetImageAdjustRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplayGetImageAdjustRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDisplayGetImageAdjustRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDisplayGetImageAdjustRect((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetImageAdjustRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplayGetImageAdjustRectInView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDisplayGetImageAdjustRectInView" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDisplayGetImageAdjustRectInView((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetImageRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplayGetImageRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetImageRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetImageRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetImageRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetImageRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayGetImageRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDisplayGetImageRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDisplayGetImageRect((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetImageRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplayGetImageRectInView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetImageRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetImageRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetImageRectInView" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDisplayGetImageRectInView" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDisplayGetImageRectInView" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDisplayGetImageRectInView" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDisplayGetImageRectInView((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetInputColorTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetInputColorTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetInputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetInputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetInputColorTable((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetIntensityTransformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetIntensityTransformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetIntensityTransformation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetIntensityTransformation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetIntensityTransformation((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayIsColorTableInverted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayIsColorTableInverted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayIsColorTableInverted" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayIsColorTableInverted" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (bool)Gatan::DM::ImageDisplayIsColorTableInverted((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetMinimumContrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetMinimumContrast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetMinimumContrast" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetMinimumContrast" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (float)Gatan::DM::ImageDisplayGetMinimumContrast((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetOutputColorTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetOutputColorTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetOutputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetOutputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = Gatan::DM::ImageDisplayGetOutputColorTable((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetROI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayGetROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplayGetROI" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageDisplayGetROI((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetROISelectionStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayGetROISelectionStyle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetROISelectionStyle" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetROISelectionStyle" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayGetROISelectionStyle" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetROISelectionStyle" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  result = (long)Gatan::DM::ImageDisplayGetROISelectionStyle((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetShowExtractionAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetShowExtractionAnnotation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetShowExtractionAnnotation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetShowExtractionAnnotation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (bool)Gatan::DM::ImageDisplayGetShowExtractionAnnotation((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayGetSurveyTechnique(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayGetSurveyTechnique",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayGetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayGetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (long)Gatan::DM::ImageDisplayGetSurveyTechnique((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayIsCaptionOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayIsCaptionOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayIsCaptionOn" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayIsCaptionOn" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (bool)Gatan::DM::ImageDisplayIsCaptionOn((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayIsROISelected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayIsROISelected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayIsROISelected" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayIsROISelected" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayIsROISelected" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayIsROISelected" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  result = (bool)Gatan::DM::ImageDisplayIsROISelected((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDisplayIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayIsValid" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayIsValid" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  result = (bool)Gatan::DM::ImageDisplayIsValid((Gatan::DM::ImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayLookupROI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayLookupROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayLookupROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayLookupROI" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayLookupROI" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = Gatan::DM::ImageDisplayLookupROI((Gatan::DM::ImageDisplay const &)*arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayLookupROIByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayLookupROIByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayLookupROIByID" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayLookupROIByID" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplayLookupROIByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageDisplayLookupROIByID((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplayRemoveKeyListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplayRemoveKeyListener",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplayRemoveKeyListener" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplayRemoveKeyListener" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplayRemoveKeyListener" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::ImageDisplayRemoveKeyListener((Gatan::DM::ImageDisplay const &)*arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetCaptionOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetCaptionOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetCaptionOn" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetCaptionOn" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetCaptionOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageDisplaySetCaptionOn((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetComplexMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetComplexMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetComplexMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetComplexMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetComplexMode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ImageDisplaySetComplexMode((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetComplexModeRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetComplexModeRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetComplexModeRange" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetComplexModeRange" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetComplexModeRange" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::ImageDisplaySetComplexModeRange((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetContrastLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetContrastLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetContrastLimits" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetContrastLimits" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ImageDisplaySetContrastLimits((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetOutlierTrimLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetOutlierTrimLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetOutlierTrimLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetOutlierTrimLimits" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetOutlierTrimLimits" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetOutlierTrimLimits" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::ImageDisplaySetOutlierTrimLimits((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetContrastChangeTriggerFractions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetContrastChangeTriggerFractions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetContrastChangeTriggerFractions" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetContrastChangeTriggerFractions" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetContrastChangeTriggerFractions" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetContrastChangeTriggerFractions" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::ImageDisplaySetContrastChangeTriggerFractions((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetContrastMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetContrastMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetContrastMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetContrastMode" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetContrastMode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ImageDisplaySetContrastMode((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetContrastParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetContrastParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetContrastParameters" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetContrastParameters" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetContrastParameters" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetContrastParameters" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ImageDisplaySetContrastParameters((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetDisplayedLayers__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetDisplayedLayers",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ImageDisplaySetDisplayedLayers((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetDisplayedLayers__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplaySetDisplayedLayers",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDisplaySetDisplayedLayers" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::ImageDisplaySetDisplayedLayers((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetDisplayedLayers(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDisplay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ImageDisplaySetDisplayedLayers__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDisplay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ImageDisplaySetDisplayedLayers__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageDisplaySetDisplayedLayers'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ImageDisplaySetDisplayedLayers(Gatan::DM::ImageDisplay const &,long,long)\n"
    "    Gatan::DM::ImageDisplaySetDisplayedLayers(Gatan::DM::ImageDisplay const &,long,long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetDoAutoSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetDoAutoSurvey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetDoAutoSurvey" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageDisplaySetDoAutoSurvey((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetImageRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDisplaySetImageRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetImageRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetImageRect" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetImageRect" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetImageRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDisplaySetImageRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDisplaySetImageRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ImageDisplaySetImageRect((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetInputColorTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetInputColorTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetInputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetInputColorTable" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplaySetInputColorTable" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetInputColorTable" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ImageDisplaySetInputColorTable((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetIntensityTransformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetIntensityTransformation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetIntensityTransformation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetIntensityTransformation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplaySetIntensityTransformation" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetIntensityTransformation" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ImageDisplaySetIntensityTransformation((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetMinimumContrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetMinimumContrast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetMinimumContrast" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetMinimumContrast" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetMinimumContrast" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::ImageDisplaySetMinimumContrast((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetROISelected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetROISelected",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetROISelected" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetROISelected" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplaySetROISelected" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetROISelected" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetROISelected" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::ImageDisplaySetROISelected((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetROISelectionStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDisplaySetROISelectionStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetROISelectionStyle" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetROISelectionStyle" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDisplaySetROISelectionStyle" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetROISelectionStyle" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDisplaySetROISelectionStyle" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ImageDisplaySetROISelectionStyle((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetShowExtractionAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetShowExtractionAnnotation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetShowExtractionAnnotation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetShowExtractionAnnotation" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetShowExtractionAnnotation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageDisplaySetShowExtractionAnnotation((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDisplaySetSurveyTechnique(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDisplaySetSurveyTechnique",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDisplaySetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDisplaySetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDisplaySetSurveyTechnique" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ImageDisplaySetSurveyTechnique((Gatan::DM::ImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentAddImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentAddImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentAddImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentAddImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentAddImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentAddImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ImageDocumentAddImage((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentAddImageDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentAddImageDisplay",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentAddImageDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentAddImageDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentAddImageDisplay" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentAddImageDisplay" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentAddImageDisplay" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::ImageDocumentAddImageDisplay((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentAddToUserInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentAddToUserInterface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentAddToUserInterface" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentAddToUserInterface" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentAddToUserInterface((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentClean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentClean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentClean" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentClean" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentClean((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentClone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentClone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentClone" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentClone" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentClone" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Gatan::DM::ImageDocumentClone((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentClose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentClose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentClose" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentClose" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentClose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageDocumentClose((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentCountImages(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentCountImages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentCountImages" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentCountImages" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (long)Gatan::DM::ImageDocumentCountImages((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentCreateRGBImageFromDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentCreateRGBImageFromDocument",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDocumentCreateRGBImageFromDocument" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::ImageDocumentCreateRGBImageFromDocument((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentDeleteImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentDeleteImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentDeleteImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentDeleteImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentDeleteImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentDeleteImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::ImageDocumentDeleteImage((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentDoesImageWithIDExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentDoesImageWithIDExist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentDoesImageWithIDExist" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentDoesImageWithIDExist" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentDoesImageWithIDExist" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::ImageDocumentDoesImageWithIDExist((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentEnsurePlacedOnPage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentEnsurePlacedOnPage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentEnsurePlacedOnPage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentEnsurePlacedOnPage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentEnsurePlacedOnPage((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetAsPICT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetAsPICT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetAsPICT" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetAsPICT" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (long)Gatan::DM::ImageDocumentGetAsPICT((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetComponentByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentGetComponentByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetComponentByID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetComponentByID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentGetComponentByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageDocumentGetComponentByID((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetDrawMarginsInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetDrawMarginsInPageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetDrawMarginsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetDrawMarginsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentGetDrawMarginsInPageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetDrawPaperInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetDrawPaperInPageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetDrawPaperInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetDrawPaperInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentGetDrawPaperInPageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetFixedWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetFixedWindowSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetFixedWindowSize" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetFixedWindowSize" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  Gatan::DM::ImageDocumentGetFixedWindowSize((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (long)Gatan::DM::ImageDocumentGetID((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentGetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetImage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentGetImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageDocumentGetImage((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetImageByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentGetImageByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetImageByID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetImageByID" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentGetImageByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageDocumentGetImageByID((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetImageModeDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetImageModeDisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetImageModeDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetImageModeDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetImageModeDisplay((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetMinimumPointSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetMinimumPointSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetMinimumPointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetMinimumPointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetMinimumPointSize" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetMinimumPointSize" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDocumentGetMinimumPointSize((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetName" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetName" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetName((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetOrientation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetOrientation" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetOrientation" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetOrientation((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetPageBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetPageBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetPageBounds" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetPageBounds" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetPageBounds" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetPageBounds" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetPageBounds" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetPageBounds" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetPageBounds((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetPageResolution_72dpi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetPageResolution_72dpi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetPageResolution_72dpi" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetPageResolution_72dpi" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetPageResolution_72dpi" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetPageResolution_72dpi" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDocumentGetPageResolution_72dpi((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetPageResolution_Printer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetPageResolution_Printer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetPageResolution_Printer" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetPageResolution_Printer" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetPageResolution_Printer" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetPageResolution_Printer" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDocumentGetPageResolution_Printer((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetPaperBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetPaperBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetPaperBounds" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetPaperBounds" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetPaperBounds" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetPaperBounds" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetPaperBounds" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetPaperBounds" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetPaperBounds((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetPreferredViewRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetPreferredViewRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetPreferredViewRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetPreferredViewRect((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetReferencePointSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetReferencePointSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetReferencePointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetReferencePointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetReferencePointSize" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetReferencePointSize" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDocumentGetReferencePointSize((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetRootComponent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetRootComponent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetRootComponent" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetRootComponent" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetRootComponent((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetTagGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetTagGroup((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetUnzoomedPointSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentGetUnzoomedPointSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetUnzoomedPointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetUnzoomedPointSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetUnzoomedPointSize" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetUnzoomedPointSize" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ImageDocumentGetUnzoomedPointSize((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetViewExtent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetViewExtent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetViewExtent" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetViewExtent" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetViewExtent" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetViewExtent" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetViewExtent" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetViewExtent" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetViewExtent((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetViewToWindowTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetViewToWindowTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetViewToWindowTransform" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetViewToWindowTransform((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetVisibleViewRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentGetVisibleViewRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageDocumentGetVisibleViewRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ImageDocumentGetVisibleViewRect((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentGetWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentGetWindow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentGetWindow" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentGetWindow" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentGetWindow((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentHasBeenPlacedOnPage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentHasBeenPlacedOnPage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentHasBeenPlacedOnPage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentHasBeenPlacedOnPage" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentHasBeenPlacedOnPage((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentHasFixedWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentHasFixedWindowSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentHasFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentHasFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentHasFixedWindowSize((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentHide(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentHide",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentHide" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentHide" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentHide((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentIsDirty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentIsDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentIsDirty" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentIsDirty" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentIsDirty((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentIsInImageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentIsInImageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentIsInImageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentIsInImageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentIsInImageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentIsInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentIsInPageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentIsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentIsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentIsInPageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentIsLockedInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentIsLockedInPageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentIsLockedInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentIsLockedInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentIsLockedInPageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentIsValid" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentIsValid" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentIsValid((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentLockInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentLockInPageMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentLockInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentLockInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentLockInPageMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)Gatan::DM::ImageDocumentLockInPageMode((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentMaximizeRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentMaximizeRectInView",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentMaximizeRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentMaximizeRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentMaximizeRectInView" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentMaximizeRectInView" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDocumentMaximizeRectInView" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDocumentMaximizeRectInView" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ImageDocumentMaximizeRectInView((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentPrint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentPrint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentPrint" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentPrint" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = (bool)Gatan::DM::ImageDocumentPrint((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentRemoveFromUserInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentRemoveFromUserInterface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentRemoveFromUserInterface" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentRemoveFromUserInterface" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentRemoveFromUserInterface((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSaveToFile__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentSaveToFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSaveToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentSaveToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::ImageDocumentSaveToFile((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSaveToFile__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  uint32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageDocumentSaveToFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSaveToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageDocumentSaveToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageDocumentSaveToFile" "', argument " "4"" of type '" "uint32 const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSaveToFile" "', argument " "4"" of type '" "uint32 const""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  Gatan::DM::ImageDocumentSaveToFile((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::String const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSaveToFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gatan__DM__String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageDocumentSaveToFile__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ImageDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gatan__DM__String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_uint32, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ImageDocumentSaveToFile__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageDocumentSaveToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ImageDocumentSaveToFile(Gatan::DM::ImageDocument const &,Gatan::DM::String const &,Gatan::DM::String const &)\n"
    "    Gatan::DM::ImageDocumentSaveToFile(Gatan::DM::ImageDocument const &,Gatan::DM::String const &,Gatan::DM::String const &,uint32 const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetCurrentViewAsUnzoomed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentSetCurrentViewAsUnzoomed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetCurrentViewAsUnzoomed" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetCurrentViewAsUnzoomed" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentSetCurrentViewAsUnzoomed((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetDoIntegralZoom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSetDoIntegralZoom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetDoIntegralZoom" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetDoIntegralZoom" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentSetDoIntegralZoom" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageDocumentSetDoIntegralZoom((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetDrawMarginsInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSetDrawMarginsInPageMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetDrawMarginsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetDrawMarginsInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentSetDrawMarginsInPageMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)Gatan::DM::ImageDocumentSetDrawMarginsInPageMode((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetDrawPaperInPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSetDrawPaperInPageMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetDrawPaperInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetDrawPaperInPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentSetDrawPaperInPageMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)Gatan::DM::ImageDocumentSetDrawPaperInPageMode((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetFixedWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentSetFixedWindowSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentSetFixedWindowSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentSetFixedWindowSize" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::ImageDocumentSetFixedWindowSize((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetName" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetName" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentSetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ImageDocumentSetName((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetOrientation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetOrientation" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetOrientation" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentSetOrientation" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetOrientation" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Gatan::DM::ImageDocumentSetOrientation((Gatan::DM::ImageDocument const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSetRectInView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:ImageDocumentSetRectInView",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSetRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSetRectInView" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentSetRectInView" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentSetRectInView" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDocumentSetRectInView" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDocumentSetRectInView" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ImageDocumentSetRectInView" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ImageDocumentSetRectInView" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ImageDocumentSetRectInView" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ImageDocumentSetRectInView" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  Gatan::DM::ImageDocumentSetRectInView((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentShow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentShow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentShow" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentShow" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  result = Gatan::DM::ImageDocumentShow((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentShowAtPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageDocumentShowAtPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentShowAtPosition" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentShowAtPosition" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentShowAtPosition" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentShowAtPosition" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::ImageDocumentShowAtPosition((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentShowAtRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ImageDocumentShowAtRect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentShowAtRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentShowAtRect" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageDocumentShowAtRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageDocumentShowAtRect" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageDocumentShowAtRect" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageDocumentShowAtRect" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::ImageDocumentShowAtRect((Gatan::DM::ImageDocument const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSwitchToImageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  Gatan::DM::ImageDisplay *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageDocumentSwitchToImageMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSwitchToImageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSwitchToImageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageDocumentSwitchToImageMode" "', argument " "2"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSwitchToImageMode" "', argument " "2"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp2);
  Gatan::DM::ImageDocumentSwitchToImageMode((Gatan::DM::ImageDocument const &)*arg1,(Gatan::DM::ImageDisplay const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentSwitchToPageMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentSwitchToPageMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentSwitchToPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentSwitchToPageMode" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentSwitchToPageMode((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentUnsetFixedWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentUnsetFixedWindowSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentUnsetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentUnsetFixedWindowSize" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentUnsetFixedWindowSize((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageDocumentUpdateDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDocument *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageDocumentUpdateDisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageDocumentUpdateDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageDocumentUpdateDisplay" "', argument " "1"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp1);
  Gatan::DM::ImageDocumentUpdateDisplay((Gatan::DM::ImageDocument const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDataElementBitSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetDataElementBitSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDataElementBitSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDataElementBitSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetDataElementBitSize((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDataElementByteSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetDataElementByteSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDataElementByteSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDataElementByteSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetDataElementByteSize((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDataSeed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetDataSeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDataSeed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDataSeed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetDataSeed((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetDataType((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDescriptionText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetDescriptionText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDescriptionText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDescriptionText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetDescriptionText((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionCalibration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  Gatan::DM::String *arg5 = 0 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ImageGetDimensionCalibration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionCalibration" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionCalibration" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetDimensionCalibration" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageGetDimensionCalibration" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageGetDimensionCalibration" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageGetDimensionCalibration" "', argument " "5"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionCalibration" "', argument " "5"" of type '" "Gatan::DM::String &""'"); 
  }
  arg5 = reinterpret_cast< Gatan::DM::String * >(argp5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ImageGetDimensionCalibration" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  Gatan::DM::ImageGetDimensionCalibration((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageGetDimensionOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetDimensionOrigin" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (float)Gatan::DM::ImageGetDimensionOrigin((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageGetDimensionScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetDimensionScale" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (float)Gatan::DM::ImageGetDimensionScale((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageGetDimensionSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageGetDimensionSize" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionSize" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::ImageGetDimensionSize((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionUnitInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  long *arg4 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageGetDimensionUnitInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetDimensionUnitInfo" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageGetDimensionUnitInfo" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionUnitInfo" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageGetDimensionUnitInfo" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  Gatan::DM::ImageGetDimensionUnitInfo((Gatan::DM::Image const &)*arg1,arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetDimensionUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageGetDimensionUnitString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetDimensionUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetDimensionUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetDimensionUnitString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageGetDimensionUnitString((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetID((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetImageDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageGetImageDisplay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetImageDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageGetImageDisplay" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ImageGetImageDisplay((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetImageDisplayInImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::ImageDocument *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::ImageDisplay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageGetImageDisplayInImageDocument",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetImageDisplayInImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetImageDisplayInImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ImageDocument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageGetImageDisplayInImageDocument" "', argument " "2"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetImageDisplayInImageDocument" "', argument " "2"" of type '" "Gatan::DM::ImageDocument const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ImageDocument * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageGetImageDisplayInImageDocument" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::ImageGetImageDisplayInImageDocument((Gatan::DM::Image const &)*arg1,(Gatan::DM::ImageDocument const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDisplay(static_cast< const Gatan::DM::ImageDisplay& >(result))), SWIGTYPE_p_Gatan__DM__ImageDisplay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetIntensityOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetIntensityOrigin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetIntensityOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetIntensityOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::ImageGetIntensityOrigin((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetIntensityScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetIntensityScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetIntensityScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetIntensityScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::ImageGetIntensityScale((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetIntensityUnitInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageGetIntensityUnitInfo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetIntensityUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetIntensityUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageGetIntensityUnitInfo" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetIntensityUnitInfo" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageGetIntensityUnitInfo" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::ImageGetIntensityUnitInfo((Gatan::DM::Image const &)*arg1,*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetIntensityUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetIntensityUnitString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetIntensityUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetIntensityUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetIntensityUnitString((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetLabel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetLabel((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetName((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetNumDimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetNumDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetNumDimensions" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetNumDimensions" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetNumDimensions((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetOrCreateImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetOrCreateImageDocument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetOrCreateImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetOrCreateImageDocument" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetOrCreateImageDocument((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetActiveSubArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ImageSetActiveSubArea",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetActiveSubArea" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetActiveSubArea" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetActiveSubArea" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetActiveSubArea" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageSetActiveSubArea" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ImageSetActiveSubArea" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ImageSetActiveSubArea" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  Gatan::DM::ImageSetActiveSubArea((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetTagGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetTagGroup" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetTagGroup((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageGetUniqueID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ScriptObject result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageGetUniqueID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageGetUniqueID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageGetUniqueID" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ImageGetUniqueID((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ScriptObject(static_cast< const Gatan::DM::ScriptObject& >(result))), SWIGTYPE_p_Gatan__DM__ScriptObject, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeBinary(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeBinary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeBinary" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeBinary" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeBinary((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeComplex((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeFloat((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeInteger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeInteger((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypePackedComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypePackedComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypePackedComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypePackedComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypePackedComplex((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeReal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeReal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeReal" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeReal" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeReal((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeRGB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeRGB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeRGB" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeRGB" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeRGB((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeSignedInteger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeSignedInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeSignedInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeSignedInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeSignedInteger((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDataTypeUnsignedInteger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsDataTypeUnsignedInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDataTypeUnsignedInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDataTypeUnsignedInteger" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsDataTypeUnsignedInteger((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsDimensionCalibrationDisplayed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageIsDimensionCalibrationDisplayed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsDimensionCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDimensionCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageIsDimensionCalibrationDisplayed" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsDimensionCalibrationDisplayed" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Gatan::DM::ImageIsDimensionCalibrationDisplayed((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsIntensityCalibrationDisplayed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsIntensityCalibrationDisplayed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsIntensityCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsIntensityCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsIntensityCalibrationDisplayed((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageIsValid" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageIsValid" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::ImageIsValid((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageOp_ScalarCombine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 arg1 ;
  Gatan::DM::Image *arg2 = 0 ;
  double arg3 ;
  Gatan::DM::Image *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageOp_ScalarCombine",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageOp_ScalarCombine" "', argument " "1"" of type '" "uint32""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageOp_ScalarCombine" "', argument " "1"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageOp_ScalarCombine" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageOp_ScalarCombine" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageOp_ScalarCombine" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageOp_ScalarCombine" "', argument " "4"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageOp_ScalarCombine" "', argument " "4"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  Gatan::DM::ImageOp_ScalarCombine(arg1,(Gatan::DM::Image const &)*arg2,arg3,(Gatan::DM::Image const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageOp_ScalarCombineAssign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 arg1 ;
  double arg2 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageOp_ScalarCombineAssign",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageOp_ScalarCombineAssign" "', argument " "1"" of type '" "uint32""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageOp_ScalarCombineAssign" "', argument " "1"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageOp_ScalarCombineAssign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageOp_ScalarCombineAssign" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageOp_ScalarCombineAssign" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::ImageOp_ScalarCombineAssign(arg1,arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDescriptionText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetDescriptionText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDescriptionText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDescriptionText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageSetDescriptionText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDescriptionText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ImageSetDescriptionText((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionCalibration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  Gatan::DM::String *arg5 = 0 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ImageSetDimensionCalibration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionCalibration" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionCalibration" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetDimensionCalibration" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetDimensionCalibration" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageSetDimensionCalibration" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImageSetDimensionCalibration" "', argument " "5"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionCalibration" "', argument " "5"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg5 = reinterpret_cast< Gatan::DM::String * >(argp5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ImageSetDimensionCalibration" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  Gatan::DM::ImageSetDimensionCalibration((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,(Gatan::DM::String const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionCalibrationDisplayed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  ulong arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageSetDimensionCalibrationDisplayed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageSetDimensionCalibrationDisplayed" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionCalibrationDisplayed" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetDimensionCalibrationDisplayed" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::ImageSetDimensionCalibrationDisplayed((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageSetDimensionOrigin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetDimensionOrigin" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetDimensionOrigin" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ImageSetDimensionOrigin((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageSetDimensionScale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetDimensionScale" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetDimensionScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ImageSetDimensionScale((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionUnitInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageSetDimensionUnitInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetDimensionUnitInfo" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageSetDimensionUnitInfo" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionUnitInfo" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ImageSetDimensionUnitInfo" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  Gatan::DM::ImageSetDimensionUnitInfo((Gatan::DM::Image const &)*arg1,arg2,(Gatan::DM::String const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetDimensionUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageSetDimensionUnitString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetDimensionUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetDimensionUnitString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageSetDimensionUnitString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetDimensionUnitString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::ImageSetDimensionUnitString((Gatan::DM::Image const &)*arg1,arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetIntensityCalibrationDisplayed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetIntensityCalibrationDisplayed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetIntensityCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityCalibrationDisplayed" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetIntensityCalibrationDisplayed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ImageSetIntensityCalibrationDisplayed((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetIntensityOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetIntensityOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetIntensityOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetIntensityOrigin" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::ImageSetIntensityOrigin((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetIntensityScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetIntensityScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetIntensityScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageSetIntensityScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::ImageSetIntensityScale((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetIntensityUnitInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageSetIntensityUnitInfo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetIntensityUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityUnitInfo" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageSetIntensityUnitInfo" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityUnitInfo" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageSetIntensityUnitInfo" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ImageSetIntensityUnitInfo((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetIntensityUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetIntensityUnitString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetIntensityUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageSetIntensityUnitString" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetIntensityUnitString" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ImageSetIntensityUnitString((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageSetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageSetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageSetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageSetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageSetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ImageSetName((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageWindowGetImageDocument(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ImageDocument result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageWindowGetImageDocument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageWindowGetImageDocument" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageWindowGetImageDocument" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = Gatan::DM::ImageWindowGetImageDocument((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ImageDocument(static_cast< const Gatan::DM::ImageDocument& >(result))), SWIGTYPE_p_Gatan__DM__ImageDocument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstallScriptLibraryFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InstallScriptLibraryFile",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstallScriptLibraryFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (float)Gatan::DM::InstallScriptLibraryFile((char const *)arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:IntegerImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegerImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegerImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegerImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IntegerImage" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IntegerImage" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  result = Gatan::DM::IntegerImage((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IntegerImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegerImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegerImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegerImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IntegerImage" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  result = Gatan::DM::IntegerImage((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerImage__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IntegerImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegerImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegerImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegerImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::IntegerImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerImage__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  bool arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegerImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegerImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegerImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::IntegerImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegerImage__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IntegerImage__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IntegerImage__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_long(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_IntegerImage__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntegerImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::IntegerImage(char const *,long,bool,long,long,long,long)\n"
    "    Gatan::DM::IntegerImage(char const *,long,bool,long,long,long)\n"
    "    Gatan::DM::IntegerImage(char const *,long,bool,long,long)\n"
    "    Gatan::DM::IntegerImage(char const *,long,bool,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Is2DDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Is2DDisplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Is2DDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Is2DDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::Is2DDisplay((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsBinaryDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsBinaryDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsBinaryDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsBinaryDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsBinaryDataType((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsByteImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsByteImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsByteImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsByteImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsByteImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsComplexDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsComplexDataType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsComplexDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsComplexDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IsComplexDataType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::IsComplexDataType((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsComplexImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsComplexImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsComplexImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsComplexImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsComplexImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsDisplayValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsDisplayValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsDisplayValid" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsDisplayValid" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsDisplayValid((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsExceptionUserAbort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":IsExceptionUserAbort")) SWIG_fail;
  result = (bool)Gatan::DM::IsExceptionUserAbort();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsFloatImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsFloatImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsFloatImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsFloatImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsFloatImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsImageComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsImageComplex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsImageComplex" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (bool)Gatan::DM::IsImageComplex(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsImageReal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsImageReal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsImageReal" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (bool)Gatan::DM::IsImageReal(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsImageRGB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsImageRGB",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsImageRGB" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (bool)Gatan::DM::IsImageRGB(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsIntegerDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IsIntegerDataType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsIntegerDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsIntegerDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IsIntegerDataType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IsIntegerDataType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)Gatan::DM::IsIntegerDataType((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsLongImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsLongImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsLongImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsLongImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsLongImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsPackedComplexImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsPackedComplexImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsPackedComplexImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsPackedComplexImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsPackedComplexImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsRealDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsRealDataType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsRealDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsRealDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IsRealDataType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::IsRealDataType((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsRGBDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsRGBDataType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsRGBDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsRGBDataType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IsRGBDataType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::IsRGBDataType((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsShortImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsShortImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsShortImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsShortImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (bool)Gatan::DM::IsShortImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeepImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeepImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::KeepImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayCountSlices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayCountSlices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayCountSlices" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayCountSlices" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (long)Gatan::DM::LinePlotImageDisplayCountSlices((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetBaseIntensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayGetBaseIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetBaseIntensity" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetBaseIntensity" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (double)Gatan::DM::LinePlotImageDisplayGetBaseIntensity((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetContrastLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplayGetContrastLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplayGetContrastLimits" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetContrastLimits" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::LinePlotImageDisplayGetContrastLimits((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetDisplayedChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplayGetDisplayedChannels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetDisplayedChannels" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetDisplayedChannels" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplayGetDisplayedChannels" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetDisplayedChannels" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::LinePlotImageDisplayGetDisplayedChannels((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetDoAutoSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplayGetDoAutoSurvey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplayGetDoAutoSurvey" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetDoAutoSurvey" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  Gatan::DM::LinePlotImageDisplayGetDoAutoSurvey((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetImageToGroupTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  Gatan::DM::ScriptObject *arg2 = 0 ;
  Gatan::DM::ScriptObject *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:LinePlotImageDisplayGetImageToGroupTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "2"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "2"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "3"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "3"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "LinePlotImageDisplayGetImageToGroupTransform" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  Gatan::DM::LinePlotImageDisplayGetImageToGroupTransform((Gatan::DM::LinePlotImageDisplay const &)*arg1,(Gatan::DM::ScriptObject const &)*arg2,(Gatan::DM::ScriptObject const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSlice(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayGetSlice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSlice" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSlice" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (long)Gatan::DM::LinePlotImageDisplayGetSlice((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSliceComponentColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:LinePlotImageDisplayGetSliceComponentColor",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LinePlotImageDisplayGetSliceComponentColor" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  Gatan::DM::LinePlotImageDisplayGetSliceComponentColor((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSliceDrawingStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplayGetSliceDrawingStyle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSliceDrawingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSliceDrawingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplayGetSliceDrawingStyle" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::LinePlotImageDisplayGetSliceDrawingStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetTrackingStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  uint16 *arg2 = (uint16 *) 0 ;
  uint16 *arg3 = (uint16 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplayGetTrackingStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetTrackingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetTrackingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplayGetTrackingStyle" "', argument " "2"" of type '" "uint16 *""'"); 
  }
  arg2 = reinterpret_cast< uint16 * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetTrackingStyle" "', argument " "3"" of type '" "uint16 *""'"); 
  }
  arg3 = reinterpret_cast< uint16 * >(argp3);
  Gatan::DM::LinePlotImageDisplayGetTrackingStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSliceTransparency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  bool *arg3 = (bool *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LinePlotImageDisplayGetSliceTransparency",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSliceTransparency" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSliceTransparency" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplayGetSliceTransparency" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetSliceTransparency" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinePlotImageDisplayGetSliceTransparency" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  Gatan::DM::LinePlotImageDisplayGetSliceTransparency((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSliceTransparencyStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  uint32 *arg3 = (uint32 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplayGetSliceTransparencyStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSliceTransparencyStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSliceTransparencyStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplayGetSliceTransparencyStyle" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint32, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplayGetSliceTransparencyStyle" "', argument " "3"" of type '" "uint32 *""'"); 
  }
  arg3 = reinterpret_cast< uint32 * >(argp3);
  Gatan::DM::LinePlotImageDisplayGetSliceTransparencyStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayGetSliceLineThickness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplayGetSliceLineThickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayGetSliceLineThickness" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayGetSliceLineThickness" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplayGetSliceLineThickness" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::LinePlotImageDisplayGetSliceLineThickness((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayIsBackgroundOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayIsBackgroundOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayIsBackgroundOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayIsBackgroundOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (bool)Gatan::DM::LinePlotImageDisplayIsBackgroundOn((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayIsFilled(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayIsFilled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayIsFilled" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayIsFilled" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (bool)Gatan::DM::LinePlotImageDisplayIsFilled((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayIsFrameOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayIsFrameOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayIsFrameOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayIsFrameOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (bool)Gatan::DM::LinePlotImageDisplayIsFrameOn((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplayIsGridOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinePlotImageDisplayIsGridOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplayIsGridOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplayIsGridOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  result = (bool)Gatan::DM::LinePlotImageDisplayIsGridOn((Gatan::DM::LinePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetBackgroundOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetBackgroundOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetBackgroundOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetBackgroundOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetBackgroundOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::LinePlotImageDisplaySetBackgroundOn((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetBaseIntensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetBaseIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetBaseIntensity" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetBaseIntensity" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetBaseIntensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  Gatan::DM::LinePlotImageDisplaySetBaseIntensity((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetContrastLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetContrastLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetContrastLimits" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetContrastLimits" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetContrastLimits" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::LinePlotImageDisplaySetContrastLimits((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetDisplayedChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetDisplayedChannels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetDisplayedChannels" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetDisplayedChannels" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetDisplayedChannels" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetDisplayedChannels" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::LinePlotImageDisplaySetDisplayedChannels((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetDoAutoSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetDoAutoSurvey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetDoAutoSurvey" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetDoAutoSurvey" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetDoAutoSurvey" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::LinePlotImageDisplaySetDoAutoSurvey((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetFilled(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetFilled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetFilled" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetFilled" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetFilled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::LinePlotImageDisplaySetFilled((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetFrameOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetFrameOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetFrameOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetFrameOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetFrameOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::LinePlotImageDisplaySetFrameOn((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetGridOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetGridOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetGridOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetGridOn" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetGridOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::LinePlotImageDisplaySetGridOn((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetImageToGroupTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  Gatan::DM::ScriptObject *arg2 = 0 ;
  Gatan::DM::ScriptObject *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:LinePlotImageDisplaySetImageToGroupTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "2"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "2"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "3"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "3"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "LinePlotImageDisplaySetImageToGroupTransform" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  Gatan::DM::LinePlotImageDisplaySetImageToGroupTransform((Gatan::DM::LinePlotImageDisplay const &)*arg1,(Gatan::DM::ScriptObject const &)*arg2,(Gatan::DM::ScriptObject const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetLegendShown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetLegendShown",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetLegendShown" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetLegendShown" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetLegendShown" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::LinePlotImageDisplaySetLegendShown((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSlice(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinePlotImageDisplaySetSlice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSlice" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSlice" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetSlice" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::LinePlotImageDisplaySetSlice((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSliceComponentColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:LinePlotImageDisplaySetSliceComponentColor",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "LinePlotImageDisplaySetSliceComponentColor" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  Gatan::DM::LinePlotImageDisplaySetSliceComponentColor((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSliceDrawingStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetSliceDrawingStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSliceDrawingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceDrawingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetSliceDrawingStyle" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetSliceDrawingStyle" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::LinePlotImageDisplaySetSliceDrawingStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSliceTransparency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LinePlotImageDisplaySetSliceTransparency",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSliceTransparency" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceTransparency" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetSliceTransparency" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetSliceTransparency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LinePlotImageDisplaySetSliceTransparency" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Gatan::DM::LinePlotImageDisplaySetSliceTransparency((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSliceTransparencyStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetSliceTransparencyStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceTransparencyStyle" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::LinePlotImageDisplaySetSliceTransparencyStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetSliceLineThickness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetSliceLineThickness",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetSliceLineThickness" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetSliceLineThickness" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinePlotImageDisplaySetSliceLineThickness" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinePlotImageDisplaySetSliceLineThickness" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::LinePlotImageDisplaySetSliceLineThickness((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinePlotImageDisplaySetTrackingStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::LinePlotImageDisplay *arg1 = 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinePlotImageDisplaySetTrackingStyle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__LinePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "1"" of type '" "Gatan::DM::LinePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::LinePlotImageDisplay * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "2"" of type '" "uint16""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "2"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinePlotImageDisplaySetTrackingStyle" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::LinePlotImageDisplaySetTrackingStyle((Gatan::DM::LinePlotImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUDecomposition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LUDecomposition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUDecomposition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LUDecomposition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LUDecomposition" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LUDecomposition" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::LUDecomposition((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaintainStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MaintainStatus")) SWIG_fail;
  Gatan::DM::MaintainStatus();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixDeterminant(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixDeterminant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDeterminant" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixDeterminant" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::MatrixDeterminant((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixInverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixInverse" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixInverse" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MatrixInverse((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixMultiply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixMultiply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixMultiply" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixMultiply" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixMultiply" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixMultiply" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::MatrixMultiply((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixPrint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixPrint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixPrint" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPrint" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::MatrixPrint((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTranspose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTranspose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTranspose" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixTranspose" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MatrixTranspose((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MedianFilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MedianFilter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MedianFilter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MedianFilter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MedianFilter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MedianFilter" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::MedianFilter((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModelessDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ModelessDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelessDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelessDialog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModelessDialog" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ModelessDialog((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModelessFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ModelessFFT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelessFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelessFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModelessFFT" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ModelessFFT((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPClose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MPClose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPClose" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPClose" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MPClose" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::MPClose((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPDilate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MPDilate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPDilate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPDilate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MPDilate" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::MPDilate((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPDistanceMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MPDistanceMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MPDistanceMap((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPErode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MPErode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPErode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPErode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MPErode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::MPErode((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPEuclideanDistanceMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MPEuclideanDistanceMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPEuclideanDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPEuclideanDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MPEuclideanDistanceMap((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPExactDistanceMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MPExactDistanceMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPExactDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPExactDistanceMap" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MPExactDistanceMap((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPOpen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MPOpen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPOpen" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPOpen" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MPOpen" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::MPOpen((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MPOutline(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MPOutline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MPOutline" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MPOutline" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::MPOutline((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiplyFloatByFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiplyFloatByFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiplyFloatByFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiplyFloatByFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiplyFloatByFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiplyFloatByFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::MultiplyFloatByFloat((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiplyPackedByFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiplyPackedByFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiplyPackedByFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiplyPackedByFloat" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiplyPackedByFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiplyPackedByFloat" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::MultiplyPackedByFloat((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiplyPackedByScalar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiplyPackedByScalar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiplyPackedByScalar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiplyPackedByScalar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiplyPackedByScalar" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::MultiplyPackedByScalar((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewArrowAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewArrowAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewArrowAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewArrowAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewArrowAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewArrowAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewArrowAnnotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewBoxAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewBoxAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewBoxAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewBoxAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewBoxAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewBoxAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewBoxAnnotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewComponent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  long val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NewComponent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewComponent" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewComponent" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewComponent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewComponent" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewComponent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = Gatan::DM::NewComponent(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewDoubleArrowAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewDoubleArrowAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewDoubleArrowAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewDoubleArrowAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewDoubleArrowAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewDoubleArrowAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewDoubleArrowAnnotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewGroupAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewGroupAnnotation")) SWIG_fail;
  result = Gatan::DM::NewGroupAnnotation();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewImageFromFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewImageFromFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewImageFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewImageFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::NewImageFromFile((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewLineAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewLineAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewLineAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewLineAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewLineAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewLineAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewLineAnnotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewLiveFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NewLiveFFT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewLiveFFT" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewLiveFFT" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NewLiveFFT" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewLiveFFT" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewLiveFFT" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = Gatan::DM::NewLiveFFT((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewLiveHistogram(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  Gatan::DM::ROI *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NewLiveHistogram",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewLiveHistogram" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewLiveHistogram" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NewLiveHistogram" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewLiveHistogram" "', argument " "2"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::ROI * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewLiveHistogram" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::NewLiveHistogram((Gatan::DM::ImageDisplay const &)*arg1,(Gatan::DM::ROI const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewLiveProfile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:NewLiveProfile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewLiveProfile" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewLiveProfile" "', argument " "1"" of type '" "Gatan::DM::ImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewLiveProfile" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewLiveProfile" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewLiveProfile" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewLiveProfile" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NewLiveProfile" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = Gatan::DM::NewLiveProfile((Gatan::DM::ImageDisplay const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewOvalAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewOvalAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewOvalAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewOvalAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewOvalAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewOvalAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewOvalAnnotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewPictureAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  long arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NewPictureAnnotation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewPictureAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewPictureAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewPictureAnnotation" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewPictureAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewPictureAnnotation" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::NewPictureAnnotation(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewROI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewROI")) SWIG_fail;
  result = Gatan::DM::NewROI();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NewScriptWindow",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewScriptWindow" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindow" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewScriptWindow" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewScriptWindow" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewScriptWindow" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewScriptWindow" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::NewScriptWindow((Gatan::DM::String const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindowFromFile__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NewScriptWindowFromFile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewScriptWindowFromFile" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NewScriptWindowFromFile" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewScriptWindowFromFile" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewScriptWindowFromFile" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::NewScriptWindowFromFile((Gatan::DM::String const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindowFromFile__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewScriptWindowFromFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::NewScriptWindowFromFile((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindowFromFile__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  ulong arg3 ;
  ulong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewScriptWindowFromFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NewScriptWindowFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NewScriptWindowFromFile" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NewScriptWindowFromFile" "', argument " "4"" of type '" "ulong""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "4"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = Gatan::DM::NewScriptWindowFromFile((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindowFromFile__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  ulong arg3 ;
  ulong arg4 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  long arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  long val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:NewScriptWindowFromFile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NewScriptWindowFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NewScriptWindowFromFile" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NewScriptWindowFromFile" "', argument " "4"" of type '" "ulong""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewScriptWindowFromFile" "', argument " "4"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NewScriptWindowFromFile" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "NewScriptWindowFromFile" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "NewScriptWindowFromFile" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  ecode8 = SWIG_AsVal_long(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "NewScriptWindowFromFile" "', argument " "8"" of type '" "long""'");
  } 
  arg8 = static_cast< long >(val8);
  result = Gatan::DM::NewScriptWindowFromFile((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewScriptWindowFromFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NewScriptWindowFromFile__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ulong, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ulong, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NewScriptWindowFromFile__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NewScriptWindowFromFile__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ulong, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ulong, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_long(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_long(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_NewScriptWindowFromFile__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NewScriptWindowFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::NewScriptWindowFromFile(Gatan::DM::String const &,long,long,long,long)\n"
    "    Gatan::DM::NewScriptWindowFromFile(Gatan::DM::String const &)\n"
    "    Gatan::DM::NewScriptWindowFromFile(Gatan::DM::String const &,Gatan::DM::String const &,ulong,ulong)\n"
    "    Gatan::DM::NewScriptWindowFromFile(Gatan::DM::String const &,Gatan::DM::String const &,ulong,ulong,long,long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NewSemaphore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewSemaphore")) SWIG_fail;
  result = (long)Gatan::DM::NewSemaphore();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewTagGroup")) SWIG_fail;
  result = Gatan::DM::NewTagGroup();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewTagList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewTagList")) SWIG_fail;
  result = Gatan::DM::NewTagList();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewTextAnnotation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NewTextAnnotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewTextAnnotation" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewTextAnnotation" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NewTextAnnotation" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewTextAnnotation" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NewTextAnnotation" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Gatan::DM::NewTextAnnotation(arg1,arg2,(Gatan::DM::String const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Component(static_cast< const Gatan::DM::Component& >(result))), SWIGTYPE_p_Gatan__DM__Component, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NextImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NextImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NextImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NextImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::NextImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OkCancelDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OkCancelDialog",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OkCancelDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (bool)Gatan::DM::OkCancelDialog((char const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OkDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OkDialog",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OkDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Gatan::DM::OkDialog((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenAndSetProgressWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OpenAndSetProgressWindow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenAndSetProgressWindow" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenAndSetProgressWindow" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpenAndSetProgressWindow" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Gatan::DM::OpenAndSetProgressWindow((char const *)arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenDialog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDialog" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDialog" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::OpenDialog(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenFileForReading(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DM_FileReference result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenFileForReading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenFileForReading" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenFileForReading" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::OpenFileForReading((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new DM_FileReference(static_cast< const DM_FileReference& >(result))), SWIGTYPE_p_DM_FileReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenFileForReadingAndWriting(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DM_FileReference result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenFileForReadingAndWriting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenFileForReadingAndWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenFileForReadingAndWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::OpenFileForReadingAndWriting((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new DM_FileReference(static_cast< const DM_FileReference& >(result))), SWIGTYPE_p_DM_FileReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenFileForWriting(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DM_FileReference result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenFileForWriting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenFileForWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenFileForWriting" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::OpenFileForWriting((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new DM_FileReference(static_cast< const DM_FileReference& >(result))), SWIGTYPE_p_DM_FileReference, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::OpenImage((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenResultsWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":OpenResultsWindow")) SWIG_fail;
  Gatan::DM::OpenResultsWindow();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenTimeBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OpenTimeBar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenTimeBar" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenTimeBar" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::OpenTimeBar((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptionDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":OptionDown")) SWIG_fail;
  result = (bool)Gatan::DM::OptionDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PackedFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PackedFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PackedFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PackedFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::PackedFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PackedIFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PackedIFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PackedIFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PackedIFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::PackedIFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PackedLnModulusToImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PackedLnModulusToImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PackedLnModulusToImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PackedLnModulusToImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PackedLnModulusToImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PackedLnModulusToImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PackedLnModulusToImage" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PackedLnModulusToImage" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PackedLnModulusToImage" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::PackedLnModulusToImage((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PackedToComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PackedToComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PackedToComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PackedToComplex" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::PackedToComplex((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathAddParentIndirection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathAddParentIndirection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathAddParentIndirection" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathAddParentIndirection" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::PathAddParentIndirection((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathBeginRelative(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)":PathBeginRelative")) SWIG_fail;
  result = Gatan::DM::PathBeginRelative();
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathConcatenate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathConcatenate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathConcatenate" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathConcatenate" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathConcatenate" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathConcatenate" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = Gatan::DM::PathConcatenate((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathExtractBaseName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathExtractBaseName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathExtractBaseName" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractBaseName" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathExtractBaseName" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractBaseName" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::PathExtractBaseName((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathExtractDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathExtractDirectory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathExtractDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathExtractDirectory" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractDirectory" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::PathExtractDirectory((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathExtractExtension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathExtractExtension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathExtractExtension" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractExtension" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathExtractExtension" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractExtension" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::PathExtractExtension((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathExtractFileName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathExtractFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathExtractFileName" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractFileName" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathExtractFileName" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractFileName" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::PathExtractFileName((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathExtractParentDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathExtractParentDirectory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathExtractParentDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractParentDirectory" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathExtractParentDirectory" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathExtractParentDirectory" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::PathExtractParentDirectory((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathGetFullpath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathGetFullpath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathGetFullpath" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathGetFullpath" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = Gatan::DM::PathGetFullpath((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsSpecifySameFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathsSpecifySameFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsSpecifySameFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathsSpecifySameFile" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathsSpecifySameFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathsSpecifySameFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (bool)Gatan::DM::PathsSpecifySameFile((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":Pi")) SWIG_fail;
  result = (double)Gatan::DM::Pi();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PictureAnnotationSetPicture(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PictureAnnotationSetPicture",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PictureAnnotationSetPicture" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PictureAnnotationSetPicture" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PictureAnnotationSetPicture" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::PictureAnnotationSetPicture((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PIctureGetBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PIctureGetBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PIctureGetBounds" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PIctureGetBounds" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PIctureGetBounds" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PIctureGetBounds" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PIctureGetBounds" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::PIctureGetBounds(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrintImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrintImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrintImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PrintImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::PrintImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterImageDisplayAddThresholdToMask(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RasterImageDisplayAddThresholdToMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RasterImageDisplayAddThresholdToMask" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::RasterImageDisplayAddThresholdToMask((Gatan::DM::RasterImageDisplay const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterImageDisplayGetThresholdLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterImageDisplayGetThresholdLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterImageDisplayGetThresholdLimits" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplayGetThresholdLimits" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterImageDisplayGetThresholdLimits" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RasterImageDisplayGetThresholdLimits" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::RasterImageDisplayGetThresholdLimits((Gatan::DM::RasterImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterImageDisplayIsThresholdOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RasterImageDisplayIsThresholdOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterImageDisplayIsThresholdOn" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplayIsThresholdOn" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
  result = (bool)Gatan::DM::RasterImageDisplayIsThresholdOn((Gatan::DM::RasterImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterImageDisplaySetThresholdLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RasterImageDisplaySetThresholdLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterImageDisplaySetThresholdLimits" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplaySetThresholdLimits" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterImageDisplaySetThresholdLimits" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterImageDisplaySetThresholdLimits" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::RasterImageDisplaySetThresholdLimits((Gatan::DM::RasterImageDisplay const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterImageDisplaySetThresholdOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::RasterImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterImageDisplaySetThresholdOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__RasterImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterImageDisplaySetThresholdOn" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterImageDisplaySetThresholdOn" "', argument " "1"" of type '" "Gatan::DM::RasterImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::RasterImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterImageDisplaySetThresholdOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::RasterImageDisplaySetThresholdOn((Gatan::DM::RasterImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RasterizeRGB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RasterizeRGB",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterizeRGB" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RasterizeRGB" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterizeRGB" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Gatan::DM::RasterizeRGB((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RawCopyImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RawCopyImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RawCopyImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RawCopyImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RawCopyImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RawCopyImage" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::RawCopyImage((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DM_FileReference arg1 ;
  long arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadFile",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_DM_FileReference,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFile" "', argument " "1"" of type '" "DM_FileReference""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFile" "', argument " "1"" of type '" "DM_FileReference""'");
    } else {
      DM_FileReference * temp = reinterpret_cast< DM_FileReference * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadFile" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::ReadFile(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadFileLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DM_FileReference arg1 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadFileLine",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_DM_FileReference,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFileLine" "', argument " "1"" of type '" "DM_FileReference""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFileLine" "', argument " "1"" of type '" "DM_FileReference""'");
    } else {
      DM_FileReference * temp = reinterpret_cast< DM_FileReference * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadFileLine" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFileLine" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (bool)Gatan::DM::ReadFileLine(arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadRawStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ReadRawStream",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReadRawStream" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadRawStream" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ReadRawStream" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ReadRawStream(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RealFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::RealFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealIFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RealIFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealIFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealIFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::RealIFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RealImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RealImage" "', argument " "5"" of type '" "uint32""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "5"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RealImage" "', argument " "6"" of type '" "uint32""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "6"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = Gatan::DM::RealImage((Gatan::DM::String const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RealImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RealImage" "', argument " "5"" of type '" "uint32""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "5"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = Gatan::DM::RealImage((Gatan::DM::String const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealImage__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RealImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "4"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = Gatan::DM::RealImage((Gatan::DM::String const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealImage__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RealImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "2"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RealImage" "', argument " "3"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = Gatan::DM::RealImage((Gatan::DM::String const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RealImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_uint32, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_uint32, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RealImage__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_uint32, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_uint32, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_uint32, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RealImage__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_uint32, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_uint32, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_uint32, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_uint32, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_RealImage__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_uint32, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_uint32, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_uint32, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_uint32, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_uint32, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_RealImage__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RealImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::RealImage(Gatan::DM::String const &,uint32,uint32,uint32,uint32,uint32)\n"
    "    Gatan::DM::RealImage(Gatan::DM::String const &,uint32,uint32,uint32,uint32)\n"
    "    Gatan::DM::RealImage(Gatan::DM::String const &,uint32,uint32,uint32)\n"
    "    Gatan::DM::RealImage(Gatan::DM::String const &,uint32,uint32)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Reduce(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Reduce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reduce" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reduce" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::Reduce((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReducedFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReducedFFT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReducedFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReducedFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = Gatan::DM::ReducedFFT((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageUtilities_MeanAndVariance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageUtilities_MeanAndVariance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageUtilities_MeanAndVariance" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageUtilities_MeanAndVariance" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageUtilities_MeanAndVariance" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageUtilities_MeanAndVariance" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageUtilities_MeanAndVariance" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageUtilities_MeanAndVariance" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageUtilities_MeanAndVariance" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageUtilities_MeanAndVariance" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (double)Gatan::DM::ImageUtilities_MeanAndVariance((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterCustomMenu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegisterCustomMenu",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RegisterCustomMenu" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long)Gatan::DM::RegisterCustomMenu(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStatusBarVisibility(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStatusBarVisibility",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetStatusBarVisibility" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  Gatan::DM::SetStatusBarVisibility(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetShowHideStatusBarMenuItemEnabled(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetShowHideStatusBarMenuItemEnabled",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetShowHideStatusBarMenuItemEnabled" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  Gatan::DM::SetShowHideStatusBarMenuItemEnabled(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateStatusBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  char *arg2 = (char *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UpdateStatusBar",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UpdateStatusBar" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UpdateStatusBar" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::UpdateStatusBar(arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterCustomTool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ULONG_PTR arg1 ;
  char *arg2 = (char *) 0 ;
  ULONG_PTR arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ULONG_PTR result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegisterCustomTool",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ULONG_PTR,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterCustomTool" "', argument " "1"" of type '" "ULONG_PTR""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterCustomTool" "', argument " "1"" of type '" "ULONG_PTR""'");
    } else {
      ULONG_PTR * temp = reinterpret_cast< ULONG_PTR * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterCustomTool" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ULONG_PTR,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterCustomTool" "', argument " "3"" of type '" "ULONG_PTR""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterCustomTool" "', argument " "3"" of type '" "ULONG_PTR""'");
    } else {
      ULONG_PTR * temp = reinterpret_cast< ULONG_PTR * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = Gatan::DM::RegisterCustomTool(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj((new ULONG_PTR(static_cast< const ULONG_PTR& >(result))), SWIGTYPE_p_ULONG_PTR, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterMenuAdjustment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegisterMenuAdjustment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterMenuAdjustment" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterMenuAdjustment" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::RegisterMenuAdjustment((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterObjectListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ulong_ptr_t arg1 ;
  ulong_ptr_t arg2 ;
  ulong_ptr_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ulong_ptr_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegisterObjectListener",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ulong_ptr_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterObjectListener" "', argument " "1"" of type '" "ulong_ptr_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterObjectListener" "', argument " "1"" of type '" "ulong_ptr_t""'");
    } else {
      ulong_ptr_t * temp = reinterpret_cast< ulong_ptr_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong_ptr_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterObjectListener" "', argument " "2"" of type '" "ulong_ptr_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterObjectListener" "', argument " "2"" of type '" "ulong_ptr_t""'");
    } else {
      ulong_ptr_t * temp = reinterpret_cast< ulong_ptr_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong_ptr_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterObjectListener" "', argument " "3"" of type '" "ulong_ptr_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterObjectListener" "', argument " "3"" of type '" "ulong_ptr_t""'");
    } else {
      ulong_ptr_t * temp = reinterpret_cast< ulong_ptr_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = Gatan::DM::RegisterObjectListener(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new ulong_ptr_t(static_cast< const ulong_ptr_t& >(result))), SWIGTYPE_p_ulong_ptr_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterScriptPalette(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegisterScriptPalette",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterScriptPalette" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterScriptPalette" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterScriptPalette" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterScriptPalette" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Gatan::DM::RegisterScriptPalette((Gatan::DM::ScriptObject const &)*arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterSystemIdle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SystemIdleProc arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegisterSystemIdle",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SystemIdleProc,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterSystemIdle" "', argument " "1"" of type '" "SystemIdleProc""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterSystemIdle" "', argument " "1"" of type '" "SystemIdleProc""'");
    } else {
      SystemIdleProc * temp = reinterpret_cast< SystemIdleProc * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  Gatan::DM::RegisterSystemIdle(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReleaseDataPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReleaseDataPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReleaseDataPtr" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReleaseDataPtr" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ReleaseDataPtr((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReleaseSemaphore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReleaseSemaphore",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReleaseSemaphore" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::ReleaseSemaphore(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoveCustomTool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RemoveCustomTool",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RemoveCustomTool" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::RemoveCustomTool(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RevertToDefaultTool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RevertToDefaultTool")) SWIG_fail;
  Gatan::DM::RevertToDefaultTool();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoveFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RemoveFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoveFunction" "', argument " "1"" of type '" "void *""'"); 
  }
  Gatan::DM::RemoveFunction(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemovePathFromCopyToImageList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RemovePathFromCopyToImageList",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemovePathFromCopyToImageList" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  Gatan::DM::RemovePathFromCopyToImageList((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoveScriptFromMenu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RemoveScriptFromMenu",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoveScriptFromMenu" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RemoveScriptFromMenu" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RemoveScriptFromMenu" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  Gatan::DM::RemoveScriptFromMenu((char const *)arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResetContrastLimitsAlways(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResetContrastLimitsAlways",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResetContrastLimitsAlways" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResetContrastLimitsAlways" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ResetContrastLimitsAlways((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Result(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Result",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Result" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Result" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::Result((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Debug(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Debug",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Debug" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Debug" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  Gatan::DM::Debug((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLogDirectory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetLogDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLogDirectory" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLogDirectory" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (bool)Gatan::DM::GetLogDirectory(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLogFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetLogFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLogFilename" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLogFilename" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (bool)Gatan::DM::GetLogFilename(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CopyLogFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CopyLogFile",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CopyLogFile" "', argument " "1"" of type '" "uint32""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CopyLogFile" "', argument " "1"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (bool)Gatan::DM::CopyLogFile(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetCopyLogFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetCopyLogFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetCopyLogFilename" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetCopyLogFilename" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (bool)Gatan::DM::GetCopyLogFilename(*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlushLogFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":FlushLogFile")) SWIG_fail;
  result = (bool)Gatan::DM::FlushLogFile();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetLogMessageCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetLogMessageCount",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_uint32,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetLogMessageCount" "', argument " "1"" of type '" "uint32""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetLogMessageCount" "', argument " "1"" of type '" "uint32""'");
    } else {
      uint32 * temp = reinterpret_cast< uint32 * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = Gatan::DM::GetLogMessageCount(arg1);
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RGBImage__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RGBImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RGBImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RGBImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RGBImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RGBImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RGBImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RGBImage" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  result = Gatan::DM::RGBImage((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RGBImage__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RGBImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RGBImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RGBImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RGBImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RGBImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RGBImage" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  result = Gatan::DM::RGBImage((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RGBImage__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RGBImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RGBImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RGBImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RGBImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RGBImage" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = Gatan::DM::RGBImage((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RGBImage__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RGBImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RGBImage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RGBImage" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RGBImage" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = Gatan::DM::RGBImage((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RGBImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RGBImage__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RGBImage__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RGBImage__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_RGBImage__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RGBImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::RGBImage(char const *,long,long,long,long,long)\n"
    "    Gatan::DM::RGBImage(char const *,long,long,long,long)\n"
    "    Gatan::DM::RGBImage(char const *,long,long,long)\n"
    "    Gatan::DM::RGBImage(char const *,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ROIAddToMask(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ROIAddToMask",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIAddToMask" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIAddToMask" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIAddToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIAddToMask" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROIAddToMask" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROIAddToMask" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROIAddToMask" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ROIAddToMask" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::ROIAddToMask((Gatan::DM::ROI const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIAddVertex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROIAddVertex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIAddVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIAddVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROIAddVertex" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROIAddVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ROIAddVertex((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIClearVertices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIClearVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIClearVertices" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIClearVertices" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  Gatan::DM::ROIClearVertices((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIClone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::ROI result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIClone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIClone" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIClone" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = Gatan::DM::ROIClone((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::ROI(static_cast< const Gatan::DM::ROI& >(result))), SWIGTYPE_p_Gatan__DM__ROI, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIContainsPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROIContainsPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIContainsPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIContainsPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROIContainsPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROIContainsPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)Gatan::DM::ROIContainsPoint((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROICountVertices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROICountVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROICountVertices" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROICountVertices" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (long)Gatan::DM::ROICountVertices((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIDeleteVertex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROIDeleteVertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIDeleteVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIDeleteVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROIDeleteVertex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ROIDeleteVertex((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROIGetColor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetColor" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetColor" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ROIGetColor" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  Gatan::DM::ROIGetColor((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetDeletable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetDeletable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetDeletable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetDeletable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIGetDeletable((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetID" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetID" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (long)Gatan::DM::ROIGetID((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = Gatan::DM::ROIGetLabel((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetLabelStripeColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROIGetLabelStripeColor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetLabelStripeColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetLabelStripeColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetLabelStripeColor" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetLabelStripeColor" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ROIGetLabelStripeColor" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  Gatan::DM::ROIGetLabelStripeColor((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ROIGetLine",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetLine" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetLine" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ROIGetLine" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ROIGetLine" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ROIGetLine((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetMoveable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetMoveable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetMoveable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetMoveable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIGetMoveable((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetName" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetName" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = Gatan::DM::ROIGetName((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROIGetPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetPoint" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetPoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ROIGetPoint((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROIGetRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetRange" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetRange" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::ROIGetRange((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetRectangle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ROIGetRectangle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROIGetRectangle" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetRectangle" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ROIGetRectangle" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ROIGetRectangle" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::ROIGetRectangle((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetResizable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetResizable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetResizable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetResizable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIGetResizable((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetVertex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROIGetVertex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROIGetVertex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROIGetVertex" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ROIGetVertex" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  Gatan::DM::ROIGetVertex((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIGetVolatile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIGetVolatile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIGetVolatile" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIGetVolatile" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIGetVolatile((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIInsertVertex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROIInsertVertex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIInsertVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIInsertVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROIInsertVertex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROIInsertVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROIInsertVertex" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::ROIInsertVertex((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsClosed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsClosed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsClosed" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsClosed" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsClosed((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsLine((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsPoint((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsRange((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsRectangle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsRectangle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsRectangle((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROIIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ROIIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROIIsValid" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROIIsValid" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  result = (bool)Gatan::DM::ROIIsValid((Gatan::DM::ROI const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROISetColor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetColor" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetColor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetColor" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetColor" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::ROISetColor((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetDeletable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetDeletable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetDeletable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetDeletable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetDeletable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetDeletable((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetIsClosed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetIsClosed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetIsClosed" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetIsClosed" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetIsClosed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetIsClosed((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROISetLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ROISetLabel((Gatan::DM::ROI const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetBoldLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetBoldLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetBoldLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetBoldLabel" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetBoldLabel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetBoldLabel((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetBorderThickness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetBorderThickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetBorderThickness" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetBorderThickness" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetBorderThickness" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::ROISetBorderThickness((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ROISetLine",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetLine" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetLine" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetLine" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetLine" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROISetLine" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ROISetLine((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetMoveable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetMoveable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetMoveable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetMoveable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetMoveable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetMoveable((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetName" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetName" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROISetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetName" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::ROISetName((Gatan::DM::ROI const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROISetPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetPoint" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ROISetPoint((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ROISetRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRange" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetRange" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetRange" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::ROISetRange((Gatan::DM::ROI const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetRectangle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ROISetRectangle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRectangle" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetRectangle" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetRectangle" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetRectangle" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROISetRectangle" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  Gatan::DM::ROISetRectangle((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetRegionToComplexValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  complex128_t *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ROISetRegionToComplexValue",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetRegionToComplexValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToComplexValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROISetRegionToComplexValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToComplexValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROISetRegionToComplexValue" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToComplexValue" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetRegionToComplexValue" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROISetRegionToComplexValue" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ROISetRegionToComplexValue" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ROISetRegionToComplexValue" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  Gatan::DM::ROISetRegionToComplexValue((Gatan::DM::ROI const &)*arg1,(Gatan::DM::Image const &)*arg2,(complex128_t const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetRegionToRGBValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  rgba_uint8_os_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ROISetRegionToRGBValue",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetRegionToRGBValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToRGBValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROISetRegionToRGBValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToRGBValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_rgba_uint8_os_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ROISetRegionToRGBValue" "', argument " "3"" of type '" "rgba_uint8_os_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToRGBValue" "', argument " "3"" of type '" "rgba_uint8_os_t""'");
    } else {
      rgba_uint8_os_t * temp = reinterpret_cast< rgba_uint8_os_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetRegionToRGBValue" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROISetRegionToRGBValue" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ROISetRegionToRGBValue" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ROISetRegionToRGBValue" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  Gatan::DM::ROISetRegionToRGBValue((Gatan::DM::ROI const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetRegionToValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  double arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ROISetRegionToValue",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetRegionToValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToValue" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ROISetRegionToValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetRegionToValue" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetRegionToValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetRegionToValue" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ROISetRegionToValue" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ROISetRegionToValue" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ROISetRegionToValue" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  Gatan::DM::ROISetRegionToValue((Gatan::DM::ROI const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetResizable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetResizable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetResizable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetResizable" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetResizable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetResizable((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetVertex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ROISetVertex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetVertex" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetVertex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ROISetVertex" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ROISetVertex" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::ROISetVertex((Gatan::DM::ROI const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ROISetVolatile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ROI *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ROISetVolatile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ROI,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ROISetVolatile" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ROISetVolatile" "', argument " "1"" of type '" "Gatan::DM::ROI const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ROI * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ROISetVolatile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::ROISetVolatile((Gatan::DM::ROI const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rotate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rotate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotate" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Gatan::DM::Rotate((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotateLeft(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RotateLeft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotateLeft" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotateLeft" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::RotateLeft((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotateRight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RotateRight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotateRight" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotateRight" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::RotateRight((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Save(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Save",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Save" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Save" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::Save((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SaveAsDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsDialog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SaveAsDialog" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)Gatan::DM::SaveAsDialog((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsGatan",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsGatan" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsGatan" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsGatan((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SaveAsGatan",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsGatan" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsGatan" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveAsGatan" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::SaveAsGatan((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SaveAsGatan__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SaveAsGatan__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SaveAsGatan'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::SaveAsGatan(Gatan::DM::Image const &,Gatan::DM::String const &)\n"
    "    Gatan::DM::SaveAsGatan(Gatan::DM::Image const &,Gatan::DM::String const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan3__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsGatan3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsGatan3" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan3" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsGatan3" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan3" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsGatan3((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan3__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SaveAsGatan3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsGatan3" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan3" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsGatan3" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGatan3" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveAsGatan3" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::SaveAsGatan3((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsGatan3(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SaveAsGatan3__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SaveAsGatan3__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SaveAsGatan3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::SaveAsGatan3(Gatan::DM::Image const &,Gatan::DM::String const &)\n"
    "    Gatan::DM::SaveAsGatan3(Gatan::DM::Image const &,Gatan::DM::String const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SaveAsGIF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsGIF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsGIF" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGIF" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsGIF" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsGIF" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsGIF((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsPCX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsPCX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsPCX" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsPCX" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsPCX" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsPCX" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsPCX((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsPICT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsPICT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsPICT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsPICT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsPICT" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsPICT" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsPICT((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsRawData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsRawData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsRawData" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsRawData" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsRawData" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsRawData" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsRawData((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsSmallHeader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsSmallHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsSmallHeader" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsSmallHeader" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsSmallHeader" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsSmallHeader" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsSmallHeader((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsText" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsText((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsTIFF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsTIFF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsTIFF" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsTIFF" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsTIFF" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsTIFF" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsTIFF((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveImage" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveImage" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveImage((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveAsMSA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveAsMSA",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsMSA" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsMSA" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsMSA" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveAsMSA" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::SaveAsMSA((Gatan::DM::Image const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapClear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScrapClear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapClear" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapClear" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ScrapClear((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapCopy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScrapCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapCopy" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapCopy" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ScrapCopy((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapGetLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScrapGetLocation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapGetLocation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapGetLocation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScrapGetLocation" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScrapGetLocation" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::ScrapGetLocation((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapGetSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScrapGetSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapGetSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapGetSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScrapGetSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScrapGetSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::ScrapGetSize((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapMerge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScrapMerge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapMerge" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapMerge" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ScrapMerge((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapPaste(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScrapPaste",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapPaste" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapPaste" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ScrapPaste((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapPasteNew(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ScrapPasteNew")) SWIG_fail;
  Gatan::DM::ScrapPasteNew();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScrapSetLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScrapSetLocation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScrapSetLocation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScrapSetLocation" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScrapSetLocation" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScrapSetLocation" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::ScrapSetLocation((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenGetBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ScreenGetBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ScreenGetBounds" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenGetBounds" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScreenGetBounds" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ScreenGetBounds" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ScreenGetBounds" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::ScreenGetBounds(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenGetWorkArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ScreenGetWorkArea",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ScreenGetWorkArea" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenGetWorkArea" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScreenGetWorkArea" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ScreenGetWorkArea" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ScreenGetWorkArea" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::ScreenGetWorkArea(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptInterfaceGenerateStubs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScriptInterfaceGenerateStubs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptInterfaceGenerateStubs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScriptInterfaceGenerateStubs" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptInterfaceGenerateStubs" "', argument " "2"" of type '" "Gatan::DM::String &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScriptInterfaceGenerateStubs" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptInterfaceGenerateStubs" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::ScriptInterfaceGenerateStubs((char const *)arg1,*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectGetClassToken(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ulong result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScriptObjectGetClassToken",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObjectGetClassToken" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectGetClassToken" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScriptObjectGetClassToken" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectGetClassToken" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = Gatan::DM::ScriptObjectGetClassToken((Gatan::DM::ScriptObject const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_NewPointerObj((new ulong(static_cast< const ulong& >(result))), SWIGTYPE_p_ulong, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectGetID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScriptObjectGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObjectGetID" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectGetID" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  result = (long)Gatan::DM::ScriptObjectGetID((Gatan::DM::ScriptObject const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScriptObjectIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObjectIsValid" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectIsValid" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  result = (bool)Gatan::DM::ScriptObjectIsValid((Gatan::DM::ScriptObject const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectLookupMethod__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  Gatan::DM::Function *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Function result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScriptObjectLookupMethod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObjectLookupMethod" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectLookupMethod" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScriptObjectLookupMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectLookupMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Function * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScriptObjectLookupMethod" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = Gatan::DM::ScriptObjectLookupMethod((Gatan::DM::ScriptObject const &)*arg1,(Gatan::DM::Function const &)*arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Function(static_cast< const Gatan::DM::Function& >(result))), SWIGTYPE_p_Gatan__DM__Function, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectLookupMethod__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::ScriptObject *arg1 = 0 ;
  Gatan::DM::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Function result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScriptObjectLookupMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__ScriptObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObjectLookupMethod" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectLookupMethod" "', argument " "1"" of type '" "Gatan::DM::ScriptObject const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::ScriptObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Function,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScriptObjectLookupMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptObjectLookupMethod" "', argument " "2"" of type '" "Gatan::DM::Function const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Function * >(argp2);
  result = Gatan::DM::ScriptObjectLookupMethod((Gatan::DM::ScriptObject const &)*arg1,(Gatan::DM::Function const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Function(static_cast< const Gatan::DM::Function& >(result))), SWIGTYPE_p_Gatan__DM__Function, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriptObjectLookupMethod(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ScriptObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScriptObjectLookupMethod__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__ScriptObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScriptObjectLookupMethod__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScriptObjectLookupMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::ScriptObjectLookupMethod(Gatan::DM::ScriptObject const &,Gatan::DM::Function const &,char const *)\n"
    "    Gatan::DM::ScriptObjectLookupMethod(Gatan::DM::ScriptObject const &,Gatan::DM::Function const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScriptWindowExecute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScriptWindowExecute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptWindowExecute" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScriptWindowExecute" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  Gatan::DM::ScriptWindowExecute((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SelectImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetColorMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetColorMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetColorMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetColorMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetColorMode" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  Gatan::DM::SetColorMode((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetComplexMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetComplexMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetComplexMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetComplexMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetComplexMode" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  Gatan::DM::SetComplexMode((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetContrastMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetContrastMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetContrastMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetContrastMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetContrastMode" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  Gatan::DM::SetContrastMode((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetCustomCLUT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetCustomCLUT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetCustomCLUT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetCustomCLUT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetCustomCLUT" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetCustomCLUT" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  Gatan::DM::SetCustomCLUT((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDisplayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDisplayType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDisplayType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDisplayType" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDisplayType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::SetDisplayType((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDoCreateCustomIcon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDoCreateCustomIcon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDoCreateCustomIcon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDoCreateCustomIcon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDoCreateCustomIcon" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::SetDoCreateCustomIcon((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDoSavePreview(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDoSavePreview",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDoSavePreview" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDoSavePreview" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDoSavePreview" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::SetDoSavePreview((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetEstimatedMinMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetEstimatedMinMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetEstimatedMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetEstimatedMinMax" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetEstimatedMinMax" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetEstimatedMinMax" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::SetEstimatedMinMax((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetImagePositionWithinWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetImagePositionWithinWindow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetImagePositionWithinWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetImagePositionWithinWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetImagePositionWithinWindow" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetImagePositionWithinWindow" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::SetImagePositionWithinWindow((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetInversionMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetInversionMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetInversionMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetInversionMode" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetInversionMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::SetInversionMode((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetLimits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetLimits" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetLimits" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetLimits" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetLimits" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::SetLimits((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetMinContrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetMinContrast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetMinContrast" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetMinContrast" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetMinContrast" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::SetMinContrast((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetName" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::SetName((Gatan::DM::Image const &)*arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetOrigin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetOrigin" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetOrigin" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetOrigin" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::SetOrigin((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetPixel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SetPixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetPixel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetPixel" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPixel" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetPixel" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Gatan::DM::SetPixel((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetRawStreamPos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetRawStreamPos",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetRawStreamPos" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetRawStreamPos" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetRawStreamPos" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::SetRawStreamPos(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetScale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetScale" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetScale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetScale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::SetScale((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetSelection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SetSelection",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetSelection" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSelection" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetSelection" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetSelection" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetSelection" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::SetSelection((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetSurvey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSurvey" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::SetSurvey((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetSurveyTechnique(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetSurveyTechnique",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetSurveyTechnique" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSurveyTechnique" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  Gatan::DM::SetSurveyTechnique((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetToZero(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetToZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetToZero" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetToZero" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SetToZero((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetUnitString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetUnitString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetUnitString" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetUnitString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::SetUnitString((Gatan::DM::Image const &)*arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetUsesToZero(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetUsesToZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetUsesToZero" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetUsesToZero" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SetUsesToZero((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWindowBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SetWindowBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWindowBounds" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetWindowBounds" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWindowBounds" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetWindowBounds" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetWindowBounds" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetWindowBounds" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::SetWindowBounds((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWindowPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetWindowPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWindowPosition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetWindowPosition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWindowPosition" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetWindowPosition" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::SetWindowPosition((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWindowSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetWindowSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWindowSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetWindowSize" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWindowSize" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetWindowSize" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::SetWindowSize((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetZoom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetZoom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetZoom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetZoom" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetZoom" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Gatan::DM::SetZoom((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShiftCenter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShiftCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShiftCenter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShiftCenter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ShiftCenter((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShiftDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ShiftDown")) SWIG_fail;
  result = (bool)Gatan::DM::ShiftDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShowAlert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShowAlert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShowAlert" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShowAlert" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShowAlert" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::ShowAlert((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShowWarning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShowWarning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShowWarning" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShowWarning" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShowWarning" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShowWarning" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShowWarning" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (bool)Gatan::DM::ShowWarning((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Sleep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Sleep" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  Gatan::DM::Sleep(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpaceDown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":SpaceDown")) SWIG_fail;
  result = (bool)Gatan::DM::SpaceDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StopAcquisitionDaemon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StopAcquisitionDaemon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StopAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StopAcquisitionDaemon" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::StopAcquisitionDaemon((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StopAllAcquisitionDaemons(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":StopAllAcquisitionDaemons")) SWIG_fail;
  Gatan::DM::StopAllAcquisitionDaemons();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringAppend__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringAppend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringAppend" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringAppend" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringAppend" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringAppend" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = Gatan::DM::StringAppend(*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringAppend__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringAppend",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringAppend" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringAppend" "', argument " "1"" of type '" "Gatan::DM::String &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringAppend" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringAppend" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringAppend" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringAppend" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = Gatan::DM::StringAppend(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringAppend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gatan__DM__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StringAppend__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gatan__DM__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ulong, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ulong, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringAppend__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringAppend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::StringAppend(Gatan::DM::String &,Gatan::DM::String const &)\n"
    "    Gatan::DM::StringAppend(Gatan::DM::String &,ulong,ulong)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringCompare(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringCompare",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringCompare" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringCompare" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringCompare" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringCompare" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (long)Gatan::DM::StringCompare((Gatan::DM::String const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringConvertToEncoding(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringConvertToEncoding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringConvertToEncoding" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringConvertToEncoding" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringConvertToEncoding" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringConvertToEncoding" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = Gatan::DM::StringConvertToEncoding((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringIsValid" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringIsValid" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  result = (bool)Gatan::DM::StringIsValid((Gatan::DM::String const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubtractMeanPacked(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubtractMeanPacked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubtractMeanPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubtractMeanPacked" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SubtractMeanPacked((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubtractMultiply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubtractMultiply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubtractMultiply" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubtractMultiply" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubtractMultiply" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubtractMultiply" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SubtractMultiply" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubtractMultiply" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::SubtractMultiply((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurfacePlotImageDisplayGetCubeAxes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::SurfacePlotImageDisplay *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SurfacePlotImageDisplayGetCubeAxes",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::SurfacePlotImageDisplay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SurfacePlotImageDisplayGetCubeAxes" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  Gatan::DM::SurfacePlotImageDisplayGetCubeAxes((Gatan::DM::SurfacePlotImageDisplay const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurfacePlotImageDisplayGetCubePoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::SurfacePlotImageDisplay *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SurfacePlotImageDisplayGetCubePoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurfacePlotImageDisplayGetCubePoint" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurfacePlotImageDisplayGetCubePoint" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::SurfacePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SurfacePlotImageDisplayGetCubePoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SurfacePlotImageDisplayGetCubePoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SurfacePlotImageDisplayGetCubePoint" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  Gatan::DM::SurfacePlotImageDisplayGetCubePoint((Gatan::DM::SurfacePlotImageDisplay const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurfacePlotImageDisplayIsShadingOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::SurfacePlotImageDisplay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SurfacePlotImageDisplayIsShadingOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurfacePlotImageDisplayIsShadingOn" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurfacePlotImageDisplayIsShadingOn" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::SurfacePlotImageDisplay * >(argp1);
  result = (bool)Gatan::DM::SurfacePlotImageDisplayIsShadingOn((Gatan::DM::SurfacePlotImageDisplay const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurfacePlotImageDisplaySetCubeAxes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::SurfacePlotImageDisplay *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SurfacePlotImageDisplaySetCubeAxes",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::SurfacePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SurfacePlotImageDisplaySetCubeAxes" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::SurfacePlotImageDisplaySetCubeAxes((Gatan::DM::SurfacePlotImageDisplay const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurfacePlotImageDisplaySetShadingOn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::SurfacePlotImageDisplay *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SurfacePlotImageDisplaySetShadingOn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__SurfacePlotImageDisplay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurfacePlotImageDisplaySetShadingOn" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurfacePlotImageDisplaySetShadingOn" "', argument " "1"" of type '" "Gatan::DM::SurfacePlotImageDisplay const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::SurfacePlotImageDisplay * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SurfacePlotImageDisplaySetShadingOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::SurfacePlotImageDisplaySetShadingOn((Gatan::DM::SurfacePlotImageDisplay const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SurveyNormalPackedModulus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SurveyNormalPackedModulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SurveyNormalPackedModulus" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SurveyNormalPackedModulus" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SurveyNormalPackedModulus" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SurveyNormalPackedModulus" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::SurveyNormalPackedModulus((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVDecomposition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVDecomposition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVDecomposition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVDecomposition" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVDecomposition" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVDecomposition" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  result = Gatan::DM::SVDecomposition((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVDFit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SVDFit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVDFit" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVDFit" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVDFit" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVDFit" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SVDFit" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Gatan::DM::SVDFit((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwapByteOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwapByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwapByteOrder" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwapByteOrder" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SwapByteOrder((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwapWordOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwapWordOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwapWordOrder" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwapWordOrder" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::SwapWordOrder((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupAddLabeledTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupAddLabeledTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupAddLabeledTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddLabeledTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupAddLabeledTagGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupAddLabeledTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddLabeledTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = Gatan::DM::TagGroupAddLabeledTagGroup((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupAddTagGroupAfter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupAddTagGroupAfter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupAddTagGroupAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupAddTagGroupAfter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupAddTagGroupAfter" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAfter" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = Gatan::DM::TagGroupAddTagGroupAfter((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupAddTagGroupAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupAddTagGroupAtBeginning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupAddTagGroupAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupAddTagGroupAtBeginning" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAtBeginning" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  result = Gatan::DM::TagGroupAddTagGroupAtBeginning((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupAddTagGroupAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupAddTagGroupAtEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupAddTagGroupAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupAddTagGroupAtEnd" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupAtEnd" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  result = Gatan::DM::TagGroupAddTagGroupAtEnd((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupAddTagGroupBefore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupAddTagGroupBefore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupAddTagGroupBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupAddTagGroupBefore" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupAddTagGroupBefore" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupAddTagGroupBefore" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = Gatan::DM::TagGroupAddTagGroupBefore((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupClone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupClone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupClone" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupClone" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = Gatan::DM::TagGroupClone((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCopyTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupCopyTag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCopyTag" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTag" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCopyTag" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTag" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupCopyTag" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (long)Gatan::DM::TagGroupCopyTag((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2,arg3);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCopyTagToPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  Gatan::DM::String *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupCopyTagToPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCopyTagToPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCopyTagToPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupCopyTagToPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupCopyTagToPath" "', argument " "4"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToPath" "', argument " "4"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::String * >(argp4);
  result = (long)Gatan::DM::TagGroupCopyTagToPath((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::TagGroup const &)*arg3,(Gatan::DM::String const &)*arg4);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCopyTagsFrom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCopyTagsFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCopyTagsFrom" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagsFrom" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCopyTagsFrom" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagsFrom" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  Gatan::DM::TagGroupCopyTagsFrom((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCopyTagToIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupCopyTagToIndex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCopyTagToIndex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToIndex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCopyTagToIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupCopyTagToIndex" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCopyTagToIndex" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupCopyTagToIndex" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  Gatan::DM::TagGroupCopyTagToIndex((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::TagGroup const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCountTags(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCountTags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCountTags" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCountTags" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (long)Gatan::DM::TagGroupCountTags((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateGroupTagAfter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateGroupTagAfter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateGroupTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateGroupTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateGroupTagAfter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::TagGroupCreateGroupTagAfter((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateGroupTagAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateGroupTagAtBeginning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateGroupTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateGroupTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = Gatan::DM::TagGroupCreateGroupTagAtBeginning((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateGroupTagAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateGroupTagAtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateGroupTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateGroupTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = Gatan::DM::TagGroupCreateGroupTagAtEnd((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateGroupTagBefore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateGroupTagBefore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateGroupTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateGroupTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateGroupTagBefore" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::TagGroupCreateGroupTagBefore((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateListTagAfter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateListTagAfter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateListTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateListTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateListTagAfter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::TagGroupCreateListTagAfter((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateListTagAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateListTagAtBeginning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateListTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateListTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = Gatan::DM::TagGroupCreateListTagAtBeginning((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateListTagAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateListTagAtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateListTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateListTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = Gatan::DM::TagGroupCreateListTagAtEnd((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateListTagBefore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateListTagBefore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateListTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateListTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateListTagBefore" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::TagGroupCreateListTagBefore((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewLabeledGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateNewLabeledGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewLabeledGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewLabeledGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCreateNewLabeledGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = Gatan::DM::TagGroupCreateNewLabeledGroup((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewLabeledList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateNewLabeledList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewLabeledList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewLabeledList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCreateNewLabeledList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = Gatan::DM::TagGroupCreateNewLabeledList((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewLabeledTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateNewLabeledTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewLabeledTag" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewLabeledTag" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupCreateNewLabeledTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (long)Gatan::DM::TagGroupCreateNewLabeledTag((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewTagAfter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateNewTagAfter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewTagAfter" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateNewTagAfter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::TagGroupCreateNewTagAfter((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewTagAtBeginning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateNewTagAtBeginning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewTagAtBeginning" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (long)Gatan::DM::TagGroupCreateNewTagAtBeginning((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewTagAtEnd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupCreateNewTagAtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewTagAtEnd" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (long)Gatan::DM::TagGroupCreateNewTagAtEnd((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupCreateNewTagBefore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupCreateNewTagBefore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupCreateNewTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupCreateNewTagBefore" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupCreateNewTagBefore" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::TagGroupCreateNewTagBefore((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupDeleteAllTags(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupDeleteAllTags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupDeleteAllTags" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDeleteAllTags" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  Gatan::DM::TagGroupDeleteAllTags((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupDeleteTagWithIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupDeleteTagWithIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupDeleteTagWithIndex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDeleteTagWithIndex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupDeleteTagWithIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::TagGroupDeleteTagWithIndex((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupDeleteTagWithLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupDeleteTagWithLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupDeleteTagWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDeleteTagWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupDeleteTagWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDeleteTagWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (bool)Gatan::DM::TagGroupDeleteTagWithLabel((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupDoesTagExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupDoesTagExist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupDoesTagExist" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDoesTagExist" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupDoesTagExist" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupDoesTagExist" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (bool)Gatan::DM::TagGroupDoesTagExist((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupExecuteScriptGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupExecuteScriptGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupExecuteScriptGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupExecuteScriptGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupExecuteScriptGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  Gatan::DM::TagGroupExecuteScriptGroup((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  ulong arg2 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsArray((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsBoolean" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsBoolean" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsBoolean((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsDouble" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsDouble" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsDouble((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsDoubleComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = (complex128_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsDoubleComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsDoubleComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_complex128_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t *""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsDoubleComplex((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsEightBitColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  rgba_uint8_os_t *arg3 = (rgba_uint8_os_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsEightBitColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsEightBitColor" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_rgba_uint8_os_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t *""'"); 
  }
  arg3 = reinterpret_cast< rgba_uint8_os_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsEightBitColor((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsFloat" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsFloat" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsFloat((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsFloatComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = (complex128_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsFloatComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsFloatComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_complex128_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t *""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsFloatComplex((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsFloatPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetIndexedTagAsFloatPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsFloatPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsFloatPoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsFloatPoint" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsFloatPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsFloatRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetIndexedTagAsFloatRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetIndexedTagAsFloatRect" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsFloatRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsLong" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsLong" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsLong((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsLongPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  SSIZE_T *arg3 = (SSIZE_T *) 0 ;
  SSIZE_T *arg4 = (SSIZE_T *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetIndexedTagAsLongPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsLongPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsLongPoint" "', argument " "3"" of type '" "SSIZE_T *""'"); 
  }
  arg3 = reinterpret_cast< SSIZE_T * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsLongPoint" "', argument " "4"" of type '" "SSIZE_T *""'"); 
  }
  arg4 = reinterpret_cast< SSIZE_T * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsLongPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsLongRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  SSIZE_T *arg3 = (SSIZE_T *) 0 ;
  SSIZE_T *arg4 = (SSIZE_T *) 0 ;
  SSIZE_T *arg5 = (SSIZE_T *) 0 ;
  SSIZE_T *arg6 = (SSIZE_T *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetIndexedTagAsLongRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "3"" of type '" "SSIZE_T *""'"); 
  }
  arg3 = reinterpret_cast< SSIZE_T * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "4"" of type '" "SSIZE_T *""'"); 
  }
  arg4 = reinterpret_cast< SSIZE_T * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "5"" of type '" "SSIZE_T *""'"); 
  }
  arg5 = reinterpret_cast< SSIZE_T * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_SSIZE_T, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetIndexedTagAsLongRect" "', argument " "6"" of type '" "SSIZE_T *""'"); 
  }
  arg6 = reinterpret_cast< SSIZE_T * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsLongRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short *arg3 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsShort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsShort" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsShort" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsShort((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsShortPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short *arg3 = (short *) 0 ;
  short *arg4 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetIndexedTagAsShortPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsShortPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsShortPoint" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsShortPoint" "', argument " "4"" of type '" "short *""'"); 
  }
  arg4 = reinterpret_cast< short * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsShortPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsShortRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short *arg3 = (short *) 0 ;
  short *arg4 = (short *) 0 ;
  short *arg5 = (short *) 0 ;
  short *arg6 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetIndexedTagAsShortRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "4"" of type '" "short *""'"); 
  }
  arg4 = reinterpret_cast< short * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "5"" of type '" "short *""'"); 
  }
  arg5 = reinterpret_cast< short * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetIndexedTagAsShortRect" "', argument " "6"" of type '" "short *""'"); 
  }
  arg6 = reinterpret_cast< short * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsShortRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsString" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsString" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsString((Gatan::DM::TagGroup const &)*arg1,arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsTagGroup" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsTagGroup((Gatan::DM::TagGroup const &)*arg1,arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsText" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsText" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsText" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsText((Gatan::DM::TagGroup const &)*arg1,arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 *arg3 = (uint16 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsUInt16",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsUInt16" "', argument " "3"" of type '" "uint16 *""'"); 
  }
  arg3 = reinterpret_cast< uint16 * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetIndexedTagAsUInt32(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  ulong *arg3 = (ulong *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetIndexedTagAsUInt32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetIndexedTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetIndexedTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetIndexedTagAsUInt32" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ulong, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetIndexedTagAsUInt32" "', argument " "3"" of type '" "ulong *""'"); 
  }
  arg3 = reinterpret_cast< ulong * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetIndexedTagAsUInt32((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetOrCreateTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupGetOrCreateTagGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetOrCreateTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetOrCreateTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetOrCreateTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetOrCreateTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = Gatan::DM::TagGroupGetOrCreateTagGroup((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetOrCreateTagList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::TagGroup result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupGetOrCreateTagList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetOrCreateTagList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetOrCreateTagList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetOrCreateTagList" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetOrCreateTagList" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = Gatan::DM::TagGroupGetOrCreateTagList((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::TagGroup(static_cast< const Gatan::DM::TagGroup& >(result))), SWIGTYPE_p_Gatan__DM__TagGroup, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetSeeds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupGetSeeds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetSeeds" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetSeeds" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (long)Gatan::DM::TagGroupGetSeeds((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsArray" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsArray((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsBoolean" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsBoolean" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsBoolean" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsBoolean((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsDouble" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsDouble" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsDouble((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsDoubleComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  complex128_t *arg3 = (complex128_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsDoubleComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsDoubleComplex" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_complex128_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t *""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsDoubleComplex((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsEightBitColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  rgba_uint8_os_t *arg3 = (rgba_uint8_os_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsEightBitColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsEightBitColor" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_rgba_uint8_os_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t *""'"); 
  }
  arg3 = reinterpret_cast< rgba_uint8_os_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsEightBitColor((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsFloat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsFloat" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsFloat((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsFloatComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  complex128_t *arg3 = (complex128_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsFloatComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsFloatComplex" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_complex128_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t *""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsFloatComplex((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsFloatPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetTagAsFloatPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsFloatPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsFloatPoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsFloatPoint" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetTagAsFloatPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsFloatRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetTagAsFloatRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetTagAsFloatRect" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetTagAsFloatRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsLong" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsLong" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsLong((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsLongPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetTagAsLongPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsLongPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsLongPoint" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsLongPoint" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetTagAsLongPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsLongRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long *arg6 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetTagAsLongRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsLongRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsLongRect" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsLongRect" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetTagAsLongRect" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetTagAsLongRect" "', argument " "6"" of type '" "long *""'"); 
  }
  arg6 = reinterpret_cast< long * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetTagAsLongRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsRGBUInt16__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 *arg3 = (uint16 *) 0 ;
  uint16 *arg4 = (uint16 *) 0 ;
  uint16 *arg5 = (uint16 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TagGroupGetTagAsRGBUInt16",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "3"" of type '" "uint16 *""'"); 
  }
  arg3 = reinterpret_cast< uint16 * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "4"" of type '" "uint16 *""'"); 
  }
  arg4 = reinterpret_cast< uint16 * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "5"" of type '" "uint16 *""'"); 
  }
  arg5 = reinterpret_cast< uint16 * >(argp5);
  result = (bool)Gatan::DM::TagGroupGetTagAsRGBUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsRGBUInt16__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint16 *arg3 = (uint16 *) 0 ;
  uint16 *arg4 = (uint16 *) 0 ;
  uint16 *arg5 = (uint16 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TagGroupGetTagAsRGBUInt16",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "3"" of type '" "uint16 *""'"); 
  }
  arg3 = reinterpret_cast< uint16 * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "4"" of type '" "uint16 *""'"); 
  }
  arg4 = reinterpret_cast< uint16 * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetTagAsRGBUInt16" "', argument " "5"" of type '" "uint16 *""'"); 
  }
  arg5 = reinterpret_cast< uint16 * >(argp5);
  result = (bool)Gatan::DM::TagGroupGetTagAsRGBUInt16((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsRGBUInt16(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__TagGroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint16, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint16, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint16, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TagGroupGetTagAsRGBUInt16__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__TagGroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint16, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint16, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint16, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TagGroupGetTagAsRGBUInt16__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagGroupGetTagAsRGBUInt16'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::TagGroupGetTagAsRGBUInt16(Gatan::DM::TagGroup const &,long,uint16 *,uint16 *,uint16 *)\n"
    "    Gatan::DM::TagGroupGetTagAsRGBUInt16(Gatan::DM::TagGroup const &,char const *,uint16 *,uint16 *,uint16 *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short *arg3 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsShort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsShort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsShort" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsShort((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsShortPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short *arg3 = (short *) 0 ;
  short *arg4 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupGetTagAsShortPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsShortPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsShortPoint" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsShortPoint" "', argument " "4"" of type '" "short *""'"); 
  }
  arg4 = reinterpret_cast< short * >(argp4);
  result = (bool)Gatan::DM::TagGroupGetTagAsShortPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsShortRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short *arg3 = (short *) 0 ;
  short *arg4 = (short *) 0 ;
  short *arg5 = (short *) 0 ;
  short *arg6 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupGetTagAsShortRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsShortRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsShortRect" "', argument " "3"" of type '" "short *""'"); 
  }
  arg3 = reinterpret_cast< short * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupGetTagAsShortRect" "', argument " "4"" of type '" "short *""'"); 
  }
  arg4 = reinterpret_cast< short * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupGetTagAsShortRect" "', argument " "5"" of type '" "short *""'"); 
  }
  arg5 = reinterpret_cast< short * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupGetTagAsShortRect" "', argument " "6"" of type '" "short *""'"); 
  }
  arg6 = reinterpret_cast< short * >(argp6);
  result = (bool)Gatan::DM::TagGroupGetTagAsShortRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsString" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsString" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsString((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsTagGroup((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsList" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsList" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsList((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsText" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsText" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsText" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsText((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint16 *arg3 = (uint16 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsUInt16",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsUInt16" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_uint16, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsUInt16" "', argument " "3"" of type '" "uint16 *""'"); 
  }
  arg3 = reinterpret_cast< uint16 * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsUInt16((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagAsUInt32(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  ulong *arg3 = (ulong *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagAsUInt32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupGetTagAsUInt32" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ulong, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupGetTagAsUInt32" "', argument " "3"" of type '" "ulong *""'"); 
  }
  arg3 = reinterpret_cast< ulong * >(argp3);
  result = (bool)Gatan::DM::TagGroupGetTagAsUInt32((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupGetTagLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetTagLabel" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = Gatan::DM::TagGroupGetTagLabel((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupGetTagSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagSize" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagSize" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetTagSize" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::TagGroupGetTagSize((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupGetTagType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagType" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagType" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetTagType" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupGetTagType" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (long)Gatan::DM::TagGroupGetTagType((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupGetTagTypeLength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupGetTagTypeLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupGetTagTypeLength" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupGetTagTypeLength" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupGetTagTypeLength" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)Gatan::DM::TagGroupGetTagTypeLength((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupHasChangedSince(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupHasChangedSince",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupHasChangedSince" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupHasChangedSince" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupHasChangedSince" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)Gatan::DM::TagGroupHasChangedSince((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  ulong arg2 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupInsertTagAsArray" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsArray" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::TagGroupInsertTagAsArray((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsBoolean" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsBoolean" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::TagGroupInsertTagAsBoolean((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsDouble" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::TagGroupInsertTagAsDouble((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsDoubleComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsDoubleComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsDoubleComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupInsertTagAsDoubleComplex((Gatan::DM::TagGroup const &)*arg1,arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsEightBitColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  rgba_uint8_os_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsEightBitColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsEightBitColor" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_rgba_uint8_os_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'");
    } else {
      rgba_uint8_os_t * temp = reinterpret_cast< rgba_uint8_os_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupInsertTagAsEightBitColor((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsFloat" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::TagGroupInsertTagAsFloat((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsFloatComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsFloatComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsFloatComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupInsertTagAsFloatComplex((Gatan::DM::TagGroup const &)*arg1,arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsFloatPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupInsertTagAsFloatPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsFloatPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsFloatPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsFloatPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::TagGroupInsertTagAsFloatPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsFloatRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupInsertTagAsFloatRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupInsertTagAsFloatRect" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::TagGroupInsertTagAsFloatRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsLong" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsLong" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::TagGroupInsertTagAsLong((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsLongPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupInsertTagAsLongPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsLongPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsLongPoint" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsLongPoint" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  Gatan::DM::TagGroupInsertTagAsLongPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsLongRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupInsertTagAsLongRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupInsertTagAsLongRect" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  Gatan::DM::TagGroupInsertTagAsLongRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsRGBUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TagGroupInsertTagAsRGBUInt16",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  Gatan::DM::TagGroupInsertTagAsRGBUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsShort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsShort" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsShort" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  Gatan::DM::TagGroupInsertTagAsShort((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsShortPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  short arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupInsertTagAsShortPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsShortPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsShortPoint" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsShortPoint" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  Gatan::DM::TagGroupInsertTagAsShortPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsShortRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupInsertTagAsShortRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupInsertTagAsShortRect" "', argument " "6"" of type '" "short""'");
  } 
  arg6 = static_cast< short >(val6);
  Gatan::DM::TagGroupInsertTagAsShortRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupInsertTagAsString((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsTagGroup" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  Gatan::DM::TagGroupInsertTagAsTagGroup((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsText" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupInsertTagAsText((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsUInt16",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupInsertTagAsUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupInsertTagAsUInt32(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupInsertTagAsUInt32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupInsertTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupInsertTagAsUInt32" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupInsertTagAsUInt32" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupInsertTagAsUInt32" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupInsertTagAsUInt32((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIsList(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupIsList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIsList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupIsList" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (bool)Gatan::DM::TagGroupIsList((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIsOpen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupIsOpen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIsOpen" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupIsOpen" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (bool)Gatan::DM::TagGroupIsOpen((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupIsValid" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupIsValid" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  result = (bool)Gatan::DM::TagGroupIsValid((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupLoadFromFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupLoadFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupLoadFromFile" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupLoadFromFile" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupLoadFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupLoadFromFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  result = (bool)Gatan::DM::TagGroupLoadFromFile((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupLoadFromFileWithLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupLoadFromFileWithLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupLoadFromFileWithLabel" "', argument " "3"" of type '" "Gatan::DM::String &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  result = (bool)Gatan::DM::TagGroupLoadFromFileWithLabel((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupMarkAsChanged(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagGroupMarkAsChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupMarkAsChanged" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupMarkAsChanged" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  Gatan::DM::TagGroupMarkAsChanged((Gatan::DM::TagGroup const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupMergeTagsFrom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupMergeTagsFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupMergeTagsFrom" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupMergeTagsFrom" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupMergeTagsFrom" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupMergeTagsFrom" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  Gatan::DM::TagGroupMergeTagsFrom((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupOpenBrowserWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gatan::DM::Window result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupOpenBrowserWindow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupOpenBrowserWindow" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupOpenBrowserWindow" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupOpenBrowserWindow" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = Gatan::DM::TagGroupOpenBrowserWindow((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Window(static_cast< const Gatan::DM::Window& >(result))), SWIGTYPE_p_Gatan__DM__Window, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupParseAndCreateTagPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  Gatan::DM::String *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupParseAndCreateTagPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupParseAndCreateTagPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseAndCreateTagPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupParseAndCreateTagPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseAndCreateTagPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupParseAndCreateTagPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseAndCreateTagPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupParseAndCreateTagPath" "', argument " "4"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseAndCreateTagPath" "', argument " "4"" of type '" "Gatan::DM::String &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::String * >(argp4);
  result = (long)Gatan::DM::TagGroupParseAndCreateTagPath((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupParseTagPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  Gatan::DM::String *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupParseTagPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupParseTagPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseTagPath" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupParseTagPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseTagPath" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupParseTagPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseTagPath" "', argument " "3"" of type '" "Gatan::DM::TagGroup &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__String,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupParseTagPath" "', argument " "4"" of type '" "Gatan::DM::String &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupParseTagPath" "', argument " "4"" of type '" "Gatan::DM::String &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::String * >(argp4);
  result = (long)Gatan::DM::TagGroupParseTagPath((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupReleaseSeeds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupReleaseSeeds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupReleaseSeeds" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupReleaseSeeds" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupReleaseSeeds" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::TagGroupReleaseSeeds((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupReplaceTagsWithCopy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::TagGroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupReplaceTagsWithCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupReplaceTagsWithCopy" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupReplaceTagsWithCopy" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupReplaceTagsWithCopy" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupReplaceTagsWithCopy" "', argument " "2"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::TagGroup * >(argp2);
  Gatan::DM::TagGroupReplaceTagsWithCopy((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::TagGroup const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSaveToFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupSaveToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSaveToFile" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSaveToFile" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSaveToFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::TagGroupSaveToFile((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSaveToFileWithLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSaveToFileWithLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSaveToFileWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSaveToFileWithLabel" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSaveToFileWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSaveToFileWithLabel" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSaveToFileWithLabel" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSaveToFileWithLabel" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupSaveToFileWithLabel((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  ulong arg2 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "2"" of type '" "ulong""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "2"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsArray((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsBoolean" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsBoolean" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::TagGroupSetIndexedTagAsBoolean((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsDouble" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::TagGroupSetIndexedTagAsDouble((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsDoubleComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsDoubleComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsDoubleComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsDoubleComplex((Gatan::DM::TagGroup const &)*arg1,arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsEightBitColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  rgba_uint8_os_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsEightBitColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsEightBitColor" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_rgba_uint8_os_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'");
    } else {
      rgba_uint8_os_t * temp = reinterpret_cast< rgba_uint8_os_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsEightBitColor((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsFloat" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::TagGroupSetIndexedTagAsFloat((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsFloatComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsFloatComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsFloatComplex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsFloatComplex((Gatan::DM::TagGroup const &)*arg1,arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsFloatPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetIndexedTagAsFloatPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsFloatPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsFloatPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetIndexedTagAsFloatPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::TagGroupSetIndexedTagAsFloatPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsFloatRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetIndexedTagAsFloatRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupSetIndexedTagAsFloatRect" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::TagGroupSetIndexedTagAsFloatRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsLong" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsLong" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::TagGroupSetIndexedTagAsLong((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsLongPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  SSIZE_T arg3 ;
  SSIZE_T arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetIndexedTagAsLongPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "3"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "3"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "4"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongPoint" "', argument " "4"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsLongPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsLongRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  SSIZE_T arg3 ;
  SSIZE_T arg4 ;
  SSIZE_T arg5 ;
  SSIZE_T arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetIndexedTagAsLongRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "3"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "3"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "4"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "4"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "5"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "5"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_SSIZE_T,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "6"" of type '" "SSIZE_T""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsLongRect" "', argument " "6"" of type '" "SSIZE_T""'");
    } else {
      SSIZE_T * temp = reinterpret_cast< SSIZE_T * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsLongRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsRGBUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TagGroupSetIndexedTagAsRGBUInt16",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsRGBUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsShort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsShort" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsShort" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  Gatan::DM::TagGroupSetIndexedTagAsShort((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsShortPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  short arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetIndexedTagAsShortPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsShortPoint" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsShortPoint" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetIndexedTagAsShortPoint" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  Gatan::DM::TagGroupSetIndexedTagAsShortPoint((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsShortRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetIndexedTagAsShortRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupSetIndexedTagAsShortRect" "', argument " "6"" of type '" "short""'");
  } 
  arg6 = static_cast< short >(val6);
  Gatan::DM::TagGroupSetIndexedTagAsShortRect((Gatan::DM::TagGroup const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsString((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsTagGroup" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsTagGroup((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsText" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupSetIndexedTagAsText((Gatan::DM::TagGroup const &)*arg1,arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  uint16 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsUInt16",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsUInt16" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsUInt16((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIndexedTagAsUInt32(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  long arg2 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetIndexedTagAsUInt32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIndexedTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIndexedTagAsUInt32" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetIndexedTagAsUInt32" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIndexedTagAsUInt32" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetIndexedTagAsUInt32((Gatan::DM::TagGroup const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetIsOpen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagGroupSetIsOpen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetIsOpen" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetIsOpen" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagGroupSetIsOpen" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::TagGroupSetIsOpen((Gatan::DM::TagGroup const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsArray" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsArray" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsArray" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::TagGroupSetTagAsArray((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsBoolean(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsBoolean",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsBoolean" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsBoolean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsBoolean" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  Gatan::DM::TagGroupSetTagAsBoolean((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsDouble" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsDouble" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Gatan::DM::TagGroupSetTagAsDouble((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsDoubleComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsDoubleComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsDoubleComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsDoubleComplex" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsDoubleComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupSetTagAsDoubleComplex((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsEightBitColor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  rgba_uint8_os_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsEightBitColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsEightBitColor" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsEightBitColor" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_rgba_uint8_os_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsEightBitColor" "', argument " "3"" of type '" "rgba_uint8_os_t""'");
    } else {
      rgba_uint8_os_t * temp = reinterpret_cast< rgba_uint8_os_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetTagAsEightBitColor((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsFloat" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsFloat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::TagGroupSetTagAsFloat((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsFloatComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  complex128_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsFloatComplex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsFloatComplex" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsFloatComplex" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_complex128_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsFloatComplex" "', argument " "3"" of type '" "complex128_t const &""'"); 
  }
  arg3 = reinterpret_cast< complex128_t * >(argp3);
  Gatan::DM::TagGroupSetTagAsFloatComplex((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(complex128_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsFloatPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetTagAsFloatPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsFloatPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsFloatPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsFloatPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsFloatPoint" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Gatan::DM::TagGroupSetTagAsFloatPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsFloatRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetTagAsFloatRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsFloatRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupSetTagAsFloatRect" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  Gatan::DM::TagGroupSetTagAsFloatRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsLong" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsLong" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsLong" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::TagGroupSetTagAsLong((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsLongPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetTagAsLongPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsLongPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsLongPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsLongPoint" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsLongPoint" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  Gatan::DM::TagGroupSetTagAsLongPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsLongRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetTagAsLongRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsLongRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsLongRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsLongRect" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsLongRect" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupSetTagAsLongRect" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupSetTagAsLongRect" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  Gatan::DM::TagGroupSetTagAsLongRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsRGBUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TagGroupSetTagAsRGBUInt16",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "4"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsRGBUInt16" "', argument " "5"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetTagAsRGBUInt16((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsShort(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsShort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsShort" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsShort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsShort" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  Gatan::DM::TagGroupSetTagAsShort((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsShortPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  short arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagGroupSetTagAsShortPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsShortPoint" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsShortPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsShortPoint" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsShortPoint" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  Gatan::DM::TagGroupSetTagAsShortPoint((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsShortRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TagGroupSetTagAsShortRect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsShortRect" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsShortRect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagGroupSetTagAsShortRect" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TagGroupSetTagAsShortRect" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TagGroupSetTagAsShortRect" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TagGroupSetTagAsShortRect" "', argument " "6"" of type '" "short""'");
  } 
  arg6 = static_cast< short >(val6);
  Gatan::DM::TagGroupSetTagAsShortRect((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsString" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsString" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupSetTagAsString((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsTagGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  Gatan::DM::TagGroup *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsTagGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsTagGroup" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsTagGroup" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsTagGroup" "', argument " "3"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::TagGroup * >(argp3);
  Gatan::DM::TagGroupSetTagAsTagGroup((Gatan::DM::TagGroup const &)*arg1,(Gatan::DM::String const &)*arg2,(Gatan::DM::TagGroup const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsText" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsText" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsText" "', argument " "3"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::String * >(argp3);
  Gatan::DM::TagGroupSetTagAsText((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::String const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsUInt16(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsUInt16",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsUInt16" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsUInt16" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_uint16,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsUInt16" "', argument " "3"" of type '" "uint16""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsUInt16" "', argument " "3"" of type '" "uint16""'");
    } else {
      uint16 * temp = reinterpret_cast< uint16 * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetTagAsUInt16((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagAsUInt32(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagAsUInt32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsUInt32" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagAsUInt32" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ulong,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagAsUInt32" "', argument " "3"" of type '" "ulong""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagAsUInt32" "', argument " "3"" of type '" "ulong""'");
    } else {
      ulong * temp = reinterpret_cast< ulong * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Gatan::DM::TagGroupSetTagAsUInt32((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagGroupSetTagRGBBitmap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::TagGroup *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagGroupSetTagRGBBitmap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__TagGroup,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagGroupSetTagRGBBitmap" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagRGBBitmap" "', argument " "1"" of type '" "Gatan::DM::TagGroup const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::TagGroup * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagGroupSetTagRGBBitmap" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagGroupSetTagRGBBitmap" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagGroupSetTagRGBBitmap" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  Gatan::DM::TagGroupSetTagRGBBitmap((Gatan::DM::TagGroup const &)*arg1,(char const *)arg2,(Gatan::DM::Image const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationGetAlignment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TextAnnotationGetAlignment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationGetAlignment" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationGetAlignment" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::TextAnnotationGetAlignment((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationGetFixedPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TextAnnotationGetFixedPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationGetFixedPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationGetFixedPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TextAnnotationGetFixedPoint" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TextAnnotationGetFixedPoint" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  Gatan::DM::TextAnnotationGetFixedPoint((Gatan::DM::Component const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationGetResizeStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TextAnnotationGetResizeStyle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationGetResizeStyle" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationGetResizeStyle" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = (long)Gatan::DM::TextAnnotationGetResizeStyle((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationGetText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TextAnnotationGetText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationGetText" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationGetText" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  result = Gatan::DM::TextAnnotationGetText((Gatan::DM::Component const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationSetAlignment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TextAnnotationSetAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationSetAlignment" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationSetAlignment" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TextAnnotationSetAlignment" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::TextAnnotationSetAlignment((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationSetFixedPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TextAnnotationSetFixedPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationSetFixedPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationSetFixedPoint" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TextAnnotationSetFixedPoint" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TextAnnotationSetFixedPoint" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Gatan::DM::TextAnnotationSetFixedPoint((Gatan::DM::Component const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationSetResizeStyle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TextAnnotationSetResizeStyle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationSetResizeStyle" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationSetResizeStyle" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TextAnnotationSetResizeStyle" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::TextAnnotationSetResizeStyle((Gatan::DM::Component const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TextAnnotationSetText(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Component *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TextAnnotationSetText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Component,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextAnnotationSetText" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationSetText" "', argument " "1"" of type '" "Gatan::DM::Component const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Component * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TextAnnotationSetText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TextAnnotationSetText" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::TextAnnotationSetText((Gatan::DM::Component const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrowableIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Throwable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThrowableIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Throwable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrowableIsValid" "', argument " "1"" of type '" "Gatan::DM::Throwable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrowableIsValid" "', argument " "1"" of type '" "Gatan::DM::Throwable const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Throwable * >(argp1);
  result = (bool)Gatan::DM::ThrowableIsValid((Gatan::DM::Throwable const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TickCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)":TickCount")) SWIG_fail;
  result = Gatan::DM::TickCount();
  resultobj = SWIG_NewPointerObj((new uint32(static_cast< const uint32& >(result))), SWIGTYPE_p_uint32, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransferTagsAndApplyDataBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransferTagsAndApplyDataBar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransferTagsAndApplyDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransferTagsAndApplyDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::TransferTagsAndApplyDataBar((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransformPointFromImageToWindow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TransformPointFromImageToWindow",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformPointFromImageToWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformPointFromImageToWindow" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformPointFromImageToWindow" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransformPointFromImageToWindow" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TransformPointFromImageToWindow" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TransformPointFromImageToWindow" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  Gatan::DM::TransformPointFromImageToWindow((Gatan::DM::Image const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrapException(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short arg1 ;
  long arg2 ;
  short val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TrapException",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TrapException" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrapException" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::TrapException(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TryToUse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long arg2 ;
  long arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  bool *arg7 = (bool *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Gatan::DM::Image result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:TryToUse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TryToUse" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TryToUse" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TryToUse" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TryToUse" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TryToUse" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TryToUse" "', argument " "6"" of type '" "short""'");
  } 
  arg6 = static_cast< short >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TryToUse" "', argument " "7"" of type '" "bool *""'"); 
  }
  arg7 = reinterpret_cast< bool * >(argp7);
  result = Gatan::DM::TryToUse((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::Image(static_cast< const Gatan::DM::Image& >(result))), SWIGTYPE_p_Gatan__DM__Image, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TurboFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  Gatan::DM::Image *arg2 = 0 ;
  Gatan::DM::Image *arg3 = 0 ;
  Gatan::DM::Image *arg4 = 0 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  long arg8 ;
  long arg9 ;
  long arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  long val8 ;
  int ecode8 = 0 ;
  long val9 ;
  int ecode9 = 0 ;
  long val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:TurboFFT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TurboFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TurboFFT" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TurboFFT" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TurboFFT" "', argument " "2"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Image * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TurboFFT" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TurboFFT" "', argument " "3"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg3 = reinterpret_cast< Gatan::DM::Image * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TurboFFT" "', argument " "4"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TurboFFT" "', argument " "4"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg4 = reinterpret_cast< Gatan::DM::Image * >(argp4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TurboFFT" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TurboFFT" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TurboFFT" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  ecode8 = SWIG_AsVal_long(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TurboFFT" "', argument " "8"" of type '" "long""'");
  } 
  arg8 = static_cast< long >(val8);
  ecode9 = SWIG_AsVal_long(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "TurboFFT" "', argument " "9"" of type '" "long""'");
  } 
  arg9 = static_cast< long >(val9);
  ecode10 = SWIG_AsVal_long(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TurboFFT" "', argument " "10"" of type '" "long""'");
  } 
  arg10 = static_cast< long >(val10);
  Gatan::DM::TurboFFT((Gatan::DM::Image const &)*arg1,(Gatan::DM::Image const &)*arg2,(Gatan::DM::Image const &)*arg3,(Gatan::DM::Image const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoButtonDialog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TwoButtonDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoButtonDialog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoButtonDialog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoButtonDialog" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)Gatan::DM::TwoButtonDialog((char const *)arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateDataBar__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpdateDataBar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpdateDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpdateDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::UpdateDataBar((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateDataBar__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UpdateDataBar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpdateDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpdateDataBar" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UpdateDataBar" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::UpdateDataBar((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateDataBar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UpdateDataBar__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gatan__DM__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UpdateDataBar__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UpdateDataBar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gatan::DM::UpdateDataBar(Gatan::DM::Image const &)\n"
    "    Gatan::DM::UpdateDataBar(Gatan::DM::Image const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ApplyDefaultLayout(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApplyDefaultLayout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplyDefaultLayout" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApplyDefaultLayout" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ApplyDefaultLayout((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoApplyDefaultLayout(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoApplyDefaultLayout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoApplyDefaultLayout" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutoApplyDefaultLayout" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::AutoApplyDefaultLayout((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnregisterCustomMenu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnregisterCustomMenu",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UnregisterCustomMenu" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  Gatan::DM::UnregisterCustomMenu(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnregisterCustomTool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ULONG_PTR arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnregisterCustomTool",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ULONG_PTR,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnregisterCustomTool" "', argument " "1"" of type '" "ULONG_PTR""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnregisterCustomTool" "', argument " "1"" of type '" "ULONG_PTR""'");
    } else {
      ULONG_PTR * temp = reinterpret_cast< ULONG_PTR * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  Gatan::DM::UnregisterCustomTool(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnregisterObjectListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ulong_ptr_t arg1 ;
  ulong_ptr_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnregisterObjectListener",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ulong_ptr_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnregisterObjectListener" "', argument " "1"" of type '" "ulong_ptr_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnregisterObjectListener" "', argument " "1"" of type '" "ulong_ptr_t""'");
    } else {
      ulong_ptr_t * temp = reinterpret_cast< ulong_ptr_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ulong_ptr_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnregisterObjectListener" "', argument " "2"" of type '" "ulong_ptr_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnregisterObjectListener" "', argument " "2"" of type '" "ulong_ptr_t""'");
    } else {
      ulong_ptr_t * temp = reinterpret_cast< ulong_ptr_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  Gatan::DM::UnregisterObjectListener(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnregisterSystemIdle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SystemIdleProc arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnregisterSystemIdle",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SystemIdleProc,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnregisterSystemIdle" "', argument " "1"" of type '" "SystemIdleProc""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnregisterSystemIdle" "', argument " "1"" of type '" "SystemIdleProc""'");
    } else {
      SystemIdleProc * temp = reinterpret_cast< SystemIdleProc * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  Gatan::DM::UnregisterSystemIdle(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnShiftCenter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnShiftCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnShiftCenter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnShiftCenter" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::UnShiftCenter((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateDisplay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UpdateDisplay",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpdateDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpdateDisplay" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UpdateDisplay" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UpdateDisplay" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::UpdateDisplay((Gatan::DM::Image const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateImage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpdateImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpdateImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpdateImage" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::UpdateImage((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpdateTimeBarPercentage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpdateTimeBarPercentage",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UpdateTimeBarPercentage" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  Gatan::DM::UpdateTimeBarPercentage(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValidateSurvey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ValidateSurvey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValidateSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValidateSurvey" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  Gatan::DM::ValidateSurvey((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_variance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:variance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "variance" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "variance" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  result = (float)Gatan::DM::variance((Gatan::DM::Image const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowClose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WindowClose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowClose" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowClose" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowClose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Gatan::DM::WindowClose((Gatan::DM::Window const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetCurrentFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowGetCurrentFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetCurrentFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetCurrentFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = Gatan::DM::WindowGetCurrentFile((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetContentBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WindowGetContentBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetContentBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetContentBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetContentBounds" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetContentBounds" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WindowGetContentBounds" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WindowGetContentBounds" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::WindowGetContentBounds((Gatan::DM::Window const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetContentPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowGetContentPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetContentPosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetContentPosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetContentPosition" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetContentPosition" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::WindowGetContentPosition((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetContentSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowGetContentSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetContentSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetContentSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetContentSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetContentSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::WindowGetContentSize((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetFrameBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WindowGetFrameBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetFrameBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetFrameBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetFrameBounds" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetFrameBounds" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WindowGetFrameBounds" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WindowGetFrameBounds" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  Gatan::DM::WindowGetFrameBounds((Gatan::DM::Window const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetFramePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowGetFramePosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetFramePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetFramePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetFramePosition" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetFramePosition" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::WindowGetFramePosition((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetFrameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowGetFrameSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetFrameSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetFrameSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetFrameSize" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetFrameSize" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::WindowGetFrameSize((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetMousePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowGetMousePosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetMousePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetMousePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowGetMousePosition" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WindowGetMousePosition" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  Gatan::DM::WindowGetMousePosition((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetTitle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gatan::DM::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowGetTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetTitle" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetTitle" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = Gatan::DM::WindowGetTitle((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Gatan::DM::String(static_cast< const Gatan::DM::String& >(result))), SWIGTYPE_p_Gatan__DM__String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowGetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetType" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetType" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (long)Gatan::DM::WindowGetType((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowGetViewState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowGetViewState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowGetViewState" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowGetViewState" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (long)Gatan::DM::WindowGetViewState((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowHide(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowHide",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowHide" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowHide" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  Gatan::DM::WindowHide((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowIsOpen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowIsOpen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowIsOpen" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowIsOpen" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (bool)Gatan::DM::WindowIsOpen((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowIsShown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowIsShown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowIsShown" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowIsShown" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (bool)Gatan::DM::WindowIsShown((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowIsValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowIsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowIsValid" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowIsValid" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  result = (bool)Gatan::DM::WindowIsValid((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSelect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowSelect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSelect" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSelect" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  Gatan::DM::WindowSelect((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSendBehind(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::Window *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WindowSendBehind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSendBehind" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSendBehind" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowSendBehind" "', argument " "2"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSendBehind" "', argument " "2"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::Window * >(argp2);
  Gatan::DM::WindowSendBehind((Gatan::DM::Window const &)*arg1,(Gatan::DM::Window const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetCurrentFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WindowSetCurrentFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetCurrentFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetCurrentFile" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowSetCurrentFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetCurrentFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::WindowSetCurrentFile((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetContentBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WindowSetContentBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetContentBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetContentBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetContentBounds" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetContentBounds" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WindowSetContentBounds" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WindowSetContentBounds" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::WindowSetContentBounds((Gatan::DM::Window const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetContentPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowSetContentPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetContentPosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetContentPosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetContentPosition" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetContentPosition" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::WindowSetContentPosition((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetContentSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowSetContentSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetContentSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetContentSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetContentSize" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetContentSize" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::WindowSetContentSize((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetFrameBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WindowSetFrameBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetFrameBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetFrameBounds" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetFrameBounds" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetFrameBounds" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WindowSetFrameBounds" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WindowSetFrameBounds" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  Gatan::DM::WindowSetFrameBounds((Gatan::DM::Window const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetFramePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowSetFramePosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetFramePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetFramePosition" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetFramePosition" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetFramePosition" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::WindowSetFramePosition((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetFrameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WindowSetFrameSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetFrameSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetFrameSize" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetFrameSize" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WindowSetFrameSize" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::WindowSetFrameSize((Gatan::DM::Window const &)*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetTitle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WindowSetTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetTitle" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetTitle" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WindowSetTitle" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetTitle" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::WindowSetTitle((Gatan::DM::Window const &)*arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowSetViewState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WindowSetViewState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowSetViewState" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowSetViewState" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WindowSetViewState" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::WindowSetViewState((Gatan::DM::Window const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowShow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowShow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowShow" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowShow" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  Gatan::DM::WindowShow((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WindowUpdate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Window *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WindowUpdate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Window,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WindowUpdate" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WindowUpdate" "', argument " "1"" of type '" "Gatan::DM::Window const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Window * >(argp1);
  Gatan::DM::WindowUpdate((Gatan::DM::Window const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetFloatingWindowHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::String *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetFloatingWindowHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetFloatingWindowHeight" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetFloatingWindowHeight" "', argument " "1"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::String * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFloatingWindowHeight" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::SetFloatingWindowHeight((Gatan::DM::String const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DM_FileReference arg1 ;
  Gatan::DM::String *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WriteFile",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_DM_FileReference,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteFile" "', argument " "1"" of type '" "DM_FileReference""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteFile" "', argument " "1"" of type '" "DM_FileReference""'");
    } else {
      DM_FileReference * temp = reinterpret_cast< DM_FileReference * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gatan__DM__String,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteFile" "', argument " "2"" of type '" "Gatan::DM::String const &""'"); 
  }
  arg2 = reinterpret_cast< Gatan::DM::String * >(argp2);
  Gatan::DM::WriteFile(arg1,(Gatan::DM::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteRawStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WriteRawStream",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WriteRawStream" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WriteRawStream" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WriteRawStream" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  Gatan::DM::WriteRawStream(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XX_GetProcessKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XX_GetProcessKey",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XX_GetProcessKey" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (short)Gatan::DM::XX_GetProcessKey(arg1);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XX_InstallImageProcess(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Gatan::DM::Image *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XX_InstallImageProcess",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gatan__DM__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XX_InstallImageProcess" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XX_InstallImageProcess" "', argument " "1"" of type '" "Gatan::DM::Image const &""'"); 
  }
  arg1 = reinterpret_cast< Gatan::DM::Image * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XX_InstallImageProcess" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  Gatan::DM::XX_InstallImageProcess((Gatan::DM::Image const &)*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Yield(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Yield")) SWIG_fail;
  Gatan::DM::Yield();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetForbidScriptDialogFlag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetForbidScriptDialogFlag",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetForbidScriptDialogFlag" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)Gatan::DM::SetForbidScriptDialogFlag(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"AbortAcquisitionDaemon", _wrap_AbortAcquisitionDaemon, METH_VARARGS, (char *)"\n"
		"AbortAcquisitionDaemon(Image argument_1)\n"
		"\n"
		"AbortAcquisitionDaemon: Abort all acquisition daemons associated with the image.\n"
		""},
	 { (char *)"AbortAllAcquisitionDaemons", _wrap_AbortAllAcquisitionDaemons, METH_VARARGS, (char *)"\n"
		"AbortAllAcquisitionDaemons()\n"
		"\n"
		"AbortAllAcquisitionDaemons: Abort all acquisition daemons with any image within the \n"
		"application.\n"
		""},
	 { (char *)"AddCustomTool", _wrap_AddCustomTool, METH_VARARGS, (char *)"\n"
		"AddCustomTool(char const * icon, long toolInstance)\n"
		"\n"
		"AddCustomTool: Add the tool to the custom tool list. See the SDK documentation for more \n"
		"information.\n"
		""},
	 { (char *)"AddFunction", _wrap_AddFunction, METH_VARARGS, (char *)"\n"
		"AddFunction(char const * prototype, void * function)\n"
		"\n"
		"AddFunction: Uses the prototype string to define a function for use in the script \n"
		"language.\n"
		""},
	 { (char *)"AddPathToCopyToImageList", _wrap_AddPathToCopyToImageList, METH_VARARGS, (char *)"\n"
		"AddPathToCopyToImageList(char const * path)\n"
		"\n"
		"AddPathToCopyToImageList: Adds 'path' to the list of tags to transfer to acquired images.\n"
		""},
	 { (char *)"AddScriptFileToMenu", _wrap_AddScriptFileToMenu, METH_VARARGS, (char *)"\n"
		"AddScriptFileToMenu(char const * fileName, char const * commandName, char const * menuName, char const * optionalSubMenuName, bool isLibrary)\n"
		"\n"
		"AddScriptFileToMenu: Install the script in the file indicated by fileName into the \n"
		"application. The commandName indicates the string by which this script will be known to \n"
		"the application. If the script is to be installed in the menu, the menuName and \n"
		"optionalSubMenuName parameters specify the menu. Pass 1 for isLibrary if the script is a \n"
		"library only and 0 to install it in the menu.\n"
		""},
	 { (char *)"AddScriptFileToPackage", _wrap_AddScriptFileToPackage, METH_VARARGS, (char *)"\n"
		"AddScriptFileToPackage(char const * fileName, char const * packageName, long packageLevel, char const * commandName, char const * menuName, char const * optionalSubMenuName, bool isLibrary)\n"
		"\n"
		"AddScriptFileToPackage: Install the script in the file indicated by fileName into the \n"
		"package. The commandName indicates the string by which this script will be known to the \n"
		"application. If the script is to be installed in the menu, the menuName and \n"
		"optionalSubMenuName parameters specify the menu. Pass 1 for isLibrary if the script is a \n"
		"library only and 0 to install it in the menu.\n"
		""},
	 { (char *)"AddScriptToMenu", _wrap_AddScriptToMenu, METH_VARARGS, (char *)"\n"
		"AddScriptToMenu(char const * script, char const * commandName, char const * menuName, char const * optionalSubMenuName, bool isLibrary)\n"
		"\n"
		"AddScriptToMenu: Install the script into the application. The commandName indicates the \n"
		"string by which this script will be known to the application. If the script is to be \n"
		"installed in the menu, the menuName and optionalSubMenuName parameters specify the menu. \n"
		"Pass 1 for isLibrary if the script is a library only and 0 to install it in the menu.\n"
		""},
	 { (char *)"AddScriptToPackage", _wrap_AddScriptToPackage, METH_VARARGS, (char *)"\n"
		"AddScriptToPackage(char const * script, char const * packageName, long packageLevel, char const * commandName, char const * menuName, char const * optionalSubMenuName, bool isLibrary)\n"
		"\n"
		"AddScriptToPackage: Install the script into the application. The commandName indicates \n"
		"the string by which this script will be known to the application. If the script is to be \n"
		"installed in the menu, the menuName and optionalSubMenuName parameters specify the menu. \n"
		"Pass 1 for isLibrary if the script is a library only and 0 to install it in the menu.\n"
		""},
	 { (char *)"AddTagsToPackage", _wrap_AddTagsToPackage, METH_VARARGS, (char *)"\n"
		"AddTagsToPackage(TagGroup tags, char const * packageName, long packageLevel, char const * identifier)\n"
		"\n"
		"AddTagsToPackage: Install the tags into the package. The identifier is used to identify \n"
		"the tags in the packages. Clients should take care to use unique identifiers. See the \n"
		"Java model of naming classes.\n"
		""},
	 { (char *)"AdjustScriptMenuItem", _wrap_AdjustScriptMenuItem, METH_VARARGS, (char *)"\n"
		"AdjustScriptMenuItem(char const * commandName, char const * menuName, char const * optionalSubMenuName, char const * newCommandName, bool enabled, bool checked, char key, long acceleratorPos)\n"
		"\n"
		"AdjustScriptMenuItem: Adjusts the display characteristics of the given script menu item. \n"
		"NewCommandName specifies the new name for the menu item. The menu item will have to be \n"
		"referred to by that name from then forth. Enabled/checked indicate whether the item is \n"
		"enabled/checked. Key refers to the command key equivalent on the MacOS. Pass 0 to have no \n"
		"command key equivalent. AcceleratorPos refers to the position of the accelerator \n"
		"equivalent on Windows. Pass -1 to have to accelerator.\n"
		""},
	 { (char *)"AllocString", _wrap_AllocString, METH_VARARGS, (char *)"\n"
		"AllocString(long length) -> long\n"
		"\n"
		"AllocString: Allocates a string used in the script language. Length should include eos \n"
		"character.\n"
		""},
	 { (char *)"ApplicationGetApplicationMode", _wrap_ApplicationGetApplicationMode, METH_VARARGS, (char *)"\n"
		"ApplicationGetApplicationMode() -> Gatan::DM::String\n"
		"\n"
		"ApplicationGetApplicationMode: Gets the current mode of DigitalMicrograph as a string.\n"
		""},
	 { (char *)"ApplicationGetBounds", _wrap_ApplicationGetBounds, METH_VARARGS, (char *)"\n"
		"ApplicationGetBounds(long * t, long * l, long * b, long * r)\n"
		"\n"
		"ApplicationGetBounds: Gets the bounds of the main area of the application in application \n"
		"coordinates.\n"
		""},
	 { (char *)"ApplicationGetOrigin", _wrap_ApplicationGetOrigin, METH_VARARGS, (char *)"\n"
		"ApplicationGetOrigin(long * x, long * y)\n"
		"\n"
		"ApplicationGetOrigin: Gets the origin of the application in global coordinates.\n"
		""},
	 { (char *)"ApplyDataBar", _wrap_ApplyDataBar, METH_VARARGS, (char *)"\n"
		"ApplyDataBar(Gatan::DM::ImageDisplay const & imgDisp)\n"
		"\n"
		"ApplyDataBar: Applies a data bar to the image.\n"
		""},
	 { (char *)"ApproveDisplayBuffer", _wrap_ApproveDisplayBuffer, METH_VARARGS, (char *)"\n"
		"ApproveDisplayBuffer(Image argument_1)\n"
		"\n"
		"ApproveDisplayBuffer: Mark the display buffer as valid.\n"
		""},
	 { (char *)"ApproveSurvey", _wrap_ApproveSurvey, METH_VARARGS, (char *)"\n"
		"ApproveSurvey(Image argument_1)\n"
		"\n"
		"ApproveSurvey: Mark the image as already surveyed.\n"
		""},
	 { (char *)"AutoCorrelate", _wrap_AutoCorrelate, METH_VARARGS, (char *)"\n"
		"AutoCorrelate(Image source) -> Image\n"
		"\n"
		"AutoCorrelate: Return an image which is the result of the auto correlation of source.\n"
		""},
	 { (char *)"AutoCorrelation", _wrap_AutoCorrelation, METH_VARARGS, (char *)"\n"
		"AutoCorrelation(Image source) -> Image\n"
		"\n"
		"AutoCorrelation: Return an image which is the result of the auto correlation of source.\n"
		""},
	 { (char *)"Beep", _wrap_Beep, METH_VARARGS, (char *)"\n"
		"Beep()\n"
		"\n"
		"Beep: Play the current system beep.\n"
		""},
	 { (char *)"BinaryImage", _wrap_BinaryImage, METH_VARARGS, (char *)"\n"
		"BinaryImage(char const * title, long d0, long d1, long d2, long d3) -> Image\n"
		"BinaryImage(char const * title, long d0, long d1, long d2) -> Image\n"
		"BinaryImage(char const * title, long d0) -> Image\n"
		"BinaryImage(char const * title, long d0, long d1) -> Image\n"
		"\n"
		"BinaryImage: Creates a 1D binary image of size [d0] with the given title.\n"
		""},
	 { (char *)"BrowseTagFile", _wrap_BrowseTagFile, METH_VARARGS, (char *)"\n"
		"BrowseTagFile()\n"
		"\n"
		"BrowseTagFile: Present an open file dialog to the user, allow them to select a tag file, \n"
		"and then allow them to browse through it.\n"
		""},
	 { (char *)"ChooseMenuItem", _wrap_ChooseMenuItem, METH_VARARGS, (char *)"\n"
		"ChooseMenuItem(char const * menu, char const * subMenu, char const * item) -> bool\n"
		"\n"
		"ChooseMenuItem: Choose the given menu item.\n"
		""},
	 { (char *)"ClassAddMethod", _wrap_ClassAddMethod, METH_VARARGS, (char *)"\n"
		"ClassAddMethod(::Gatan::PlugIn::DM_Env * dm_env, Gatan::DM::String const & class_name, Gatan::DM::Function const & method) -> Gatan::DM::Function\n"
		"\n"
		"ClassAddMethod:\n"
		""},
	 { (char *)"ClassRemoveMethod", _wrap_ClassRemoveMethod, METH_VARARGS, (char *)"\n"
		"ClassRemoveMethod(Gatan::DM::String const & class_name, Gatan::DM::Function const & method)\n"
		"\n"
		"ClassRemoveMethod:\n"
		""},
	 { (char *)"CleanImage", _wrap_CleanImage, METH_VARARGS, (char *)"\n"
		"CleanImage(Image argument_1)\n"
		"\n"
		"CleanImage: Mark the image as having been saved.\n"
		""},
	 { (char *)"ClearDisplayBuffer", _wrap_ClearDisplayBuffer, METH_VARARGS, (char *)"\n"
		"ClearDisplayBuffer(Image argument_1)\n"
		"\n"
		"ClearDisplayBuffer: Clear the display buffer.\n"
		""},
	 { (char *)"ClearSelection", _wrap_ClearSelection, METH_VARARGS, (char *)"\n"
		"ClearSelection(Image argument_1)\n"
		"\n"
		"ClearSelection: Remove selection (if any) from the image.\n"
		""},
	 { (char *)"ClipboardGetAsString", _wrap_ClipboardGetAsString, METH_VARARGS, (char *)"\n"
		"ClipboardGetAsString(Gatan::DM::String & str) -> bool\n"
		"\n"
		"ClipboardGetAsString: Gets the contents of the clipboard as a string with the given \n"
		"encoding, if possible, and returns true if successful.\n"
		""},
	 { (char *)"ClipboardGetAsTagGroup", _wrap_ClipboardGetAsTagGroup, METH_VARARGS, (char *)"\n"
		"ClipboardGetAsTagGroup(TagGroup tagGroup) -> bool\n"
		"\n"
		"ClipboardGetAsTagGroup: Gets the contents of the clipboard as a tag group, if possible, \n"
		"and returns true if successful.\n"
		""},
	 { (char *)"ClipboardSetAsString", _wrap_ClipboardSetAsString, METH_VARARGS, (char *)"\n"
		"ClipboardSetAsString(Gatan::DM::String const & argument_1)\n"
		"\n"
		"ClipboardSetAsString: Sets the contents of the clipboard to the text.\n"
		""},
	 { (char *)"ClipboardSetAsTagGroup", _wrap_ClipboardSetAsTagGroup, METH_VARARGS, (char *)"\n"
		"ClipboardSetAsTagGroup(TagGroup tagGroup)\n"
		"\n"
		"ClipboardSetAsTagGroup: Sets the contents of the clipboard to the tag group.\n"
		""},
	 { (char *)"CloseFile", _wrap_CloseFile, METH_VARARGS, (char *)"\n"
		"CloseFile(DM_FileReference file)\n"
		"\n"
		"CloseFile: Close the file. This function should be called to close a file whenever a \n"
		"file is opened.\n"
		""},
	 { (char *)"CloseImage", _wrap_CloseImage, METH_VARARGS, (char *)"\n"
		"CloseImage(Image argument_1)\n"
		"\n"
		"CloseImage: Attempt to close the image.  If the data has changed, a dialog box appears \n"
		"to ask the user to save the image before closing it.\n"
		""},
	 { (char *)"CloseProgressWindow", _wrap_CloseProgressWindow, METH_VARARGS, (char *)"\n"
		"CloseProgressWindow()\n"
		"\n"
		"CloseProgressWindow: Close the progress window if it is open.\n"
		""},
	 { (char *)"CloseTimeBar", _wrap_CloseTimeBar, METH_VARARGS, (char *)"\n"
		"CloseTimeBar()\n"
		"\n"
		"CloseTimeBar: Closes the time bar.\n"
		""},
	 { (char *)"CommandDown", _wrap_CommandDown, METH_VARARGS, (char *)"\n"
		"CommandDown() -> bool\n"
		"\n"
		"CommandDown: Returns 1 if the command key is down and 0 otherwise.\n"
		""},
	 { (char *)"LMouseButtonDown", _wrap_LMouseButtonDown, METH_VARARGS, (char *)"\n"
		"LMouseButtonDown() -> bool\n"
		"\n"
		"CommandDown: Returns 1 if the command key is down and 0 otherwise.\n"
		""},
	 { (char *)"RMouseButtonDown", _wrap_RMouseButtonDown, METH_VARARGS, (char *)"\n"
		"RMouseButtonDown() -> bool\n"
		"\n"
		"CommandDown: Returns 1 if the command key is down and 0 otherwise.\n"
		""},
	 { (char *)"ComplexImage", _wrap_ComplexImage, METH_VARARGS, (char *)"\n"
		"ComplexImage(char const * title, long bytes, long d0, long d1, long d2, long d3) -> Image\n"
		"ComplexImage(char const * title, long bytes, long d0, long d1, long d2) -> Image\n"
		"ComplexImage(char const * title, long bytes, long d0, long d1) -> Image\n"
		"ComplexImage(char const * title, long bytes, long d0) -> Image\n"
		"\n"
		"ComplexImage: Creates a 2D complex image of size [d0,d1] with the given title. The bytes \n"
		"parameter can be 8 or 16 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"ComplexToPacked", _wrap_ComplexToPacked, METH_VARARGS, (char *)"\n"
		"ComplexToPacked(Image source) -> Image\n"
		"\n"
		"ComplexToPacked: Creates a new packed complex image from the complex 8-byte source.\n"
		""},
	 { (char *)"ComplexToPacked2", _wrap_ComplexToPacked2, METH_VARARGS, (char *)"\n"
		"ComplexToPacked2(Image source, long style) -> Image\n"
		"\n"
		"ComplexToPacked2: Creates a new packed complex image from the complex 8-byte source.\n"
		""},
	 { (char *)"ComponentAddChildAfter", _wrap_ComponentAddChildAfter, METH_VARARGS, (char *)"\n"
		"ComponentAddChildAfter(Gatan::DM::Component const & parent, Gatan::DM::Component const & child, Gatan::DM::Component const & annot_pos)\n"
		"\n"
		"ComponentAddChildAfter: Adds 'child' to 'parent's list of sub-annotations after \n"
		"'annot_pos'.\n"
		""},
	 { (char *)"ComponentAddChildAtBeginning", _wrap_ComponentAddChildAtBeginning, METH_VARARGS, (char *)"\n"
		"ComponentAddChildAtBeginning(Gatan::DM::Component const & parent, Gatan::DM::Component const & child)\n"
		"\n"
		"ComponentAddChildAtBeginning: Adds 'child' to the beginning of 'parent's list of \n"
		"sub-annotations.\n"
		""},
	 { (char *)"ComponentAddChildAtEnd", _wrap_ComponentAddChildAtEnd, METH_VARARGS, (char *)"\n"
		"ComponentAddChildAtEnd(Gatan::DM::Component const & parent, Gatan::DM::Component const & child)\n"
		"\n"
		"ComponentAddChildAtEnd: Adds 'child' to the end of 'parent's list of sub-annotations.\n"
		""},
	 { (char *)"ComponentAddChildBefore", _wrap_ComponentAddChildBefore, METH_VARARGS, (char *)"\n"
		"ComponentAddChildBefore(Gatan::DM::Component const & parent, Gatan::DM::Component const & child, Gatan::DM::Component const & annot_pos)\n"
		"\n"
		"ComponentAddChildBefore: Adds 'child' to 'parent's list of sub-annotations before \n"
		"'annot_pos'.\n"
		""},
	 { (char *)"ComponentAddNewComponent", _wrap_ComponentAddNewComponent, METH_VARARGS, (char *)"\n"
		"ComponentAddNewComponent(Gatan::DM::Component const & parent, long type, float f1, float f2, float f3, float f4) -> Gatan::DM::Component\n"
		"\n"
		"ComponentAddNewComponent: Creates a new annotaiton of type 'type' and adds it to 'parent'\n"
		""},
	 { (char *)"ComponentClone", _wrap_ComponentClone, METH_VARARGS, (char *)"\n"
		"ComponentClone(Gatan::DM::Component const & comp, bool doDeepCopy) -> Gatan::DM::Component\n"
		"\n"
		"ComponentClone: Returns a identical copy of the component and all its sub-components, \n"
		"copying associated images if 'doDeepCopy' is true.\n"
		""},
	 { (char *)"ComponentCountChildren", _wrap_ComponentCountChildren, METH_VARARGS, (char *)"\n"
		"ComponentCountChildren(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"ComponentCountChildren: Returns the number of sub components.\n"
		""},
	 { (char *)"ComponentCountChildrenOfType", _wrap_ComponentCountChildrenOfType, METH_VARARGS, (char *)"\n"
		"ComponentCountChildrenOfType(Gatan::DM::Component const & comp, long type) -> long\n"
		"\n"
		"ComponentCountChildrenOfType: Returns the number of sub-components of type 'type'.\n"
		""},
	 { (char *)"ComponentGetBoundingRect", _wrap_ComponentGetBoundingRect, METH_VARARGS, (char *)"\n"
		"ComponentGetBoundingRect(Gatan::DM::Component const & comp, float * t, float * l, float * b, float * r)\n"
		"\n"
		"ComponentGetBoundingRect: Gets the bounding rect of the annotation.\n"
		""},
	 { (char *)"ComponentGetBoundingRectInView", _wrap_ComponentGetBoundingRectInView, METH_VARARGS, (char *)"\n"
		"ComponentGetBoundingRectInView(Gatan::DM::Component const & comp, float * t, float * l, float * b, float * r)\n"
		"\n"
		"ComponentGetBoundingRectInView: Gets the bounding rect of the annotation.\n"
		""},
	 { (char *)"ComponentGetChild", _wrap_ComponentGetChild, METH_VARARGS, (char *)"\n"
		"ComponentGetChild(Gatan::DM::Component const & comp, long index) -> Gatan::DM::Component\n"
		"\n"
		"ComponentGetChild: Returns the 'index'th sub-component of 'comp'.\n"
		""},
	 { (char *)"ComponentGetChildByID", _wrap_ComponentGetChildByID, METH_VARARGS, (char *)"\n"
		"ComponentGetChildByID(Gatan::DM::Component const & comp, long ID) -> Gatan::DM::Component\n"
		"\n"
		"ComponentGetChildByID: Returns the component child of 'comp' with id 'ID'.\n"
		""},
	 { (char *)"ComponentGetChildToLocalTransform", _wrap_ComponentGetChildToLocalTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetChildToLocalTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetChildToLocalTransform: Gets the transformation from  child to local \n"
		"coordinates.\n"
		""},
	 { (char *)"ComponentGetChildToPageTransform", _wrap_ComponentGetChildToPageTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetChildToPageTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetChildToPageTransform: Gets the transformation from child to page coordinates.\n"
		""},
	 { (char *)"ComponentGetChildToViewTransform", _wrap_ComponentGetChildToViewTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetChildToViewTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetChildToViewTransform: Gets the transformation from child to view coordinates.\n"
		""},
	 { (char *)"ComponentGetChildToWindowTransform", _wrap_ComponentGetChildToWindowTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetChildToWindowTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetChildToWindowTransform: Gets the transformation from child to window \n"
		"coordinates.\n"
		""},
	 { (char *)"ComponentGetControlPoint", _wrap_ComponentGetControlPoint, METH_VARARGS, (char *)"\n"
		"ComponentGetControlPoint(Gatan::DM::Component const & comp, long loc, float * x, float * y) -> bool\n"
		"\n"
		"ComponentGetControlPoint: Returns the value '(x,y)' associated with the control point, \n"
		"and returns 'true' if the control point is valid\n"
		""},
	 { (char *)"ComponentGetDescendentByID", _wrap_ComponentGetDescendentByID, METH_VARARGS, (char *)"\n"
		"ComponentGetDescendentByID(Gatan::DM::Component const & comp, long ID) -> Gatan::DM::Component\n"
		"\n"
		"ComponentGetDescendentByID: Returns the component child of 'comp' with id 'ID'.\n"
		""},
	 { (char *)"ComponentGetDrawingMode", _wrap_ComponentGetDrawingMode, METH_VARARGS, (char *)"\n"
		"ComponentGetDrawingMode(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"ComponentGetDrawingMode: Gets the drawing mode of the image doucment component.\n"
		""},
	 { (char *)"ComponentGetFillMode", _wrap_ComponentGetFillMode, METH_VARARGS, (char *)"\n"
		"ComponentGetFillMode(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"ComponentGetFillMode: Gets the fill mode of the image doucment component.\n"
		""},
	 { (char *)"ComponentGetFontAttributes", _wrap_ComponentGetFontAttributes, METH_VARARGS, (char *)"\n"
		"ComponentGetFontAttributes(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"ComponentGetFontAttributes: Gets the attributes of the component's font.\n"
		""},
	 { (char *)"ComponentGetFontFaceName", _wrap_ComponentGetFontFaceName, METH_VARARGS, (char *)"\n"
		"ComponentGetFontFaceName(Gatan::DM::Component const & comp) -> Gatan::DM::String\n"
		"\n"
		"ComponentGetFontFaceName: Gets the face name of the component's font.\n"
		""},
	 { (char *)"ComponentGetFontInfo", _wrap_ComponentGetFontInfo, METH_VARARGS, (char *)"\n"
		"ComponentGetFontInfo(Gatan::DM::Component const & comp, Gatan::DM::String & faceName, long * attributes, long * size)\n"
		"\n"
		"ComponentGetFontInfo: Gets a description of the component's font.\n"
		""},
	 { (char *)"ComponentGetFontSize", _wrap_ComponentGetFontSize, METH_VARARGS, (char *)"\n"
		"ComponentGetFontSize(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"ComponentGetFontSize: Gets the point size of the component's font.\n"
		""},
	 { (char *)"ComponentGetID", _wrap_ComponentGetID, METH_VARARGS, (char *)"\n"
		"ComponentGetID(Gatan::DM::Component const & annot) -> long\n"
		"\n"
		"ComponentGetID: Gets the unique identifier of the annotation in the image document.\n"
		""},
	 { (char *)"ComponentGetImageDocument", _wrap_ComponentGetImageDocument, METH_VARARGS, (char *)"\n"
		"ComponentGetImageDocument(Gatan::DM::Component const & annot) -> Gatan::DM::ImageDocument\n"
		"\n"
		"ComponentGetImageDocument: Gets the image document associated with the annotation.\n"
		""},
	 { (char *)"ComponentGetLocalToPageTransform", _wrap_ComponentGetLocalToPageTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetLocalToPageTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetLocalToPageTransform: Gets the transformation from local to page coordinates.\n"
		""},
	 { (char *)"ComponentGetLocalToViewTransform", _wrap_ComponentGetLocalToViewTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetLocalToViewTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetLocalToViewTransform: Gets the transformation from local to view coordinates.\n"
		""},
	 { (char *)"ComponentGetLocalToWindowTransform", _wrap_ComponentGetLocalToWindowTransform, METH_VARARGS, (char *)"\n"
		"ComponentGetLocalToWindowTransform(Gatan::DM::Component const & comp, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ComponentGetLocalToWindowTransform: Gets the transformation from local to window \n"
		"coordinates.\n"
		""},
	 { (char *)"ComponentGetNthChildOfType", _wrap_ComponentGetNthChildOfType, METH_VARARGS, (char *)"\n"
		"ComponentGetNthChildOfType(Gatan::DM::Component const & comp, long type, long index) -> Gatan::DM::Component\n"
		"\n"
		"ComponentGetNthChildOfType: Returns the nth sub-component of type 'type'.\n"
		""},
	 { (char *)"ComponentGetParentComponent", _wrap_ComponentGetParentComponent, METH_VARARGS, (char *)"\n"
		"ComponentGetParentComponent(Gatan::DM::Component const & comp) -> Gatan::DM::Component\n"
		"\n"
		"ComponentGetParentComponent: Gets the parent component of 'comp', if any.\n"
		""},
	 { (char *)"ComponentGetParentImageDisplay", _wrap_ComponentGetParentImageDisplay, METH_VARARGS, (char *)"\n"
		"ComponentGetParentImageDisplay(Gatan::DM::Component const & comp) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ComponentGetParentImageDisplay: Gets the parent image display of the 'comp', if any.\n"
		""},
	 { (char *)"ComponentGetRect", _wrap_ComponentGetRect, METH_VARARGS, (char *)"\n"
		"ComponentGetRect(Gatan::DM::Component const & comp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ComponentGetRect: Gets the rectangle of the annotation.\n"
		""},
	 { (char *)"ComponentGetRectInView", _wrap_ComponentGetRectInView, METH_VARARGS, (char *)"\n"
		"ComponentGetRectInView(Gatan::DM::Component const & comp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ComponentGetRectInView: Gets the rectangle of the annotation.\n"
		""},
	 { (char *)"ComponentGetTagGroup", _wrap_ComponentGetTagGroup, METH_VARARGS, (char *)"\n"
		"ComponentGetTagGroup(Gatan::DM::Component const & annot) -> TagGroup\n"
		"\n"
		"ComponentGetTagGroup: Gets the tag group associated with the annotation.\n"
		""},
	 { (char *)"ComponentGetType", _wrap_ComponentGetType, METH_VARARGS, (char *)"\n"
		"ComponentGetType(Gatan::DM::Component const & annot) -> long\n"
		"\n"
		"ComponentGetType: Gets the type of the annotation.\n"
		""},
	 { (char *)"ComponentIsOfType", _wrap_ComponentIsOfType, METH_VARARGS, (char *)"\n"
		"ComponentIsOfType(Gatan::DM::Component const & annot, long type) -> bool\n"
		"\n"
		"ComponentIsOfType: Gets the type of the annotation.\n"
		""},
	 { (char *)"ComponentIsSelected", _wrap_ComponentIsSelected, METH_VARARGS, (char *)"\n"
		"ComponentIsSelected(Gatan::DM::Component const & comp) -> bool\n"
		"\n"
		"ComponentIsSelected: Returns whether the component is selected.\n"
		""},
	 { (char *)"ComponentIsValid", _wrap_ComponentIsValid, METH_VARARGS, (char *)"\n"
		"ComponentIsValid(Gatan::DM::Component const & annot) -> bool\n"
		"\n"
		"ComponentIsValid: Returns true if 'annot' points to a valid object.\n"
		""},
	 { (char *)"ComponentOffsetControlPoint", _wrap_ComponentOffsetControlPoint, METH_VARARGS, (char *)"\n"
		"ComponentOffsetControlPoint(Gatan::DM::Component const & comp, long loc, float x, float y, long restrict_style)\n"
		"\n"
		"ComponentOffsetControlPoint: Changes the control point 'loc' of 'comp' by '(x,y)' using \n"
		"restrictions specified by 'restrict_style'.\n"
		""},
	 { (char *)"ComponentPositionAroundPoint", _wrap_ComponentPositionAroundPoint, METH_VARARGS, (char *)"\n"
		"ComponentPositionAroundPoint(Gatan::DM::Component const & comp, float new_x, float new_y, float rel_x, float rel_y, bool horz, bool vert)\n"
		"\n"
		"ComponentPositionAroundPoint: Moves the annotation so if 'horz', the 'rel_x' horizontal \n"
		"point in the bounding rect is at 'new_x', and if 'vert', the 'rel_y' vertical point in \n"
		"the bounding rect is at 'new_y'\n"
		""},
	 { (char *)"ComponentRemoveFromParent", _wrap_ComponentRemoveFromParent, METH_VARARGS, (char *)"\n"
		"ComponentRemoveFromParent(Gatan::DM::Component const & comp)\n"
		"\n"
		"ComponentRemoveFromParent: Removes the image document component from its parent.\n"
		""},
	 { (char *)"ComponentSetControlPoint", _wrap_ComponentSetControlPoint, METH_VARARGS, (char *)"\n"
		"ComponentSetControlPoint(Gatan::DM::Component const & comp, long loc, float x, float y, long restrict_style)\n"
		"\n"
		"ComponentSetControlPoint: Sets the control point 'loc' of 'comp' to '(x,y)' using \n"
		"restrictions specified by 'restrict_style'.\n"
		""},
	 { (char *)"ComponentSetDrawingMode", _wrap_ComponentSetDrawingMode, METH_VARARGS, (char *)"\n"
		"ComponentSetDrawingMode(Gatan::DM::Component const & comp, long mode)\n"
		"\n"
		"ComponentSetDrawingMode: Sets the drawing mode of the image document component.\n"
		""},
	 { (char *)"ComponentSetFillMode", _wrap_ComponentSetFillMode, METH_VARARGS, (char *)"\n"
		"ComponentSetFillMode(Gatan::DM::Component const & comp, long mode)\n"
		"\n"
		"ComponentSetFillMode: Sets the fill mode of the image document component.\n"
		""},
	 { (char *)"ComponentSetFontAttributes", _wrap_ComponentSetFontAttributes, METH_VARARGS, (char *)"\n"
		"ComponentSetFontAttributes(Gatan::DM::Component const & comp, long attributes)\n"
		"\n"
		"ComponentSetFontAttributes: Sets the attributes of the component's font.\n"
		""},
	 { (char *)"ComponentSetFontFaceName", _wrap_ComponentSetFontFaceName, METH_VARARGS, (char *)"\n"
		"ComponentSetFontFaceName(Gatan::DM::Component const & comp, Gatan::DM::String const & face_name)\n"
		"\n"
		"ComponentSetFontFaceName: Sets the face name of the component's font.\n"
		""},
	 { (char *)"ComponentSetFontInfo", _wrap_ComponentSetFontInfo, METH_VARARGS, (char *)"\n"
		"ComponentSetFontInfo(Gatan::DM::Component const & comp, Gatan::DM::String const & face_name, long attributes, long size)\n"
		"\n"
		"ComponentSetFontInfo: Sets the font information of the component's font.\n"
		""},
	 { (char *)"ComponentSetFontSize", _wrap_ComponentSetFontSize, METH_VARARGS, (char *)"\n"
		"ComponentSetFontSize(Gatan::DM::Component const & comp, long size)\n"
		"\n"
		"ComponentSetFontSize: Sets the point size of the component's font.\n"
		""},
	 { (char *)"ComponentSetRect", _wrap_ComponentSetRect, METH_VARARGS, (char *)"\n"
		"ComponentSetRect(Gatan::DM::Component const & comp, float top, float left, float bottom, float right)\n"
		"\n"
		"ComponentSetRect: Sets the rectangle of the annotation.\n"
		""},
	 { (char *)"ComponentSetSelected", _wrap_ComponentSetSelected, METH_VARARGS, (char *)"\n"
		"ComponentSetSelected(Gatan::DM::Component const & comp, bool select)\n"
		"\n"
		"ComponentSetSelected: Sets the selection status of the component.\n"
		""},
	 { (char *)"ComponentSetSelectable", _wrap_ComponentSetSelectable, METH_VARARGS, (char *)"\n"
		"ComponentSetSelectable(Gatan::DM::Component const & comp, bool selectable)\n"
		"\n"
		"ComponentSetSelectable: Sets whether the component can be selected.\n"
		""},
	 { (char *)"ComponentTransformCoordinates", _wrap_ComponentTransformCoordinates, METH_VARARGS, (char *)"\n"
		"ComponentTransformCoordinates(Gatan::DM::Component const & comp, float off_x, float off_y, float scale_x, float scale_y)\n"
		"\n"
		"ComponentTransformCoordinates: Transforms the component by the specified transform.\n"
		""},
	 { (char *)"ConjMultiplyPackedByPacked", _wrap_ConjMultiplyPackedByPacked, METH_VARARGS, (char *)"\n"
		"ConjMultiplyPackedByPacked(Image a, Image b)\n"
		"\n"
		"ConjMultiplyPackedByPacked: Conjugate multiply packed image a by packed image b and \n"
		"store the result in b. No data type checking is performed.\n"
		""},
	 { (char *)"ConnectObject", _wrap_ConnectObject, METH_VARARGS, (char *)"\n"
		"ConnectObject(long object, char const * message, char const * ident, Gatan::DM::ScriptObject const & scriptObject, char const * method)\n"
		"\n"
		"ConnectObject: Build the connection with the given object and message under ident.\n"
		""},
	 { (char *)"ContinueCancelDialog", _wrap_ContinueCancelDialog, METH_VARARGS, (char *)"\n"
		"ContinueCancelDialog(char const * prompt) -> bool\n"
		"\n"
		"ContinueCancelDialog: Puts up a dialog with both a Continue button and Cancel button. \n"
		"Returns 1 for Continue and 0 for Cancel.\n"
		""},
	 { (char *)"ControlDown", _wrap_ControlDown, METH_VARARGS, (char *)"\n"
		"ControlDown() -> bool\n"
		"\n"
		"ControlDown: Returns 1 if the control key is down and 0 otherwise.\n"
		""},
	 { (char *)"ConvertImageData", _wrap_ConvertImageData, METH_VARARGS, (char *)"\n"
		"ConvertImageData(Image arg1, Image to)\n"
		"\n"
		"ConvertImageData:\n"
		""},
	 { (char *)"ConvertImageDataSlice_2D", _wrap_ConvertImageDataSlice_2D, METH_VARARGS, (char *)"\n"
		"ConvertImageDataSlice_2D(Image arg1, Image to, long x_l, long y_l, long f_x_0, long f_y_0, long f_x_d, long f_x_s, long f_y_d, long f_y_s, long t_x_0, long t_y_0, long t_x_d, long t_x_s, long t_y_d, long t_y_s)\n"
		"\n"
		"ConvertImageDataSlice_2D:\n"
		""},
	 { (char *)"ConvertInt16ToFloat", _wrap_ConvertInt16ToFloat, METH_VARARGS, (char *)"\n"
		"ConvertInt16ToFloat(Image a, Image b)\n"
		"\n"
		"ConvertInt16ToFloat: Convert the signed 2-byte data in image a to real data and store \n"
		"the result in image b. No data type checking is performed.\n"
		""},
	 { (char *)"ConvertPICTToRGBImage", _wrap_ConvertPICTToRGBImage, METH_VARARGS, (char *)"\n"
		"ConvertPICTToRGBImage(long picture) -> Image\n"
		"\n"
		"ConvertPICTToRGBImage: Convert a PICT stored in a handle to an RGB image.\n"
		""},
	 { (char *)"ConvertToByte", _wrap_ConvertToByte, METH_VARARGS, (char *)"\n"
		"ConvertToByte(Image argument_1)\n"
		"\n"
		"ConvertToByte: Converts the given image to unsigned integer 1-byte data.\n"
		""},
	 { (char *)"ConvertToComplex", _wrap_ConvertToComplex, METH_VARARGS, (char *)"\n"
		"ConvertToComplex(Image argument_1)\n"
		"\n"
		"ConvertToComplex: Converts the given image to complex single precision data.\n"
		""},
	 { (char *)"ConvertToFloat", _wrap_ConvertToFloat, METH_VARARGS, (char *)"\n"
		"ConvertToFloat(Image argument_1)\n"
		"\n"
		"ConvertToFloat: Converts the given image to single precision real data.\n"
		""},
	 { (char *)"ConvertToLong", _wrap_ConvertToLong, METH_VARARGS, (char *)"\n"
		"ConvertToLong(Image argument_1)\n"
		"\n"
		"ConvertToLong: Converts the given image to signed integer 4-byte data.\n"
		""},
	 { (char *)"ConvertToPackedComplex", _wrap_ConvertToPackedComplex, METH_VARARGS, (char *)"\n"
		"ConvertToPackedComplex(Image argument_1)\n"
		"\n"
		"ConvertToPackedComplex: Converts the given image to packed complex data.\n"
		""},
	 { (char *)"ConvertToShort", _wrap_ConvertToShort, METH_VARARGS, (char *)"\n"
		"ConvertToShort(Image argument_1)\n"
		"\n"
		"ConvertToShort: Converts the given image to signed integer 2-byte data.\n"
		""},
	 { (char *)"ConvertUInt8ToFloat", _wrap_ConvertUInt8ToFloat, METH_VARARGS, (char *)"\n"
		"ConvertUInt8ToFloat(Image a, Image b)\n"
		"\n"
		"ConvertUInt8ToFloat: Convert the unsigned 1-byte data in image a to real data and \n"
		"store the result in image b. No data type checking is performed.\n"
		""},
	 { (char *)"ConvertUInt8ToDisplay8", _wrap_ConvertUInt8ToDisplay8, METH_VARARGS, (char *)"\n"
		"ConvertUInt8ToDisplay8(Image src, long top, long left, long bottom, long right, long dst, long rowBytes)\n"
		"\n"
		"ConvertUInt8ToDisplay8: Copy the sub-area of unsigned 1-byte integer image src \n"
		"indicated by [top,left,bottom,right] to dst. The rowBytes parameter indicates the length \n"
		"of the row of dst. To copy to the screen, pass 0 for dst and rowBytes. No data type \n"
		"checking is performed.\n"
		""},
	 { (char *)"Convolution", _wrap_Convolution, METH_VARARGS, (char *)"\n"
		"Convolution(Image source, Image kernel) -> Image\n"
		"\n"
		"Convolution: Creates a new image that is the convolution of the source image with the \n"
		"kernel. The kernel should be less than 7x7.\n"
		""},
	 { (char *)"CopyGWorldCTable", _wrap_CopyGWorldCTable, METH_VARARGS, (char *)"\n"
		"CopyGWorldCTable(Image argument_1) -> long\n"
		"\n"
		"CopyGWorldCTable: Copy the OS Color Table of the image and return it. ( Returns \n"
		"CTabHandle for MacOS, HGLOBAL for Windows ).\n"
		""},
	 { (char *)"CountAllImages", _wrap_CountAllImages, METH_VARARGS, (char *)"\n"
		"CountAllImages() -> long\n"
		"\n"
		"CountAllImages: Returns the number of images.\n"
		""},
	 { (char *)"CountDocumentWindows", _wrap_CountDocumentWindows, METH_VARARGS, (char *)"\n"
		"CountDocumentWindows() -> long\n"
		"\n"
		"CountDocumentWindows: Returns the number of document windows.\n"
		""},
	 { (char *)"CountDocumentWindowsOfType", _wrap_CountDocumentWindowsOfType, METH_VARARGS, (char *)"\n"
		"CountDocumentWindowsOfType(long type) -> long\n"
		"\n"
		"CountDocumentWindowsOfType: Returns the number of document windows with type 'type'.\n"
		""},
	 { (char *)"CountFloatingWindows", _wrap_CountFloatingWindows, METH_VARARGS, (char *)"\n"
		"CountFloatingWindows() -> long\n"
		"\n"
		"CountFloatingWindows: Returns the number of floating windows.\n"
		""},
	 { (char *)"CountImageDocuments", _wrap_CountImageDocuments, METH_VARARGS, (char *)"\n"
		"CountImageDocuments() -> long\n"
		"\n"
		"CountImageDocuments: Returns the number of image documents.\n"
		""},
	 { (char *)"CountImages", _wrap_CountImages, METH_VARARGS, (char *)"\n"
		"CountImages() -> long\n"
		"\n"
		"CountImages: Count the number of images.\n"
		""},
	 { (char *)"CountScreens", _wrap_CountScreens, METH_VARARGS, (char *)"\n"
		"CountScreens() -> long\n"
		"\n"
		"CountScreens: Returns the number of screens.\n"
		""},
	 { (char *)"CountScriptFunctions", _wrap_CountScriptFunctions, METH_VARARGS, (char *)"\n"
		"CountScriptFunctions(char const * fnName) -> long\n"
		"\n"
		"CountScriptFunctions: Returns the number of script functions having name 'fnName'.\n"
		""},
	 { (char *)"CreateBinary1DImage", _wrap_CreateBinary1DImage, METH_VARARGS, (char *)"\n"
		"CreateBinary1DImage(char const * title, long d0) -> Image\n"
		"\n"
		"CreateBinary1DImage: Creates a 1D binary image of size [d0] with the given title.\n"
		""},
	 { (char *)"CreateBinary2DImage", _wrap_CreateBinary2DImage, METH_VARARGS, (char *)"\n"
		"CreateBinary2DImage(char const * title, long d0, long d1) -> Image\n"
		"\n"
		"CreateBinary2DImage: Creates a 2D binary image of size [d0,d1] with the given title.\n"
		""},
	 { (char *)"CreateBinary3DImage", _wrap_CreateBinary3DImage, METH_VARARGS, (char *)"\n"
		"CreateBinary3DImage(char const * title, long d0, long d1, long d2) -> Image\n"
		"\n"
		"CreateBinary3DImage: Creates a 3D binary image of size [d0,d1,d2] with the given title.\n"
		""},
	 { (char *)"CreateByteImage", _wrap_CreateByteImage, METH_VARARGS, (char *)"\n"
		"CreateByteImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateByteImage: Creates a 2D unsigned 1-byte integer image of size [width,height] with \n"
		"the given title.\n"
		""},
	 { (char *)"CreateComplex1DImage", _wrap_CreateComplex1DImage, METH_VARARGS, (char *)"\n"
		"CreateComplex1DImage(char const * title, long bytes, long d0) -> Image\n"
		"\n"
		"CreateComplex1DImage: Creates a 1D complex image of size [d0] with the given title. The \n"
		"bytes parameter can be 8 or 16 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"CreateComplex2DImage", _wrap_CreateComplex2DImage, METH_VARARGS, (char *)"\n"
		"CreateComplex2DImage(char const * title, long bytes, long d0, long d1) -> Image\n"
		"\n"
		"CreateComplex2DImage: Creates a 2D complex image of size [d0,d1] with the given title. \n"
		"The bytes parameter can be 8 or 16 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"CreateComplex3DImage", _wrap_CreateComplex3DImage, METH_VARARGS, (char *)"\n"
		"CreateComplex3DImage(char const * title, long bytes, long d0, long d1, long d2) -> Image\n"
		"\n"
		"CreateComplex3DImage: Creates a 3D complex image of size [d0,d1,d2] with the given \n"
		"title. The bytes parameter can be 8 or 16 for single and double precision floating point \n"
		"numbers.\n"
		""},
	 { (char *)"CreateComplexImage", _wrap_CreateComplexImage, METH_VARARGS, (char *)"\n"
		"CreateComplexImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateComplexImage: Creates a 2D single precision complex image of size [width,height] \n"
		"with the given title.\n"
		""},
	 { (char *)"CreateDirectory", _wrap_CreateDirectory, METH_VARARGS, (char *)"\n"
		"CreateDirectory(Gatan::DM::String const & dir_path)\n"
		"\n"
		"CreateDirectory: Create a folder named fileName.\n"
		""},
	 { (char *)"CreateFile", _wrap_CreateFile, METH_VARARGS, (char *)"\n"
		"CreateFile(Gatan::DM::String const & file_path)\n"
		"\n"
		"CreateFile: Create a file named fileName.\n"
		""},
	 { (char *)"CreateFileForWriting", _wrap_CreateFileForWriting, METH_VARARGS, (char *)"\n"
		"CreateFileForWriting(Gatan::DM::String const & file_path) -> DM_FileReference\n"
		"\n"
		"CreateFileForWriting: Create and open the file for writing. Return the file reference \n"
		"for this file. This call must be balanced with call to CloseFile() with the returned \n"
		"reference number.\n"
		""},
	 { (char *)"CreateFloatImage", _wrap_CreateFloatImage, METH_VARARGS, (char *)"\n"
		"CreateFloatImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateFloatImage: Creates a 2D single precision float image of size [width,height] with \n"
		"the given title.\n"
		""},
	 { (char *)"CreateImageFromDisplay", _wrap_CreateImageFromDisplay, METH_VARARGS, (char *)"\n"
		"CreateImageFromDisplay(Image argument_1) -> Image\n"
		"\n"
		"CreateImageFromDisplay: Convert the display of image to an RGB image.\n"
		""},
	 { (char *)"CreateInteger1DImage", _wrap_CreateInteger1DImage, METH_VARARGS, (char *)"\n"
		"CreateInteger1DImage(char const * title, long bytes, bool isSigned, long d0) -> Image\n"
		"\n"
		"CreateInteger1DImage: Creates a 1D integer image of size [d0] with the given title. The \n"
		"bytes and isSigned parameters specify integer specific attributes of the data.\n"
		""},
	 { (char *)"CreateInteger2DImage", _wrap_CreateInteger2DImage, METH_VARARGS, (char *)"\n"
		"CreateInteger2DImage(char const * title, long bytes, bool isSigned, long d0, long d1) -> Image\n"
		"\n"
		"CreateInteger2DImage: Creates a 2D integer image of size [d0,d1] with the given title. \n"
		"The bytes and isSigned parameters specify integer specific attributes of the data.\n"
		""},
	 { (char *)"CreateInteger3DImage", _wrap_CreateInteger3DImage, METH_VARARGS, (char *)"\n"
		"CreateInteger3DImage(char const * title, long bytes, bool isSigned, long d0, long d1, long d2) -> Image\n"
		"\n"
		"CreateInteger3DImage: Creates a 3D integer image of size [d0,d1,d2] with the given \n"
		"title. The bytes can be 1, 2, or 4 and isSigned can be 1 (true) or 0 (false).\n"
		""},
	 { (char *)"CreateLongImage", _wrap_CreateLongImage, METH_VARARGS, (char *)"\n"
		"CreateLongImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateLongImage: Creates a 2D signed 4-byte integer image of size [width,height] with \n"
		"the given title.\n"
		""},
	 { (char *)"CreateMaskFromAnnotations", _wrap_CreateMaskFromAnnotations, METH_VARARGS, (char *)"\n"
		"CreateMaskFromAnnotations(Gatan::DM::RasterImageDisplay const rdisp, long filter_length, bool is_opaque, bool * has_mask) -> Image\n"
		"\n"
		"CreateMaskFromAnnotations: Creates a 2D binary mask from an image display's annotations.\n"
		""},
	 { (char *)"CreatePackedComplexImage", _wrap_CreatePackedComplexImage, METH_VARARGS, (char *)"\n"
		"CreatePackedComplexImage(char const * title, long width, long height) -> Image\n"
		"CreatePackedComplexImage(char const * title, long data_type, long width, long height) -> Image\n"
		"\n"
		"CreatePackedComplexImage: Creates a 2D packed complex image of size [width,height] with \n"
		"the given title and 8byte complex data (floats).\n"
		""},
	 { (char *)"CreateReal1DImage", _wrap_CreateReal1DImage, METH_VARARGS, (char *)"\n"
		"CreateReal1DImage(char const * title, long bytes, long d0) -> Image\n"
		"\n"
		"CreateReal1DImage: Creates a 1D real image of size [d0] with the given title. The bytes \n"
		"parameter can be 4 or 8 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"CreateReal2DImage", _wrap_CreateReal2DImage, METH_VARARGS, (char *)"\n"
		"CreateReal2DImage(char const * title, long bytes, long d0, long d1) -> Image\n"
		"\n"
		"CreateReal2DImage: Creates a 2D real image of size [d0,d1] with the given title. The \n"
		"bytes parameter can be 4 or 8 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"CreateReal3DImage", _wrap_CreateReal3DImage, METH_VARARGS, (char *)"\n"
		"CreateReal3DImage(char const * title, long bytes, long d0, long d1, long d2) -> Image\n"
		"\n"
		"CreateReal3DImage: Creates a 3D real image of size [d0,d1,d2] with the given title. The \n"
		"bytes parameter can be 4 or 8 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"CreateRGB1DImage", _wrap_CreateRGB1DImage, METH_VARARGS, (char *)"\n"
		"CreateRGB1DImage(char const * title, long bytes, long d0) -> Image\n"
		"\n"
		"CreateRGB1DImage: Creates a 1D RGB image of size [d0] with the given title. The bytes \n"
		"parameter must be 4.\n"
		""},
	 { (char *)"CreateRGB2DImage", _wrap_CreateRGB2DImage, METH_VARARGS, (char *)"\n"
		"CreateRGB2DImage(char const * title, long bytes, long d0, long d1) -> Image\n"
		"\n"
		"CreateRGB2DImage: Creates a 2D RGB image of size [d0,d1] with the given title. The bytes \n"
		"parameter must be 4.\n"
		""},
	 { (char *)"CreateRGB3DImage", _wrap_CreateRGB3DImage, METH_VARARGS, (char *)"\n"
		"CreateRGB3DImage(char const * title, long bytes, long d0, long d1, long d2) -> Image\n"
		"\n"
		"CreateRGB3DImage: Creates a 3D RGB image of size [d0,d1,d2] with the given title. The \n"
		"bytes parameter must be 4.\n"
		""},
	 { (char *)"CreateRGBImage", _wrap_CreateRGBImage, METH_VARARGS, (char *)"\n"
		"CreateRGBImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateRGBImage: Creates a 2D RGB image of size [width,height] with the given title.\n"
		""},
	 { (char *)"CreateRGBImageFromPicture", _wrap_CreateRGBImageFromPicture, METH_VARARGS, (char *)"\n"
		"CreateRGBImageFromPicture(long picture) -> Image\n"
		"\n"
		"CreateRGBImageFromPicture: Create an RGB image by drawing into it with a picture\n"
		""},
	 { (char *)"CreateShortImage", _wrap_CreateShortImage, METH_VARARGS, (char *)"\n"
		"CreateShortImage(char const * title, long width, long height) -> Image\n"
		"\n"
		"CreateShortImage: Creates a 2D signed 2-byte integer image of size [width,height] with \n"
		"the given title.\n"
		""},
	 { (char *)"CrossCorrelate", _wrap_CrossCorrelate, METH_VARARGS, (char *)"\n"
		"CrossCorrelate(Image source1, Image source2) -> Image\n"
		"\n"
		"CrossCorrelate: Return an image which is the result of the cross correlation of source1 \n"
		"and source2.\n"
		""},
	 { (char *)"CrossCorrelation", _wrap_CrossCorrelation, METH_VARARGS, (char *)"\n"
		"CrossCorrelation(Image source1, Image source2) -> Image\n"
		"\n"
		"CrossCorrelation: Return an image which is the result of the cross correlation of \n"
		"source1 and source2.\n"
		""},
	 { (char *)"CrossProduct", _wrap_CrossProduct, METH_VARARGS, (char *)"\n"
		"CrossProduct(Image a, Image b) -> Image\n"
		"\n"
		"CrossProduct: Return the matrix cross product image of matrix images a and b.\n"
		""},
	 { (char *)"CWCloseWindow", _wrap_CWCloseWindow, METH_VARARGS, (char *)"\n"
		"CWCloseWindow(long windowObject)\n"
		"\n"
		"CWCloseWindow: Close a custom window. See the SDK documentation for more information.\n"
		""},
	 { (char *)"CWCreateWindow", _wrap_CWCreateWindow, METH_VARARGS, (char *)"\n"
		"CWCreateWindow(long windowInstance, short top, short left, short bottom, short right) -> long\n"
		"\n"
		"CWCreateWindow: Create a custom window. See the SDK documentation for more information.\n"
		""},
	 { (char *)"CWDeleteWindow", _wrap_CWDeleteWindow, METH_VARARGS, (char *)"\n"
		"CWDeleteWindow(long windowObject)\n"
		"\n"
		"CWDeleteWindow: Delete a custom window. See the SDK documentation for more information.\n"
		""},
	 { (char *)"CWGetWindowPtr", _wrap_CWGetWindowPtr, METH_VARARGS, (char *)"\n"
		"CWGetWindowPtr(long windowObject) -> long\n"
		"\n"
		"CWGetWindowPtr: Get the MacOS WindowPtr from the window. See the SDK documentation for \n"
		"more information.\n"
		""},
	 { (char *)"CWInvalidateWindow", _wrap_CWInvalidateWindow, METH_VARARGS, (char *)"\n"
		"CWInvalidateWindow(long windowObject)\n"
		"\n"
		"CWInvalidateWindow: Invalidate a custom window. See the SDK documentation for more \n"
		"information.\n"
		""},
	 { (char *)"DeallocString", _wrap_DeallocString, METH_VARARGS, (char *)"\n"
		"DeallocString(long string)\n"
		"\n"
		"DeallocString: Deallocates a string used in the script language.\n"
		""},
	 { (char *)"Delay", _wrap_Delay, METH_VARARGS, (char *)"\n"
		"Delay(long argument_1)\n"
		"\n"
		"Delay: Delay for the given number of tick counts.\n"
		""},
	 { (char *)"DeleteDirectory", _wrap_DeleteDirectory, METH_VARARGS, (char *)"\n"
		"DeleteDirectory(Gatan::DM::String const & dir_path)\n"
		"\n"
		"DeleteDirectory: Deletes the folder named dirName.\n"
		""},
	 { (char *)"DeleteFile", _wrap_DeleteFile, METH_VARARGS, (char *)"\n"
		"DeleteFile(Gatan::DM::String const & file_path)\n"
		"\n"
		"DeleteFile: Delete the file.\n"
		""},
	 { (char *)"DeleteImage", _wrap_DeleteImage, METH_VARARGS, (char *)"\n"
		"DeleteImage(Image argument_1)\n"
		"\n"
		"DeleteImage: Close the image without asking the user to save it.\n"
		""},
	 { (char *)"DeleteImageFile", _wrap_DeleteImageFile, METH_VARARGS, (char *)"\n"
		"DeleteImageFile(char const * fileName)\n"
		"\n"
		"DeleteImageFile: Delete the image file.\n"
		""},
	 { (char *)"DestroyPicture", _wrap_DestroyPicture, METH_VARARGS, (char *)"\n"
		"DestroyPicture(long * picture)\n"
		"\n"
		"DestroyPicture: Destroy a picture\n"
		""},
	 { (char *)"DisconnectObject", _wrap_DisconnectObject, METH_VARARGS, (char *)"\n"
		"DisconnectObject(long object, char const * message, char const * ident)\n"
		"\n"
		"DisconnectObject: Break the connection specified by ident for the given object and \n"
		"message.\n"
		""},
	 { (char *)"DisplayAt", _wrap_DisplayAt, METH_VARARGS, (char *)"\n"
		"DisplayAt(Image argument_1, long x, long y)\n"
		"\n"
		"DisplayAt: Display the image's image document if it is not display already and moves the \n"
		"window position to [x,y] screen coordinates.\n"
		""},
	 { (char *)"DisplayImageDocumentWithDialog", _wrap_DisplayImageDocumentWithDialog, METH_VARARGS, (char *)"\n"
		"DisplayImageDocumentWithDialog(Gatan::DM::ImageDocument const & imgDoc, CDialog * dlgPtr, uint32 dlgPosition)\n"
		"\n"
		"DisplayImageDocumentWithDialog: Display the image document with a dialog attached.  The\n"
		"position of the dialog is set by dlgPosition (top=0, bottom=1, left=2, right=3).\n"
		""},
	 { (char *)"DoesClassExist", _wrap_DoesClassExist, METH_VARARGS, (char *)"\n"
		"DoesClassExist(Gatan::DM::String const & dir_path) -> bool\n"
		"\n"
		"DoesClassExist:\n"
		""},
	 { (char *)"DoesDirectoryExist", _wrap_DoesDirectoryExist, METH_VARARGS, (char *)"\n"
		"DoesDirectoryExist(Gatan::DM::String const & dir_path) -> bool\n"
		"\n"
		"DoesDirectoryExist: Returns 'true' if the named directory exists\n"
		""},
	 { (char *)"DoesFileExist", _wrap_DoesFileExist, METH_VARARGS, (char *)"\n"
		"DoesFileExist(Gatan::DM::String const & dir_path) -> bool\n"
		"\n"
		"DoesFileExist: Returns 'true' if the named file exists\n"
		""},
	 { (char *)"DoesFunctionExist", _wrap_DoesFunctionExist, METH_VARARGS, (char *)"\n"
		"DoesFunctionExist(Gatan::DM::String const & dir_path) -> bool\n"
		"\n"
		"DoesFunctionExist: Determines if the given function exists.\n"
		""},
	 { (char *)"DoesImageExist", _wrap_DoesImageExist, METH_VARARGS, (char *)"\n"
		"DoesImageExist(long imageID) -> bool\n"
		"\n"
		"DoesImageExist: Determine if the image with imageID exists and returns 1 if it does; \n"
		"return 0 otherwise.\n"
		""},
	 { (char *)"DoEvents", _wrap_DoEvents, METH_VARARGS, (char *)"\n"
		"DoEvents()\n"
		"\n"
		"DoEvents: Process all pending MacOS events.\n"
		""},
	 { (char *)"EditorWindowAddText", _wrap_EditorWindowAddText, METH_VARARGS, (char *)"\n"
		"EditorWindowAddText(Gatan::DM::Window const & window, Gatan::DM::String const & text)\n"
		"\n"
		"EditorWindowAddText: Appends the text to a editor window.\n"
		""},
	 { (char *)"EditorWindowGetFont", _wrap_EditorWindowGetFont, METH_VARARGS, (char *)"\n"
		"EditorWindowGetFont(Gatan::DM::Window const & window, Gatan::DM::String & face_name, ulong * attributes, ulong * size)\n"
		"\n"
		"EditorWindowGetFont: Gets the font of a script window.\n"
		""},
	 { (char *)"EditorWindowGetText", _wrap_EditorWindowGetText, METH_VARARGS, (char *)"\n"
		"EditorWindowGetText(Gatan::DM::Window const & window) -> Gatan::DM::String\n"
		"\n"
		"EditorWindowGetText: Gets the text in an editor window.\n"
		""},
	 { (char *)"EditorWindowPrint", _wrap_EditorWindowPrint, METH_VARARGS, (char *)"\n"
		"EditorWindowPrint(Gatan::DM::Window const & window) -> bool\n"
		"\n"
		"EditorWindowPrint: Prints the editor window.\n"
		""},
	 { (char *)"EditorWindowSaveToFile", _wrap_EditorWindowSaveToFile, METH_VARARGS, (char *)"\n"
		"EditorWindowSaveToFile(Gatan::DM::Window const & window, Gatan::DM::String const & path)\n"
		"\n"
		"EditorWindowSaveToFile: Saves the editor window to the specified path.\n"
		""},
	 { (char *)"EditorWindowSetFont", _wrap_EditorWindowSetFont, METH_VARARGS, (char *)"\n"
		"EditorWindowSetFont(Gatan::DM::Window const & window, Gatan::DM::String const & face_name, ulong attributes, ulong size)\n"
		"\n"
		"EditorWindowSetFont: Sets the font of a script window.\n"
		""},
	 { (char *)"EditorWindowSetText", _wrap_EditorWindowSetText, METH_VARARGS, (char *)"\n"
		"EditorWindowSetText(Gatan::DM::Window const & window, Gatan::DM::String const & text)\n"
		"\n"
		"EditorWindowSetText: Sets the text in an editor window.\n"
		""},
	 { (char *)"EMBeamShift", _wrap_EMBeamShift, METH_VARARGS, (char *)"\n"
		"EMBeamShift(long xAmount, long yAmount)\n"
		"\n"
		"EMBeamShift: Shift the beam by xAmount, yAmount. The EM Control Plug-in must be \n"
		"currently installed and configured.\n"
		""},
	 { (char *)"EMChangeFocus", _wrap_EMChangeFocus, METH_VARARGS, (char *)"\n"
		"EMChangeFocus(long amount)\n"
		"\n"
		"EMChangeFocus: Change the focus by amount. The EM Control Plug-in must be currently \n"
		"installed and configured.\n"
		""},
	 { (char *)"EMChangeStigmation", _wrap_EMChangeStigmation, METH_VARARGS, (char *)"\n"
		"EMChangeStigmation(long xAmount, long yAmount)\n"
		"\n"
		"EMChangeStigmation: Change the stigmation by xAmount, yAmount. The EM Control Plug-in \n"
		"must be currently installed and configured.\n"
		""},
	 { (char *)"EMChangeTilt", _wrap_EMChangeTilt, METH_VARARGS, (char *)"\n"
		"EMChangeTilt(long xAmount, long yAmount)\n"
		"\n"
		"EMChangeTilt: Change the tilt by xAmount, yAmount. The EM Control Plug-in must be \n"
		"currently installed and configured.\n"
		""},
	 { (char *)"EMCloseCommunication", _wrap_EMCloseCommunication, METH_VARARGS, (char *)"\n"
		"EMCloseCommunication()\n"
		"\n"
		"EMCloseCommunication: Close communication to the microscope. The EM Control Plug-in must \n"
		"be currently installed and configured.\n"
		""},
	 { (char *)"EMImageShift", _wrap_EMImageShift, METH_VARARGS, (char *)"\n"
		"EMImageShift(long xAmount, long yAmount)\n"
		"\n"
		"EMImageShift: Shift the image by xAmount, yAmount. The EM Control Plug-in must be \n"
		"currently installed and configured.\n"
		""},
	 { (char *)"EMLinkControlFunctions", _wrap_EMLinkControlFunctions, METH_VARARGS, (char *)"\n"
		"EMLinkControlFunctions(void * functions)\n"
		"\n"
		"EMLinkControlFunctions: Establish link between microscope control functions and the \n"
		"application. The EM Control Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"EMPrepareImageShift", _wrap_EMPrepareImageShift, METH_VARARGS, (char *)"\n"
		"EMPrepareImageShift()\n"
		"\n"
		"EMPrepareImageShift: Prepare image shift. Call this before a sequence of image shift \n"
		"changes. The EM Control Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"EMPrepareShift", _wrap_EMPrepareShift, METH_VARARGS, (char *)"\n"
		"EMPrepareShift()\n"
		"\n"
		"EMPrepareShift: Prepare beam shift. Call this before a sequence of beam shift changes. \n"
		"The EM Control Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"EMPrepareStigmation", _wrap_EMPrepareStigmation, METH_VARARGS, (char *)"\n"
		"EMPrepareStigmation()\n"
		"\n"
		"EMPrepareStigmation: Prepare stigmation. Call this before a sequence of stigmation \n"
		"changes. The EM Control Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"EMPrepareTilt", _wrap_EMPrepareTilt, METH_VARARGS, (char *)"\n"
		"EMPrepareTilt()\n"
		"\n"
		"EMPrepareTilt: Prepare tilt. Call this before a sequence of tilt changes. The EM Control \n"
		"Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"EMSetupCommunication", _wrap_EMSetupCommunication, METH_VARARGS, (char *)"\n"
		"EMSetupCommunication()\n"
		"\n"
		"EMSetupCommunication: Setup communication with the microscope. The EM Control Plug-in \n"
		"must be currently installed and configured.\n"
		""},
	 { (char *)"EMUnlinkControlFunctions", _wrap_EMUnlinkControlFunctions, METH_VARARGS, (char *)"\n"
		"EMUnlinkControlFunctions()\n"
		"\n"
		"EMUnlinkControlFunctions: Break link between microscope control functions and the \n"
		"application. The EM Control Plug-in must be currently installed and configured.\n"
		""},
	 { (char *)"ErrorDialog", _wrap_ErrorDialog, METH_VARARGS, (char *)"\n"
		"ErrorDialog(short error)\n"
		"\n"
		"ErrorDialog: Puts up a dialog explaining the application error.\n"
		""},
	 { (char *)"ExecuteScriptFile", _wrap_ExecuteScriptFile, METH_VARARGS, (char *)"\n"
		"ExecuteScriptFile(char const * fileName, ulong script_index) -> double\n"
		"ExecuteScriptFile(char const * fileName) -> double\n"
		"\n"
		"ExecuteScriptFile: Executes the script file indicated by fileName and returns the exit \n"
		"value of that script.  A script may specify a specific exit value by exiting with the \n"
		"exit(n) function.  If a script does not use the exit() function the exit value will be 0.\n"
		""},
	 { (char *)"ExecuteScriptString", _wrap_ExecuteScriptString, METH_VARARGS, (char *)"\n"
		"ExecuteScriptString(Gatan::DM::String const & text) -> double\n"
		"\n"
		"ExecuteScriptString: Executes the script text and returns the exit value of that script. \n"
		" A script may specify a specific exit value by exiting with the exit(n) function.  If a \n"
		"script does not use the exit() function the exit value will be 0.\n"
		""},
	 { (char *)"Extract2D_Linear", _wrap_Extract2D_Linear, METH_VARARGS, (char *)"\n"
		"Extract2D_Linear(Image arg1, Image to, long extract_style, double x_start, double y_start, double x_scale_0, double y_scale_0, double x_scale_1, double y_scale_1)\n"
		"\n"
		"Extract2D_Linear:\n"
		""},
	 { (char *)"FFT", _wrap_FFT, METH_VARARGS, (char *)"\n"
		"FFT(Image source) -> Image\n"
		"\n"
		"FFT: Creates a new complex 8-byte image from the FFT of the complex image source.\n"
		""},
	 { (char *)"FindFrontImage", _wrap_FindFrontImage, METH_VARARGS, (char *)"\n"
		"FindFrontImage() -> Image\n"
		"\n"
		"FindFrontImage: Returns the front image. Doesn't throw exceptions.\n"
		""},
	 { (char *)"FindFunctionBySignature", _wrap_FindFunctionBySignature, METH_VARARGS, (char *)"\n"
		"FindFunctionBySignature(char_range const & signature) -> Gatan::DM::Function\n"
		"FindFunctionBySignature(char_range const & name, char_range const & signature) -> Gatan::DM::Function\n"
		"\n"
		"FindFunctionBySignature: Looks for a function that matches the given signature.\n"
		""},
	 { (char *)"FindImageByID", _wrap_FindImageByID, METH_VARARGS, (char *)"\n"
		"FindImageByID(long id) -> Image\n"
		"\n"
		"FindImageByID: Returns the image having the given id, or an invalid image of no image \n"
		"has that id.\n"
		""},
	 { (char *)"FindImageByIndex", _wrap_FindImageByIndex, METH_VARARGS, (char *)"\n"
		"FindImageByIndex(long index) -> Image\n"
		"\n"
		"FindImageByIndex: Returns the 'index'th image.\n"
		""},
	 { (char *)"FindImageByLabel", _wrap_FindImageByLabel, METH_VARARGS, (char *)"\n"
		"FindImageByLabel(char const * label) -> Image\n"
		"\n"
		"FindImageByLabel: Returns the image having the given label, or an invalid image if no \n"
		"such image exists.\n"
		""},
	 { (char *)"FindImageByName", _wrap_FindImageByName, METH_VARARGS, (char *)"\n"
		"FindImageByName(char const * name) -> Image\n"
		"\n"
		"FindImageByName: Returns the image having the given name, or an invalid image of no \n"
		"image has that name.\n"
		""},
	 { (char *)"FindLike", _wrap_FindLike, METH_VARARGS, (char *)"\n"
		"FindLike(char const * name, long width, long height, short dataType) -> Image\n"
		"\n"
		"FindLike: Look for an image with the given name, width, height, and dataType. Return it \n"
		"if found.\n"
		""},
	 { (char *)"FindNextImage", _wrap_FindNextImage, METH_VARARGS, (char *)"\n"
		"FindNextImage(Image argument_1) -> Image\n"
		"\n"
		"FindNextImage: Find the next image.\n"
		""},
	 { (char *)"FindReferenceImage", _wrap_FindReferenceImage, METH_VARARGS, (char *)"\n"
		"FindReferenceImage(char const * name, short dataType, long width, long height) -> Image\n"
		"\n"
		"FindReferenceImage: Look for an image with the given name, width, height, and dataType. \n"
		"If it's found, return it. If it's not found, try to load it from disk.\n"
		""},
	 { (char *)"FirstImage", _wrap_FirstImage, METH_VARARGS, (char *)"\n"
		"FirstImage() -> Image\n"
		"\n"
		"FirstImage: Find the first image.\n"
		""},
	 { (char *)"FlipHorizontal", _wrap_FlipHorizontal, METH_VARARGS, (char *)"\n"
		"FlipHorizontal(Image argument_1)\n"
		"\n"
		"FlipHorizontal: Flips the image horizontally.\n"
		""},
	 { (char *)"FlipVertical", _wrap_FlipVertical, METH_VARARGS, (char *)"\n"
		"FlipVertical(Image argument_1)\n"
		"\n"
		"FlipVertical: Flips the image vertically.\n"
		""},
	 { (char *)"FloatingModelessDialog", _wrap_FloatingModelessDialog, METH_VARARGS, (char *)"\n"
		"FloatingModelessDialog(char const * prompt, char const * buttonName, long semaphore)\n"
		"\n"
		"FloatingModelessDialog: Present a floating window with the prompt and buttonName. When \n"
		"the user presses the button, the semaphore will be cleared. This function can only be \n"
		"used in the background.\n"
		""},
	 { (char *)"fngetkey", _wrap_fngetkey, METH_VARARGS, (char *)"\n"
		"fngetkey() -> short\n"
		"\n"
		"fngetkey: Returns the key that was last pressed.\n"
		""},
	 { (char *)"ForceSurvey", _wrap_ForceSurvey, METH_VARARGS, (char *)"\n"
		"ForceSurvey(Image argument_1)\n"
		"\n"
		"ForceSurvey: Cause an immediate survey of the image.\n"
		""},
	 { (char *)"FreeSemaphore", _wrap_FreeSemaphore, METH_VARARGS, (char *)"\n"
		"FreeSemaphore(long argument_1)\n"
		"\n"
		"FreeSemaphore: Free the semaphore. Used only with background processing.\n"
		""},
	 { (char *)"FunctionCountParameters", _wrap_FunctionCountParameters, METH_VARARGS, (char *)"\n"
		"FunctionCountParameters(Gatan::DM::Function const & func) -> ulong\n"
		"\n"
		"FunctionCountParameters: Returns the number of parameters of the function.\n"
		""},
	 { (char *)"FunctionGenerateStub", _wrap_FunctionGenerateStub, METH_VARARGS, (char *)"\n"
		"FunctionGenerateStub(Gatan::DM::Function const & func, bool include_body, ulong version) -> Gatan::DM::String\n"
		"\n"
		"FunctionGenerateStub: Generates a stub function in the format specified by version.\n"
		""},
	 { (char *)"FunctionIsValid", _wrap_FunctionIsValid, METH_VARARGS, (char *)"\n"
		"FunctionIsValid(Gatan::DM::Function const & func) -> bool\n"
		"\n"
		"FunctionIsValid: Returns true if 'func' is a valid object.\n"
		""},
	 { (char *)"Get1DSize", _wrap_Get1DSize, METH_VARARGS, (char *)"\n"
		"Get1DSize(Image argument_1, long * d0)\n"
		"\n"
		"Get1DSize: Store the length of the 1D image into the d0 variable.\n"
		""},
	 { (char *)"Get2DSize", _wrap_Get2DSize, METH_VARARGS, (char *)"\n"
		"Get2DSize(Image argument_1, long * d0, long * d1)\n"
		"\n"
		"Get2DSize: Store the width and height of the 2D image into the d0 and d1 variables.\n"
		""},
	 { (char *)"Get3DSize", _wrap_Get3DSize, METH_VARARGS, (char *)"\n"
		"Get3DSize(Image argument_1, long * d0, long * d1, long * d2)\n"
		"\n"
		"Get3DSize: Store the x,y, and z sizes of the 3D image into the d0, d1, and d2 variables.\n"
		""},
	 { (char *)"WindowGetPlatformImplementation", _wrap_WindowGetPlatformImplementation, METH_VARARGS, (char *)"\n"
		"WindowGetPlatformImplementation(Gatan::DM::Window const & window) -> ULONG_PTR\n"
		"\n"
		"WindowGetPlatformImplementation: gets the window handle\n"
		""},
	 { (char *)"GetBoolean", _wrap_GetBoolean, METH_VARARGS, (char *)"\n"
		"GetBoolean(char const * prompt, bool initalValue, bool * result) -> bool\n"
		"\n"
		"GetBoolean: Puts up a dialog with the given prompt and allows the user to enter Boolean. \n"
		"The initial value is passed as a parameter and the result in stored in result. Returns 1 \n"
		"for OK and 0 for Cancel.\n"
		""},
	 { (char *)"GetCalibrationDialog", _wrap_GetCalibrationDialog, METH_VARARGS, (char *)"\n"
		"GetCalibrationDialog(float aw, float ah, float * xs, float * ys, char const * initialUnitString, char * unitString) -> bool\n"
		"\n"
		"GetCalibrationDialog: Present the calibration dialog to the user. The calibrating pixel \n"
		"dimensions are passed as the [aw,ah] parameters. The resulting calibration is stored into \n"
		"the [xs,ys] parameters. The initial unit string is passed in and the resulting unit \n"
		"string is copied into the unitString buffer.Returns 1 for OK and 0 for Cancel.\n"
		""},
	 { (char *)"GetCLUT", _wrap_GetCLUT, METH_VARARGS, (char *)"\n"
		"GetCLUT(Image argument_1) -> Image\n"
		"\n"
		"GetCLUT: Return the image's CLUT as a 256x1 RGB image.\n"
		""},
	 { (char *)"GetDataPtr", _wrap_GetDataPtr, METH_VARARGS, (char *)"\n"
		"GetDataPtr(Image argument_1) -> long\n"
		"\n"
		"GetDataPtr: Return a pointer to the actual image data.  If the image data is changed, \n"
		"the function DMImageDataChanged() must be called to ensure proper updating, etc. This \n"
		"call must be balanced with a call to ReleaseDataPtr().\n"
		""},
	 { (char *)"GetDataType", _wrap_GetDataType, METH_VARARGS, (char *)"\n"
		"GetDataType(Image argument_1) -> short\n"
		"\n"
		"GetDataType: Return the enumerated data type of the image.\n"
		""},
	 { (char *)"GetDate", _wrap_GetDate, METH_VARARGS, (char *)"\n"
		"GetDate(long dateFormat, char * buffer, long buffer_length)\n"
		"\n"
		"GetDate: Return a string representing the current date in the date format indicated by \n"
		"dateFormat. The dateFormat parameter can be 0=short, 1=long, 2=abbreviated.\n"
		""},
	 { (char *)"GetDirectoryDialog", _wrap_GetDirectoryDialog, METH_VARARGS, (char *)"\n"
		"GetDirectoryDialog(char * dirName, long buff_length) -> bool\n"
		"GetDirectoryDialog(Gatan::DM::String const & prompt, Gatan::DM::String const & init_path, Gatan::DM::String & dirName) -> bool\n"
		"\n"
		"GetDirectoryDialog: Puts up the GetDirectory dialog and stores the path of the chosen \n"
		"directory in 'dirName'\n"
		""},
	 { (char *)"GetDisplayAsImage", _wrap_GetDisplayAsImage, METH_VARARGS, (char *)"\n"
		"GetDisplayAsImage(Image argument_1) -> Image\n"
		"\n"
		"GetDisplayAsImage: Convert the display of image to an RGB image.\n"
		""},
	 { (char *)"GetDocumentWindow", _wrap_GetDocumentWindow, METH_VARARGS, (char *)"\n"
		"GetDocumentWindow(long index) -> Gatan::DM::Window\n"
		"\n"
		"GetDocumentWindow: Gets the 'index'th document window.\n"
		""},
	 { (char *)"GetDocumentWindowByTitle", _wrap_GetDocumentWindowByTitle, METH_VARARGS, (char *)"\n"
		"GetDocumentWindowByTitle(Gatan::DM::String const & name) -> Gatan::DM::Window\n"
		"\n"
		"GetDocumentWindowByTitle: Gets the document window named 'name'.\n"
		""},
	 { (char *)"GetEstimatedMinMax", _wrap_GetEstimatedMinMax, METH_VARARGS, (char *)"\n"
		"GetEstimatedMinMax(Image argument_1, float * minPtr, float * maxPtr)\n"
		"\n"
		"GetEstimatedMinMax: Store the current estimated minimum and maximum of the image into \n"
		"the minPtr and maxPtr variables.\n"
		""},
	 { (char *)"GetException", _wrap_GetException, METH_VARARGS, (char *)"\n"
		"GetException(short * error, long * context)\n"
		"\n"
		"GetException: Store the current exception into the error and context variables.\n"
		""},
	 { (char *)"GetExceptionDescription", _wrap_GetExceptionDescription, METH_VARARGS, (char *)"\n"
		"GetExceptionDescription() -> Gatan::DM::String\n"
		"\n"
		"GetExceptionDescription: Return the message that would be displayed in the error dialog \n"
		"box for an exception as a string.\n"
		""},
	 { (char *)"GetExceptionString", _wrap_GetExceptionString, METH_VARARGS, (char *)"\n"
		"GetExceptionString(char * dst)\n"
		"\n"
		"GetExceptionString: Copies the message that would displayed in the error dialog box for \n"
		"an exception into dst.\n"
		""},
	 { (char *)"GetFilesInDirectory", _wrap_GetFilesInDirectory, METH_VARARGS, (char *)"\n"
		"GetFilesInDirectory(Gatan::DM::String const & path, ulong search_flags) -> TagGroup\n"
		"\n"
		"GetFilesInDirectory: Returns a tag group containing a list of the file names in the \n"
		"directory 'dir_path'\n"
		""},
	 { (char *)"GetFloatingWindow", _wrap_GetFloatingWindow, METH_VARARGS, (char *)"\n"
		"GetFloatingWindow(long index) -> Gatan::DM::Window\n"
		"\n"
		"GetFloatingWindow: Gets the 'index'th floating window.\n"
		""},
	 { (char *)"GetFourImages", _wrap_GetFourImages, METH_VARARGS, (char *)"\n"
		"GetFourImages(char const * title, Image image1, Image image2, Image image3, Image image4) -> bool\n"
		"\n"
		"GetFourImages: Puts up a dialog and allows the user to choose four images.  Returns 1 \n"
		"for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetFourImagesWithPrompt", _wrap_GetFourImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetFourImagesWithPrompt(char const * prompt, char const * title, Image image1, Image image2, Image image3, Image image4) -> bool\n"
		"\n"
		"GetFourImagesWithPrompt: Puts up a dialog with the given prompt and allows the user to \n"
		"choose four images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetFourLabeledImagesWithPrompt", _wrap_GetFourLabeledImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetFourLabeledImagesWithPrompt(char const * prompt, char const * title, char const * label1, Image image1, char const * label2, Image image2, char const * label3, Image image3, char const * label4, Image image4) -> bool\n"
		"\n"
		"GetFourLabeledImagesWithPrompt: Puts up a dialog with the given prompt and allows the \n"
		"user to choose four images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetFrontImage", _wrap_GetFrontImage, METH_VARARGS, (char *)"\n"
		"GetFrontImage() -> Image\n"
		"GetFrontImage(Image argument_1) -> bool\n"
		"\n"
		"GetFrontImage: Return the foremost image.\n"
		""},
	 { (char *)"GetFrontImageDocument", _wrap_GetFrontImageDocument, METH_VARARGS, (char *)"\n"
		"GetFrontImageDocument() -> Gatan::DM::ImageDocument\n"
		"\n"
		"GetFrontImageDocument: Returns the front image document.\n"
		""},
	 { (char *)"GetFrontImageID", _wrap_GetFrontImageID, METH_VARARGS, (char *)"\n"
		"GetFrontImageID() -> long\n"
		"\n"
		"GetFrontImageID: Return the id of the front most image window.\n"
		""},
	 { (char *)"GetImageDataSeed", _wrap_GetImageDataSeed, METH_VARARGS, (char *)"\n"
		"GetImageDataSeed(Image argument_1) -> long\n"
		"\n"
		"GetImageDataSeed: Return a seed representing the data of the image. Each time the image \n"
		"data changes, the seed will change.\n"
		""},
	 { (char *)"GetImageDocument", _wrap_GetImageDocument, METH_VARARGS, (char *)"\n"
		"GetImageDocument(long position) -> Gatan::DM::ImageDocument\n"
		"\n"
		"GetImageDocument: Returns the image document by position with the application.\n"
		""},
	 { (char *)"GetImageDocumentByID", _wrap_GetImageDocumentByID, METH_VARARGS, (char *)"\n"
		"GetImageDocumentByID(long id) -> Gatan::DM::ImageDocument\n"
		"\n"
		"GetImageDocumentByID: Returns the image document whose id is 'id'.\n"
		""},
	 { (char *)"GetImageDocumentByPath", _wrap_GetImageDocumentByPath, METH_VARARGS, (char *)"\n"
		"GetImageDocumentByPath(Gatan::DM::String const & path) -> Gatan::DM::ImageDocument\n"
		"\n"
		"GetImageDocumentByID: Returns the image document whose id is 'id'.\n"
		""},
	 { (char *)"GetImageFromID", _wrap_GetImageFromID, METH_VARARGS, (char *)"\n"
		"GetImageFromID(Image argument_1, long imageID) -> bool\n"
		"GetImageFromID(long imageID) -> Image\n"
		"\n"
		"GetImageFromID: Store the image corresponding the imageID into the image variable. \n"
		"Return 1 if one is found; return 0 otherwise.\n"
		""},
	 { (char *)"GetImageID", _wrap_GetImageID, METH_VARARGS, (char *)"\n"
		"GetImageID(Image argument_1) -> long\n"
		"\n"
		"GetImageID: Return the id of the image.\n"
		""},
	 { (char *)"GetImageWindow", _wrap_GetImageWindow, METH_VARARGS, (char *)"\n"
		"GetImageWindow(Image argument_1) -> long\n"
		"\n"
		"GetImageWindow: Return the MacOS window associated with the image.\n"
		""},
	 { (char *)"GetInteger", _wrap_GetInteger, METH_VARARGS, (char *)"\n"
		"GetInteger(char const * prompt, long initalValue, long * result) -> bool\n"
		"\n"
		"GetInteger: Puts up a dialog with the given prompt and allows the user to enter an \n"
		"integer. The initial value is passed as a parameter and the result in stored in result. \n"
		"Returns 1 for OK and 0 for Cancel.\n"
		""},
	 { (char *)"GetInversionMode", _wrap_GetInversionMode, METH_VARARGS, (char *)"\n"
		"GetInversionMode(Image argument_1) -> bool\n"
		"\n"
		"GetInversionMode: Return the contrast inversion mode of the image (1=inverted, 0=not \n"
		"inverted).\n"
		""},
	 { (char *)"GetLabel", _wrap_GetLabel, METH_VARARGS, (char *)"\n"
		"GetLabel(Image argument_1) -> Gatan::DM::String\n"
		"GetLabel(Image argument_1, char * buffer)\n"
		"\n"
		"GetLabel: Return the image label of the image.\n"
		""},
	 { (char *)"GetLimits", _wrap_GetLimits, METH_VARARGS, (char *)"\n"
		"GetLimits(Image argument_1, float * lowPtr, float * highPtr)\n"
		"\n"
		"GetLimits: Stores display limits into the lowPtr and highPtr variables.\n"
		""},
	 { (char *)"GetMaximalDocumentWindowRect", _wrap_GetMaximalDocumentWindowRect, METH_VARARGS, (char *)"\n"
		"GetMaximalDocumentWindowRect(long options, long * top, long * left, long * bottom, long * right)\n"
		"\n"
		"GetMaximalDocumentWindowRect: Gets the bounds of the content region of the largest \n"
		"document window.\n"
		""},
	 { (char *)"GetName", _wrap_GetName, METH_VARARGS, (char *)"\n"
		"GetName(Image argument_1) -> Gatan::DM::String\n"
		"GetName(Image argument_1, char * buffer)\n"
		"\n"
		"GetName: Return the name of the image's image document.\n"
		""},
	 { (char *)"GetNamedImage", _wrap_GetNamedImage, METH_VARARGS, (char *)"\n"
		"GetNamedImage(char const * name) -> Image\n"
		"GetNamedImage(Image argument_1, char const * name) -> bool\n"
		"\n"
		"GetNamedImage: Return the image with the image document name.\n"
		""},
	 { (char *)"GetNextImageID", _wrap_GetNextImageID, METH_VARARGS, (char *)"\n"
		"GetNextImageID(long id) -> long\n"
		"\n"
		"GetNextImageID: Return the id of the image window following the image with the given id.\n"
		""},
	 { (char *)"GetNthDocumentWindowOfType", _wrap_GetNthDocumentWindowOfType, METH_VARARGS, (char *)"\n"
		"GetNthDocumentWindowOfType(long type, long index) -> Gatan::DM::Window\n"
		"\n"
		"GetNthDocumentWindowOfType: Returns the 'index'th document window of type 'type'.\n"
		""},
	 { (char *)"GetNthImageID", _wrap_GetNthImageID, METH_VARARGS, (char *)"\n"
		"GetNthImageID(long n) -> long\n"
		"\n"
		"GetNthImageID: Return the id of the nth image (number from 0). The images are in no \n"
		"particular order.\n"
		""},
	 { (char *)"GetNumber", _wrap_GetNumber, METH_VARARGS, (char *)"\n"
		"GetNumber(char const * prompt, float initalValue, float * result) -> bool\n"
		"\n"
		"GetNumber: Puts up a dialog with the given prompt and allows the user to enter a number. \n"
		"The initial value is passed as a parameter and the result in stored in result. Returns 1 \n"
		"for OK and 0 for Cancel.\n"
		""},
	 { (char *)"GetOneImage", _wrap_GetOneImage, METH_VARARGS, (char *)"\n"
		"GetOneImage(char const * title, Image image1) -> bool\n"
		"\n"
		"GetOneImage: Puts up a dialog and allows the user to choose an image.  Returns 1 for Ok \n"
		"and 0 for Cancel.\n"
		""},
	 { (char *)"GetOneImageWithPrompt", _wrap_GetOneImageWithPrompt, METH_VARARGS, (char *)"\n"
		"GetOneImageWithPrompt(char const * prompt, char const * title, Image image1) -> bool\n"
		"\n"
		"GetOneImageWithPrompt: Puts up a dialog and allows the user to choose an image.  Returns \n"
		"1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetOneLabeledImageWithPrompt", _wrap_GetOneLabeledImageWithPrompt, METH_VARARGS, (char *)"\n"
		"GetOneLabeledImageWithPrompt(char const * prompt, char const * title, char const * label1, Image image1) -> bool\n"
		"\n"
		"GetOneLabeledImageWithPrompt: Puts up a dialog and allows the user to choose an image.  \n"
		"Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetOrigin", _wrap_GetOrigin, METH_VARARGS, (char *)"\n"
		"GetOrigin(Image argument_1, float * x, float * y)\n"
		"\n"
		"GetOrigin: Store the origin of image into the x and y variables. The origin is in the \n"
		"same units as scale.\n"
		""},
	 { (char *)"GetOSTickCount", _wrap_GetOSTickCount, METH_VARARGS, (char *)"\n"
		"GetOSTickCount() -> uint32\n"
		"\n"
		"GetOSTickCount: Return a tick count appropriate for the operating system.\n"
		""},
	 { (char *)"GetOSTicksPerSecond", _wrap_GetOSTicksPerSecond, METH_VARARGS, (char *)"\n"
		"GetOSTicksPerSecond() -> uint32\n"
		"\n"
		"GetOSTicksPerSecond: Return the number of ticks per second of a tick count appropriate \n"
		"for the operating system.\n"
		""},
	 { (char *)"GetPackageTags", _wrap_GetPackageTags, METH_VARARGS, (char *)"\n"
		"GetPackageTags(char const * identifier) -> TagGroup\n"
		"\n"
		"GetPackageTags: Return the tags specified by identifier. The identifier is used to \n"
		"identify tags loaded with a specific package.\n"
		""},
	 { (char *)"GetPersistentTagGroup", _wrap_GetPersistentTagGroup, METH_VARARGS, (char *)"\n"
		"GetPersistentTagGroup() -> TagGroup\n"
		"\n"
		"GetPersistentTagGroup: Gets the persistent tag group.\n"
		""},
	 { (char *)"GetUserPersistentTagGroup", _wrap_GetUserPersistentTagGroup, METH_VARARGS, (char *)"\n"
		"GetUserPersistentTagGroup() -> TagGroup\n"
		"\n"
		"GetPersistentTagGroup: Gets the persistent tag group.\n"
		""},
	 { (char *)"GetPixel", _wrap_GetPixel, METH_VARARGS, (char *)"\n"
		"GetPixel(Image argument_1, long x, long y) -> double\n"
		"\n"
		"GetPixel: Gets the value of the pixel in the image at [x,y].\n"
		""},
	 { (char *)"GetPlatformInfo", _wrap_GetPlatformInfo, METH_VARARGS, (char *)"\n"
		"GetPlatformInfo(long info) -> long\n"
		"\n"
		"GetPlatformInfo: Return platform info. info=1 is general platform (1=MacOS,2=Win32,3=Windows64).\n"
		""},
	 { (char *)"GetRawSize", _wrap_GetRawSize, METH_VARARGS, (char *)"\n"
		"GetRawSize(Image argument_1) -> long\n"
		"\n"
		"GetRawSize: Return the total size of the image data of the image.\n"
		""},
	 { (char *)"GetRawStreamPos", _wrap_GetRawStreamPos, METH_VARARGS, (char *)"\n"
		"GetRawStreamPos(long rawStream, long * pos)\n"
		"\n"
		"GetRawStreamPos: Store the current position in rawStream into the pos variable.\n"
		""},
	 { (char *)"GetRawStreamSize", _wrap_GetRawStreamSize, METH_VARARGS, (char *)"\n"
		"GetRawStreamSize(long rawStream, long * size)\n"
		"\n"
		"GetRawStreamSize: Store the length of rawStream into the size variable.\n"
		""},
	 { (char *)"GetResultsWindow", _wrap_GetResultsWindow, METH_VARARGS, (char *)"\n"
		"GetResultsWindow(bool open) -> Gatan::DM::Window\n"
		"\n"
		"GetResultsWindow: Gets the results window.  If the window is not open, and 'open' is \n"
		"true, the results window is opened.\n"
		""},
	 { (char *)"GetROIFromID", _wrap_GetROIFromID, METH_VARARGS, (char *)"\n"
		"GetROIFromID(long id) -> Gatan::DM::ROI\n"
		"\n"
		"GetROIFromID: Returns the region of interest associated with the ID or NULL if it does \n"
		"not exist.\n"
		""},
	 { (char *)"GetScale", _wrap_GetScale, METH_VARARGS, (char *)"\n"
		"GetScale(Image argument_1, float * x, float * y)\n"
		"\n"
		"GetScale: Store the scale of image into the x and y variables.\n"
		""},
	 { (char *)"GetScreenSize", _wrap_GetScreenSize, METH_VARARGS, (char *)"\n"
		"GetScreenSize(long * width, long * height)\n"
		"\n"
		"GetScreenSize: Store the size of the screen into the width and height variables.\n"
		""},
	 { (char *)"GetScriptObjectFromID", _wrap_GetScriptObjectFromID, METH_VARARGS, (char *)"\n"
		"GetScriptObjectFromID(long id) -> Gatan::DM::ScriptObject\n"
		"\n"
		"GetScriptObjectFromID: Returns the script object associated with the ID or NULL if the \n"
		"object does not exist.\n"
		""},
	 { (char *)"GetSelection", _wrap_GetSelection, METH_VARARGS, (char *)"\n"
		"GetSelection(Image argument_1, long * top, long * left, long * bottom, long * right) -> bool\n"
		"\n"
		"GetSelection: Stores the coordinates (in pixels) of the image's selection into the top, \n"
		"left, bottom, and right variables. Returns 1 if there was a selection and 0 if there \n"
		"wasn't.\n"
		""},
	 { (char *)"GetSize", _wrap_GetSize, METH_VARARGS, (char *)"\n"
		"GetSize(Image argument_1, long * width, long * height)\n"
		"\n"
		"GetSize: Store the width and height of the 2D image into the width and height variables.\n"
		""},
	 { (char *)"GetSpecialDirectory", _wrap_GetSpecialDirectory, METH_VARARGS, (char *)"\n"
		"GetSpecialDirectory(long index) -> Gatan::DM::String\n"
		"\n"
		"GetSpecialDirectory: Return one of the special directories. 0=current directory, \n"
		"1=executable directory.\n"
		""},
	 { (char *)"GetSpecialWindow", _wrap_GetSpecialWindow, METH_VARARGS, (char *)"\n"
		"GetSpecialWindow(long index) -> long\n"
		"\n"
		"GetSpecialWindow: Return one of the special windows. On Windows, 0=frame window, \n"
		"1=top-most dialog.\n"
		""},
	 { (char *)"GetString", _wrap_GetString, METH_VARARGS, (char *)"\n"
		"GetString(char const * prompt, char const * initalValue, char * result) -> bool\n"
		"\n"
		"GetString: Puts up a dialog with the given prompt and allows the user to enter a string. \n"
		"The initial value is passed as a parameter and the result in stored in result. Returns 1 \n"
		"for OK and 0 for Cancel.\n"
		""},
	 { (char *)"GetSurvey", _wrap_GetSurvey, METH_VARARGS, (char *)"\n"
		"GetSurvey(Image argument_1) -> bool\n"
		"\n"
		"GetSurvey: Return 1 if the survey is on; return 0 otherwise.\n"
		""},
	 { (char *)"GetThreeImages", _wrap_GetThreeImages, METH_VARARGS, (char *)"\n"
		"GetThreeImages(char const * title, Image image1, Image image2, Image image3) -> bool\n"
		"\n"
		"GetThreeImages: Puts up a dialog and allows the user to choose three images.  Returns 1 \n"
		"for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetThreeImagesWithPrompt", _wrap_GetThreeImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetThreeImagesWithPrompt(char const * prompt, char const * title, Image image1, Image image2, Image image3) -> bool\n"
		"\n"
		"GetThreeImagesWithPrompt: Puts up a dialog with the given prompt and allows the user to \n"
		"choose three images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetThreeLabeledImagesWithPrompt", _wrap_GetThreeLabeledImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetThreeLabeledImagesWithPrompt(char const * prompt, char const * title, char const * label1, Image image1, char const * label2, Image image2, char const * label3, Image image3) -> bool\n"
		"\n"
		"GetThreeLabeledImagesWithPrompt: Puts up a dialog with the given prompt and allows the \n"
		"user to choose three images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetTicks", _wrap_GetTicks, METH_VARARGS, (char *)"\n"
		"GetTicks() -> uint32\n"
		"\n"
		"GetTicks: Return the MacOS system tick count.\n"
		""},
	 { (char *)"GetTicksPerSecond", _wrap_GetTicksPerSecond, METH_VARARGS, (char *)"\n"
		"GetTicksPerSecond() -> uint32\n"
		"\n"
		"GetTicksPerSecond: Return the number of ticks per second.\n"
		""},
	 { (char *)"GetTime", _wrap_GetTime, METH_VARARGS, (char *)"\n"
		"GetTime(bool wantSeconds, char * buffer, long buffer_length)\n"
		"\n"
		"GetTime: Return a string representing the current time with or without seconds as \n"
		"indicated by the wantSeconds parameter.\n"
		""},
	 { (char *)"GetTwoImages", _wrap_GetTwoImages, METH_VARARGS, (char *)"\n"
		"GetTwoImages(char const * title, Image image1, Image image2) -> bool\n"
		"\n"
		"GetTwoImages: Puts up a dialog and allows the user to choose two images.  Returns 1 for \n"
		"Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetTwoImagesWithPrompt", _wrap_GetTwoImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetTwoImagesWithPrompt(char const * prompt, char const * title, Image image1, Image image2) -> bool\n"
		"\n"
		"GetTwoImagesWithPrompt: Puts up a dialog with the given prompt and allows the user to \n"
		"choose two images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetTwoLabeledImagesWithPrompt", _wrap_GetTwoLabeledImagesWithPrompt, METH_VARARGS, (char *)"\n"
		"GetTwoLabeledImagesWithPrompt(char const * prompt, char const * title, char const * label1, Image image1, char const * label2, Image image2) -> bool\n"
		"\n"
		"GetTwoLabeledImagesWithPrompt: Puts up a dialog with the given prompt and allows the \n"
		"user to choose two images.  Returns 1 for Ok and 0 for Cancel.\n"
		""},
	 { (char *)"GetUnitsH", _wrap_GetUnitsH, METH_VARARGS, (char *)"\n"
		"GetUnitsH(Image argument_1, float x) -> float\n"
		"\n"
		"GetUnitsH: Return the horizontal pixels x in calibrated units.\n"
		""},
	 { (char *)"GetUnitString", _wrap_GetUnitString, METH_VARARGS, (char *)"\n"
		"GetUnitString(Image argument_1, char * buffer)\n"
		"\n"
		"GetUnitString: Copies the unit string of the image into the buffer.\n"
		""},
	 { (char *)"GetUnitsV", _wrap_GetUnitsV, METH_VARARGS, (char *)"\n"
		"GetUnitsV(Image argument_1, float y) -> float\n"
		"\n"
		"GetUnitsV: Return the vertical pixels y in calibrated units.\n"
		""},
	 { (char *)"GetVarianceFloat", _wrap_GetVarianceFloat, METH_VARARGS, (char *)"\n"
		"GetVarianceFloat(Image argument_1) -> float\n"
		"\n"
		"GetVarianceFloat: Return the variance of the image. No data type checking is \n"
		"performed.\n"
		""},
	 { (char *)"GetWindowPosition", _wrap_GetWindowPosition, METH_VARARGS, (char *)"\n"
		"GetWindowPosition(Image argument_1, long * xPos, long * yPos)\n"
		"\n"
		"GetWindowPosition: Store the image's image document window position into the xPos and \n"
		"yPos variables.\n"
		""},
	 { (char *)"GetWindowSize", _wrap_GetWindowSize, METH_VARARGS, (char *)"\n"
		"GetWindowSize(Image argument_1, long * width, long * height)\n"
		"\n"
		"GetWindowSize: Store the image's image document window size into the width and height \n"
		"variables.\n"
		""},
	 { (char *)"GetZoom", _wrap_GetZoom, METH_VARARGS, (char *)"\n"
		"GetZoom(Image argument_1) -> float\n"
		"\n"
		"GetZoom: Return the zoom of the image display.\n"
		""},
	 { (char *)"GrabSemaphore", _wrap_GrabSemaphore, METH_VARARGS, (char *)"\n"
		"GrabSemaphore(long argument_1)\n"
		"\n"
		"GrabSemaphore: Grab the semaphore. Block until it is available. Used only with \n"
		"background processing.\n"
		""},
	 { (char *)"GroupAnnotationUngroup", _wrap_GroupAnnotationUngroup, METH_VARARGS, (char *)"\n"
		"GroupAnnotationUngroup(Gatan::DM::Component const & comp)\n"
		"\n"
		"GroupAnnotationUngroup: Ungroups the group annotation.\n"
		""},
	 { (char *)"HasAcquisitionDaemon", _wrap_HasAcquisitionDaemon, METH_VARARGS, (char *)"\n"
		"HasAcquisitionDaemon(Image argument_1) -> bool\n"
		"\n"
		"HasAcquisitionDaemon: Returns 1 if the image has an attached daemon and returns 0 \n"
		"otherwise.\n"
		""},
	 { (char *)"HideImage", _wrap_HideImage, METH_VARARGS, (char *)"\n"
		"HideImage(Image argument_1)\n"
		"\n"
		"HideImage: Hide the image's image document.\n"
		""},
	 { (char *)"IFFT", _wrap_IFFT, METH_VARARGS, (char *)"\n"
		"IFFT(Image source) -> Image\n"
		"\n"
		"IFFT: Creates a new complex 8-byte image from the inverse FFT of the complex image \n"
		"source.\n"
		""},
	 { (char *)"ImageCalculateHistogram", _wrap_ImageCalculateHistogram, METH_VARARGS, (char *)"\n"
		"ImageCalculateHistogram(Image image, Image hist_image, long complexMode, float min, float max)\n"
		"\n"
		"ImageCalculateHistogram: Calculates the histogram of 'image', mapping [min,max] into \n"
		"'hist_image'.\n"
		""},
	 { (char *)"ImageCalculateMinMax", _wrap_ImageCalculateMinMax, METH_VARARGS, (char *)"\n"
		"ImageCalculateMinMax(Image image, long surveyTechnique, long complexMode, float * min, float * max)\n"
		"\n"
		"ImageCalculateMinMax: Calculates the minimum and maximum value of 'image' using survey \n"
		"technique 'surveyTechnique'.\n"
		""},
	 { (char *)"ImageClone", _wrap_ImageClone, METH_VARARGS, (char *)"\n"
		"ImageClone(Image img) -> Image\n"
		"\n"
		"ImageClone: Returns a clone of 'img'.\n"
		""},
	 { (char *)"ImageCopyCalibrationFrom", _wrap_ImageCopyCalibrationFrom, METH_VARARGS, (char *)"\n"
		"ImageCopyCalibrationFrom(Image image, Image src_image)\n"
		"\n"
		"ImageCopyCalibrationFrom: Copy the calibration of 'src_image' to 'image'.\n"
		""},
	 { (char *)"ImageCountImageDisplays", _wrap_ImageCountImageDisplays, METH_VARARGS, (char *)"\n"
		"ImageCountImageDisplays(Image argument_1) -> long\n"
		"\n"
		"ImageCountImageDisplays: Returns the number of image displays in which this image is \n"
		"displayed.\n"
		""},
	 { (char *)"ImageCountImageDisplaysInImageDocument", _wrap_ImageCountImageDisplaysInImageDocument, METH_VARARGS, (char *)"\n"
		"ImageCountImageDisplaysInImageDocument(Image argument_1, Gatan::DM::ImageDocument const & imgDoc) -> long\n"
		"\n"
		"ImageCountImageDisplaysInImageDocument: Returns the number of image displays in the \n"
		"image document in which this image is displayed.\n"
		""},
	 { (char *)"ImageCreateImageDisplay", _wrap_ImageCreateImageDisplay, METH_VARARGS, (char *)"\n"
		"ImageCreateImageDisplay(Image argument_1, long displayType) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ImageCreateImageDisplay: Creates a new image display of type 'displayType' for the image.\n"
		""},
	 { (char *)"ImageDataChanged", _wrap_ImageDataChanged, METH_VARARGS, (char *)"\n"
		"ImageDataChanged(Image argument_1)\n"
		"\n"
		"ImageDataChanged: Signal that the data of the image has changed.\n"
		""},
	 { (char *)"ImageDisplayAccumulateROIsToMask", _wrap_ImageDisplayAccumulateROIsToMask, METH_VARARGS, (char *)"\n"
		"ImageDisplayAccumulateROIsToMask(Gatan::DM::ImageDisplay const & imgDisp, Image mask, float top, float left, float bottom, float right, float mask_val)\n"
		"\n"
		"ImageDisplayAccumulateROIsToMask: Sets mask to mask_val at points in imageDisplay's rois\n"
		""},
	 { (char *)"ImageDisplayAddKeyListener", _wrap_ImageDisplayAddKeyListener, METH_VARARGS, (char *)"\n"
		"ImageDisplayAddKeyListener(Gatan::DM::ImageDisplay const & imgDisp, char const * listener_key, char const * listener_script, char const * client_id)\n"
		"\n"
		"ImageDisplayAddKeyListener: Adds the listener_script to the key listener list under the \n"
		"tag listener_key.\n"
		""},
	 { (char *)"ImageDisplayAddROI", _wrap_ImageDisplayAddROI, METH_VARARGS, (char *)"\n"
		"ImageDisplayAddROI(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi)\n"
		"\n"
		"ImageDisplayAddROI: Adds the roi to this image display.\n"
		""},
	 { (char *)"ImageDisplayAddROIAtBeginning", _wrap_ImageDisplayAddROIAtBeginning, METH_VARARGS, (char *)"\n"
		"ImageDisplayAddROIAtBeginning(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi)\n"
		"\n"
		"ImageDisplayAddROIAtBeginning: Adds the roi to the start of this image displays ROI list.\n"
		""},
	 { (char *)"ImageDisplayAddROIAtEnd", _wrap_ImageDisplayAddROIAtEnd, METH_VARARGS, (char *)"\n"
		"ImageDisplayAddROIAtEnd(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi)\n"
		"\n"
		"ImageDisplayAddROIAtEnd: Adds the roi to the end of this image displays ROI list.\n"
		""},
	 { (char *)"ImageDisplayChangeDisplayType", _wrap_ImageDisplayChangeDisplayType, METH_VARARGS, (char *)"\n"
		"ImageDisplayChangeDisplayType(Gatan::DM::ImageDisplay const & imgDisp, long new_type)\n"
		"\n"
		"ImageDisplayChangeDisplayType: Changes the type of the image display.\n"
		""},
	 { (char *)"ImageDisplayCountROIs", _wrap_ImageDisplayCountROIs, METH_VARARGS, (char *)"\n"
		"ImageDisplayCountROIs(Gatan::DM::ImageDisplay const & imgDisp) -> long\n"
		"\n"
		"ImageDisplayCountROIs: Returns the number of ROIs on this image display.\n"
		""},
	 { (char *)"ImageDisplayDeleteROI", _wrap_ImageDisplayDeleteROI, METH_VARARGS, (char *)"\n"
		"ImageDisplayDeleteROI(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi)\n"
		"\n"
		"ImageDisplayDeleteROI: Deletes the roi from this image display.\n"
		""},
	 { (char *)"ImageDisplayDoesROIExist", _wrap_ImageDisplayDoesROIExist, METH_VARARGS, (char *)"\n"
		"ImageDisplayDoesROIExist(Gatan::DM::ImageDisplay const & imgDisp, char const * name) -> bool\n"
		"\n"
		"ImageDisplayDoesROIExist: Determines whether the given ROI exists on this image display.\n"
		""},
	 { (char *)"ImageDisplayExportToFile", _wrap_ImageDisplayExportToFile, METH_VARARGS, (char *)"\n"
		"ImageDisplayExportToFile(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::String const & format, Gatan::DM::String const & file_name)\n"
		"\n"
		"ImageDisplayExportToFile: Exports the display to the file 'file_name' using the format \n"
		"'format'.\n"
		""},
	 { (char *)"ImageDisplayGetBufferedImage", _wrap_ImageDisplayGetBufferedImage, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetBufferedImage(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetBufferedImage: Gets the image resulting from the contrast transformation.\n"
		""},
	 { (char *)"ImageDisplayGetComplexMode", _wrap_ImageDisplayGetComplexMode, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetComplexMode(Gatan::DM::ImageDisplay const & imgDisp) -> long\n"
		"\n"
		"ImageDisplayGetComplexMode: Gets the complex mode of the display.\n"
		""},
	 { (char *)"ImageDisplayGetComplexModeRange", _wrap_ImageDisplayGetComplexModeRange, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetComplexModeRange(Gatan::DM::ImageDisplay const & imgDisp) -> float\n"
		"\n"
		"ImageDisplayGetComplexModeRange: Gets the parameter used in converting complex to real.\n"
		""},
	 { (char *)"ImageDisplayGetContrastLimits", _wrap_ImageDisplayGetContrastLimits, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetContrastLimits(Gatan::DM::ImageDisplay const & imgDisp, float * low, float * high)\n"
		"\n"
		"ImageDisplayGetContrastLimits: Gets the contrast limits of the display.\n"
		""},
	 { (char *)"ImageDisplayGetOutlierTrimLimits", _wrap_ImageDisplayGetOutlierTrimLimits, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetOutlierTrimLimits(Gatan::DM::ImageDisplay const & imgDisp, double * low, double * high)\n"
		"\n"
		"ImageDisplayGetOutlierTrimLimits: Gets the outlier limits of the display.\n"
		""},
	 { (char *)"ImageDisplayGetContrastChangeTriggerFractions", _wrap_ImageDisplayGetContrastChangeTriggerFractions, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetContrastChangeTriggerFractions(Gatan::DM::ImageDisplay const & imgDisp, double * low, double * high)\n"
		"\n"
		"ImageDisplaySetContrastChangeTriggerFractions: Sets the contrast change % limits of the display.\n"
		""},
	 { (char *)"ImageDisplayGetContrastMode", _wrap_ImageDisplayGetContrastMode, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetContrastMode(Gatan::DM::ImageDisplay const & imgDisp) -> long\n"
		"\n"
		"ImageDisplayGetContrastMode: Returns the contrast mode.\n"
		""},
	 { (char *)"ImageDisplayGetContrastParameters", _wrap_ImageDisplayGetContrastParameters, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetContrastParameters(Gatan::DM::ImageDisplay const & imgDisp, float * bright, float * contrast)\n"
		"\n"
		"ImageDisplayGetContrastParameters: Gets the parameters for the contrast mode.\n"
		""},
	 { (char *)"ImageDisplayGetDisplayedImage", _wrap_ImageDisplayGetDisplayedImage, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetDisplayedImage(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetDisplayedImage: Gets the image that is actually displayed in the image \n"
		"display.\n"
		""},
	 { (char *)"ImageDisplayGetDisplayedLayers", _wrap_ImageDisplayGetDisplayedLayers, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetDisplayedLayers(Gatan::DM::ImageDisplay const & imgDisp, long * start, long * end)\n"
		"ImageDisplayGetDisplayedLayers(Gatan::DM::ImageDisplay const & imgDisp, long * start1, long * end1, long * start2, long * end2)\n"
		"\n"
		"ImageDisplayGetDisplayedLayers: Gets the layers that are summed into the display.\n"
		""},
	 { (char *)"ImageDisplayGetDisplayType", _wrap_ImageDisplayGetDisplayType, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetDisplayType(Gatan::DM::ImageDisplay const & imgDisp) -> long\n"
		"\n"
		"ImageDisplayGetDisplayType: Returns type of the image display.\n"
		""},
	 { (char *)"ImageDisplayGetDoAutoSurvey", _wrap_ImageDisplayGetDoAutoSurvey, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetDoAutoSurvey(Gatan::DM::ImageDisplay const & imgDisp) -> bool\n"
		"\n"
		"ImageDisplayGetDoAutoSurvey: Determines whether min and max are determined automatically.\n"
		""},
	 { (char *)"ImageDisplayGetExportImage", _wrap_ImageDisplayGetExportImage, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetExportImage(Gatan::DM::ImageDisplay const & imgDisp, ulong mode, Gatan::DM::ImageDisplay & clut_display) -> Image\n"
		"\n"
		"ImageDisplayGetExportImage: Gets the image representation of the image as it appears on \n"
		"the screen at full resolution.\n"
		""},
	 { (char *)"ImageDisplayGetImage", _wrap_ImageDisplayGetImage, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetImage(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetImage: Returns the single image displayed by the image display.\n"
		""},
	 { (char *)"ImageDisplayGetImageAdjustRect", _wrap_ImageDisplayGetImageAdjustRect, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetImageAdjustRect(Gatan::DM::ImageDisplay const & imgDisp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDisplayGetImageAdjustRect: Returns the image display outside the image rect\n"
		""},
	 { (char *)"ImageDisplayGetImageAdjustRectInView", _wrap_ImageDisplayGetImageAdjustRectInView, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetImageAdjustRectInView(Gatan::DM::ImageDisplay const & imgDisp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDisplayGetImageAdjustRectInView: Returns the image display outside the image rect \n"
		"in view coordinates\n"
		""},
	 { (char *)"ImageDisplayGetImageRect", _wrap_ImageDisplayGetImageRect, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetImageRect(Gatan::DM::ImageDisplay const & imgDisp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDisplayGetImageRect: Gets the bounds of the image in the image display.\n"
		""},
	 { (char *)"ImageDisplayGetImageRectInView", _wrap_ImageDisplayGetImageRectInView, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetImageRectInView(Gatan::DM::ImageDisplay const & imgDisp, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDisplayGetImageRectInView: Gets the bounds of the image in the image display in \n"
		"view coordinates.\n"
		""},
	 { (char *)"ImageDisplayGetInputColorTable", _wrap_ImageDisplayGetInputColorTable, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetInputColorTable(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetInputColorTable: Gets the input color table for the display.\n"
		""},
	 { (char *)"ImageDisplayGetIntensityTransformation", _wrap_ImageDisplayGetIntensityTransformation, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetIntensityTransformation(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetIntensityTransformation: Gets the ITT of the display.\n"
		""},
	 { (char *)"ImageDisplayIsColorTableInverted", _wrap_ImageDisplayIsColorTableInverted, METH_VARARGS, (char *)"\n"
		"ImageDisplayIsColorTableInverted(Gatan::DM::ImageDisplay const & imgDisp) -> bool\n"
		"\n"
		"ImageDisplayIsColorTableInverted: Returns true if the color table is inverted.\n"
		""},
	 { (char *)"ImageDisplayGetMinimumContrast", _wrap_ImageDisplayGetMinimumContrast, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetMinimumContrast(Gatan::DM::ImageDisplay const & imgDisp) -> float\n"
		"\n"
		"ImageDisplayGetMinimumContrast: Gets the minimum contrast of the display.\n"
		""},
	 { (char *)"ImageDisplayGetOutputColorTable", _wrap_ImageDisplayGetOutputColorTable, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetOutputColorTable(Gatan::DM::ImageDisplay const & imgDisp) -> Image\n"
		"\n"
		"ImageDisplayGetOutputColorTable: Gets the output color table for the display.\n"
		""},
	 { (char *)"ImageDisplayGetROI", _wrap_ImageDisplayGetROI, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetROI(Gatan::DM::ImageDisplay const & imgDisp, long index) -> Gatan::DM::ROI\n"
		"\n"
		"ImageDisplayGetROI: Returns the given ROI on this image display.\n"
		""},
	 { (char *)"ImageDisplayGetROISelectionStyle", _wrap_ImageDisplayGetROISelectionStyle, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetROISelectionStyle(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & r) -> long\n"
		"\n"
		"ImageDisplayGetROISelectionStyle: Gets the selection style of the roi in the imag \n"
		"display.\n"
		""},
	 { (char *)"ImageDisplayGetShowExtractionAnnotation", _wrap_ImageDisplayGetShowExtractionAnnotation, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetShowExtractionAnnotation(Gatan::DM::ImageDisplay const & imgDisp) -> bool\n"
		"\n"
		"ImageDisplayGetShowExtractionAnnotation: Returns true if extraction annotation should be displayed.\n"
		""},
	 { (char *)"ImageDisplayGetSurveyTechnique", _wrap_ImageDisplayGetSurveyTechnique, METH_VARARGS, (char *)"\n"
		"ImageDisplayGetSurveyTechnique(Gatan::DM::ImageDisplay const & imgDisp) -> long\n"
		"\n"
		"ImageDisplayGetSurveyTechnique: Gets the survey technique of the display.\n"
		""},
	 { (char *)"ImageDisplayIsCaptionOn", _wrap_ImageDisplayIsCaptionOn, METH_VARARGS, (char *)"\n"
		"ImageDisplayIsCaptionOn(Gatan::DM::ImageDisplay const & imgDisp) -> bool\n"
		"\n"
		"ImageDisplayIsCaptionOn: Returns true if captions are drawn.\n"
		""},
	 { (char *)"ImageDisplayIsROISelected", _wrap_ImageDisplayIsROISelected, METH_VARARGS, (char *)"\n"
		"ImageDisplayIsROISelected(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ImageDisplayIsROISelected: Determines whether the given ROI is selected on this image \n"
		"display.\n"
		""},
	 { (char *)"ImageDisplayIsValid", _wrap_ImageDisplayIsValid, METH_VARARGS, (char *)"\n"
		"ImageDisplayIsValid(Gatan::DM::ImageDisplay const & imgDisp) -> bool\n"
		"\n"
		"ImageDisplayIsValid: Returns true if 'imageDisplay' points to a valid object.\n"
		""},
	 { (char *)"ImageDisplayLookupROI", _wrap_ImageDisplayLookupROI, METH_VARARGS, (char *)"\n"
		"ImageDisplayLookupROI(Gatan::DM::ImageDisplay const & imgDisp, char const * name) -> Gatan::DM::ROI\n"
		"\n"
		"ImageDisplayLookupROI: Returns the given ROI on this image display.\n"
		""},
	 { (char *)"ImageDisplayLookupROIByID", _wrap_ImageDisplayLookupROIByID, METH_VARARGS, (char *)"\n"
		"ImageDisplayLookupROIByID(Gatan::DM::ImageDisplay const & imgDisp, long id) -> Gatan::DM::ROI\n"
		"\n"
		"ImageDisplayLookupROIByID: Returns the ROI with the given id on this image display.\n"
		""},
	 { (char *)"ImageDisplayRemoveKeyListener", _wrap_ImageDisplayRemoveKeyListener, METH_VARARGS, (char *)"\n"
		"ImageDisplayRemoveKeyListener(Gatan::DM::ImageDisplay const & imgDisp, char const * listener_key)\n"
		"\n"
		"ImageDisplayRemoveKeyListener: Removes the listener script with the tag listener_key \n"
		"from the key listener list.\n"
		""},
	 { (char *)"ImageDisplaySetCaptionOn", _wrap_ImageDisplaySetCaptionOn, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetCaptionOn(Gatan::DM::ImageDisplay const & imgDisp, bool on)\n"
		"\n"
		"ImageDisplaySetCaptionOn: Sets whether to draw captions.\n"
		""},
	 { (char *)"ImageDisplaySetComplexMode", _wrap_ImageDisplaySetComplexMode, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetComplexMode(Gatan::DM::ImageDisplay const & imgDisp, long mode)\n"
		"\n"
		"ImageDisplaySetComplexMode: Sets the complex mode of the display.\n"
		""},
	 { (char *)"ImageDisplaySetComplexModeRange", _wrap_ImageDisplaySetComplexModeRange, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetComplexModeRange(Gatan::DM::ImageDisplay const & imgDisp, float range)\n"
		"\n"
		"ImageDisplaySetComplexModeRange: Sets the parameter used in converting complex to real.\n"
		""},
	 { (char *)"ImageDisplaySetContrastLimits", _wrap_ImageDisplaySetContrastLimits, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetContrastLimits(Gatan::DM::ImageDisplay const & imgDisp, float low, float hight)\n"
		"\n"
		"ImageDisplaySetContrastLimits: Sets the contrast limits of the display.\n"
		""},
	 { (char *)"ImageDisplaySetOutlierTrimLimits", _wrap_ImageDisplaySetOutlierTrimLimits, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetOutlierTrimLimits(Gatan::DM::ImageDisplay const & imgDisp, double low, double high)\n"
		"\n"
		"ImageDisplaySetOutlierTrimLimits: Sets the outlier limits of the display.\n"
		""},
	 { (char *)"ImageDisplaySetContrastChangeTriggerFractions", _wrap_ImageDisplaySetContrastChangeTriggerFractions, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetContrastChangeTriggerFractions(Gatan::DM::ImageDisplay const & imgDisp, double low, double high)\n"
		"\n"
		"ImageDisplaySetContrastChangeTriggerFractions: Sets the contrast change % limits of the display.\n"
		""},
	 { (char *)"ImageDisplaySetContrastMode", _wrap_ImageDisplaySetContrastMode, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetContrastMode(Gatan::DM::ImageDisplay const & imgDisp, long mode)\n"
		"\n"
		"ImageDisplaySetContrastMode: Sets the contrast mode.\n"
		""},
	 { (char *)"ImageDisplaySetContrastParameters", _wrap_ImageDisplaySetContrastParameters, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetContrastParameters(Gatan::DM::ImageDisplay const & imgDisp, float bright, float contrast)\n"
		"\n"
		"ImageDisplaySetContrastParameters: Gets the parameters for the contrast mode.\n"
		""},
	 { (char *)"ImageDisplaySetDisplayedLayers", _wrap_ImageDisplaySetDisplayedLayers, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetDisplayedLayers(Gatan::DM::ImageDisplay const & imgDisp, long start, long end)\n"
		"ImageDisplaySetDisplayedLayers(Gatan::DM::ImageDisplay const & imgDisp, long start1, long end1, long start2, long end2)\n"
		"\n"
		"ImageDisplaySetDisplayedLayers: Sets the layers that are summed into the display.\n"
		""},
	 { (char *)"ImageDisplaySetDoAutoSurvey", _wrap_ImageDisplaySetDoAutoSurvey, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetDoAutoSurvey(Gatan::DM::ImageDisplay const & imgDisp, bool do_survey)\n"
		"\n"
		"ImageDisplaySetDoAutoSurvey: Sets whether min and max are determined automatically.\n"
		""},
	 { (char *)"ImageDisplaySetImageRect", _wrap_ImageDisplaySetImageRect, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetImageRect(Gatan::DM::ImageDisplay const & imgDisp, float top, float left, float bottom, float right)\n"
		"\n"
		"ImageDisplaySetImageRect: Sets the bounds of the image part of the image display.\n"
		""},
	 { (char *)"ImageDisplaySetInputColorTable", _wrap_ImageDisplaySetInputColorTable, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetInputColorTable(Gatan::DM::ImageDisplay const & imgDisp, Image clut)\n"
		"\n"
		"ImageDisplaySetInputColorTable: Sets the input color table of the display.\n"
		""},
	 { (char *)"ImageDisplaySetIntensityTransformation", _wrap_ImageDisplaySetIntensityTransformation, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetIntensityTransformation(Gatan::DM::ImageDisplay const & imgDisp, Image itt)\n"
		"\n"
		"ImageDisplaySetIntensityTransformation: Sets the ITT of the display.\n"
		""},
	 { (char *)"ImageDisplaySetMinimumContrast", _wrap_ImageDisplaySetMinimumContrast, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetMinimumContrast(Gatan::DM::ImageDisplay const & imgDisp, float contrast)\n"
		"\n"
		"ImageDisplaySetMinimumContrast: Sets the minimum contrast of the display.\n"
		""},
	 { (char *)"ImageDisplaySetROISelected", _wrap_ImageDisplaySetROISelected, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetROISelected(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & roi, bool select)\n"
		"\n"
		"ImageDisplaySetROISelected: Sets the selection status of the region of interest in the \n"
		"image display.\n"
		""},
	 { (char *)"ImageDisplaySetROISelectionStyle", _wrap_ImageDisplaySetROISelectionStyle, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetROISelectionStyle(Gatan::DM::ImageDisplay const & imgDisp, Gatan::DM::ROI const & r, long style)\n"
		"\n"
		"ImageDisplaySetROISelectionStyle: Sets the selection style of the roi in the imag \n"
		"display.\n"
		""},
	 { (char *)"ImageDisplaySetShowExtractionAnnotation", _wrap_ImageDisplaySetShowExtractionAnnotation, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetShowExtractionAnnotation(Gatan::DM::ImageDisplay const & imgDisp, bool show)\n"
		"\n"
		"ImageDisplaySetShowExtractionAnnotation: Sets if extraction annotation should be displayed.\n"
		""},
	 { (char *)"ImageDisplaySetSurveyTechnique", _wrap_ImageDisplaySetSurveyTechnique, METH_VARARGS, (char *)"\n"
		"ImageDisplaySetSurveyTechnique(Gatan::DM::ImageDisplay const & imgDisp, long tech)\n"
		"\n"
		"ImageDisplaySetSurveyTechnique: Sets the survey technique of the display.\n"
		""},
	 { (char *)"ImageDocumentAddImage", _wrap_ImageDocumentAddImage, METH_VARARGS, (char *)"\n"
		"ImageDocumentAddImage(Gatan::DM::ImageDocument const & imgDoc, Image image)\n"
		"\n"
		"ImageDocumentAddImage: Adds the given image to the list maintained in the image document.\n"
		""},
	 { (char *)"ImageDocumentAddImageDisplay", _wrap_ImageDocumentAddImageDisplay, METH_VARARGS, (char *)"\n"
		"ImageDocumentAddImageDisplay(Gatan::DM::ImageDocument const & imgDoc, Image image, long displayType) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ImageDocumentAddImageDisplay: Adds the given image and an image display for it of the \n"
		"given type.\n"
		""},
	 { (char *)"ImageDocumentAddToUserInterface", _wrap_ImageDocumentAddToUserInterface, METH_VARARGS, (char *)"\n"
		"ImageDocumentAddToUserInterface(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentAddToUserInterface: Places the image document in the list of user interface \n"
		"documents.\n"
		""},
	 { (char *)"ImageDocumentClean", _wrap_ImageDocumentClean, METH_VARARGS, (char *)"\n"
		"ImageDocumentClean(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentClean: Marks the image document as clean (doesn't need to be saved).\n"
		""},
	 { (char *)"ImageDocumentClone", _wrap_ImageDocumentClone, METH_VARARGS, (char *)"\n"
		"ImageDocumentClone(Gatan::DM::ImageDocument const & imgDoc, bool doDeepCopy) -> Gatan::DM::ImageDocument\n"
		"\n"
		"ImageDocumentClone: Returns a duplicate of the image docuemnt, creating a copy of its \n"
		"images if 'doDeepCopy' is true.\n"
		""},
	 { (char *)"ImageDocumentClose", _wrap_ImageDocumentClose, METH_VARARGS, (char *)"\n"
		"ImageDocumentClose(Gatan::DM::ImageDocument const & imgDoc, bool saving)\n"
		"\n"
		"ImageDocumentClose: Closes the given image document. If saving is true then asks whether \n"
		"to save it, otherwise just closes it.\n"
		""},
	 { (char *)"ImageDocumentCountImages", _wrap_ImageDocumentCountImages, METH_VARARGS, (char *)"\n"
		"ImageDocumentCountImages(Gatan::DM::ImageDocument const & imgDoc) -> long\n"
		"\n"
		"ImageDocumentCountImages: Returns the number of images contained in this image document.\n"
		""},
	 { (char *)"ImageDocumentCreateRGBImageFromDocument", _wrap_ImageDocumentCreateRGBImageFromDocument, METH_VARARGS, (char *)"\n"
		"ImageDocumentCreateRGBImageFromDocument(Gatan::DM::ImageDocument const & imgDoc, long width, long height, long extract_style, long constraints) -> Image\n"
		"\n"
		"ImageDocumentCreateRGBImageFromDocument: Creates an image by scaling the image document \n"
		"into ( width, height ).\n"
		""},
	 { (char *)"ImageDocumentDeleteImage", _wrap_ImageDocumentDeleteImage, METH_VARARGS, (char *)"\n"
		"ImageDocumentDeleteImage(Gatan::DM::ImageDocument const & imgDoc, Image image)\n"
		"\n"
		"ImageDocumentDeleteImage: Deletes the given image from this image document.\n"
		""},
	 { (char *)"ImageDocumentDoesImageWithIDExist", _wrap_ImageDocumentDoesImageWithIDExist, METH_VARARGS, (char *)"\n"
		"ImageDocumentDoesImageWithIDExist(Gatan::DM::ImageDocument const & imgDoc, long id) -> bool\n"
		"\n"
		"ImageDocumentDoesImageWithIDExist: Determines whether the image with the given id exists \n"
		"within this image document.\n"
		""},
	 { (char *)"ImageDocumentEnsurePlacedOnPage", _wrap_ImageDocumentEnsurePlacedOnPage, METH_VARARGS, (char *)"\n"
		"ImageDocumentEnsurePlacedOnPage(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentEnsurePlacedOnPage: Makes sure the document has been layed out on the \n"
		"physical page.\n"
		""},
	 { (char *)"ImageDocumentGetAsPICT", _wrap_ImageDocumentGetAsPICT, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetAsPICT(Gatan::DM::ImageDocument const & imgDoc) -> long\n"
		"\n"
		"ImageDocumentGetAsPICT: Returns this image as a PICT.\n"
		""},
	 { (char *)"ImageDocumentGetComponentByID", _wrap_ImageDocumentGetComponentByID, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetComponentByID(Gatan::DM::ImageDocument const & imgDoc, long id) -> Gatan::DM::Component\n"
		"\n"
		"ImageDocumentGetComponentByID: Returns an annotation contained in this image document by \n"
		"id.\n"
		""},
	 { (char *)"ImageDocumentGetDrawMarginsInPageMode", _wrap_ImageDocumentGetDrawMarginsInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetDrawMarginsInPageMode(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentGetDrawMarginsInPageMode: returns true if the paper margins are drawn for documents\n"
		"in page mode, false otherwise.\n"
		""},
	 { (char *)"ImageDocumentGetDrawPaperInPageMode", _wrap_ImageDocumentGetDrawPaperInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetDrawPaperInPageMode(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentGetDrawPaperInPageMode: returns true if the paper is drawn for documents in page\n"
		" mode, false otherwise.\n"
		""},
	 { (char *)"ImageDocumentGetFixedWindowSize", _wrap_ImageDocumentGetFixedWindowSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetFixedWindowSize(Gatan::DM::ImageDocument const & img_doc, double * width, double * height)\n"
		"\n"
		"ImageDocumentGetFixedWindowSize: Returns values of width and height for image documents with\n"
		"fixed size.\n"
		""},
	 { (char *)"ImageDocumentGetID", _wrap_ImageDocumentGetID, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetID(Gatan::DM::ImageDocument const & imgDoc) -> long\n"
		"\n"
		"ImageDocumentGetID: Gets the id of the image document.\n"
		""},
	 { (char *)"ImageDocumentGetImage", _wrap_ImageDocumentGetImage, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetImage(Gatan::DM::ImageDocument const & imgDoc, long position) -> Image\n"
		"\n"
		"ImageDocumentGetImage: Returns the image contained within this image document by \n"
		"position.\n"
		""},
	 { (char *)"ImageDocumentGetImageByID", _wrap_ImageDocumentGetImageByID, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetImageByID(Gatan::DM::ImageDocument const & imgDoc, long id) -> Image\n"
		"\n"
		"ImageDocumentGetImageByID: Returns an image contained in this image document by id.\n"
		""},
	 { (char *)"ImageDocumentGetImageModeDisplay", _wrap_ImageDocumentGetImageModeDisplay, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetImageModeDisplay(Gatan::DM::ImageDocument const & imgDoc) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ImageDocumentGetImageModeDisplay: Gets the image display targeted by the current image \n"
		"mode.\n"
		""},
	 { (char *)"ImageDocumentGetMinimumPointSize", _wrap_ImageDocumentGetMinimumPointSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetMinimumPointSize(Gatan::DM::ImageDocument const & imgDoc, float * x, float * y)\n"
		"\n"
		"ImageDocumentGetMinimumPointSize: Gets the size of the minimum point in view coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetName", _wrap_ImageDocumentGetName, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetName(Gatan::DM::ImageDocument const & imgDoc) -> Gatan::DM::String\n"
		"\n"
		"ImageDocumentGetName: Returns the name of the image document.\n"
		""},
	 { (char *)"ImageDocumentGetOrientation", _wrap_ImageDocumentGetOrientation, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetOrientation(Gatan::DM::ImageDocument const & imgDoc) -> uint32\n"
		"\n"
		"ImageDocumentGetOrientation: Get document orientation, 0: portrait, 1: landscape\n"
		""},
	 { (char *)"ImageDocumentGetPageBounds", _wrap_ImageDocumentGetPageBounds, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetPageBounds(Gatan::DM::ImageDocument const & imgDoc, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDocumentGetPageBounds: Gets the page bounds of the document in page coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetPageResolution_72dpi", _wrap_ImageDocumentGetPageResolution_72dpi, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetPageResolution_72dpi(Gatan::DM::ImageDocument const & imgDoc, float * horz, float * vert)\n"
		"\n"
		"ImageDocumentGetPageResolution_72dpi: Returns the resolution of page coordinates in 72 \n"
		"dots per inch ( returns page units per dot ).\n"
		""},
	 { (char *)"ImageDocumentGetPageResolution_Printer", _wrap_ImageDocumentGetPageResolution_Printer, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetPageResolution_Printer(Gatan::DM::ImageDocument const & imgDoc, float * horz, float * vert)\n"
		"\n"
		"ImageDocumentGetPageResolution_Printer: Returns the resolution of page coordinates in \n"
		"printer pixels ( returns page units per printer pixel ).\n"
		""},
	 { (char *)"ImageDocumentGetPaperBounds", _wrap_ImageDocumentGetPaperBounds, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetPaperBounds(Gatan::DM::ImageDocument const & imgDoc, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDocumentGetPaperBounds: Gets the paper bounds of the document in page coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetPreferredViewRect", _wrap_ImageDocumentGetPreferredViewRect, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetPreferredViewRect(Gatan::DM::ImageDocument const & imgDoc, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDocumentGetPreferredViewRect: Gets rectangle in view coordinates of the area that \n"
		"is by default displayed in this mode.\n"
		""},
	 { (char *)"ImageDocumentGetReferencePointSize", _wrap_ImageDocumentGetReferencePointSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetReferencePointSize(Gatan::DM::ImageDocument const & imgDoc, float * x, float * y)\n"
		"\n"
		"ImageDocumentGetReferencePointSize: Gets the size of the reference point in view \n"
		"coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetRootComponent", _wrap_ImageDocumentGetRootComponent, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetRootComponent(Gatan::DM::ImageDocument const & imgDoc) -> Gatan::DM::Component\n"
		"\n"
		"ImageDocumentGetRootComponent: Gets the root annotation of the image document.\n"
		""},
	 { (char *)"ImageDocumentGetTagGroup", _wrap_ImageDocumentGetTagGroup, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetTagGroup(Gatan::DM::ImageDocument const & imgDoc) -> TagGroup\n"
		"\n"
		"ImageDocumentGetTagGroup: Gets the tag group associated with the image document.\n"
		""},
	 { (char *)"ImageDocumentGetUnzoomedPointSize", _wrap_ImageDocumentGetUnzoomedPointSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetUnzoomedPointSize(Gatan::DM::ImageDocument const & imgDoc, float * x, float * y)\n"
		"\n"
		"ImageDocumentGetUnzoomedPointSize: Gets the size of the unzoomed point in view \n"
		"coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetViewExtent", _wrap_ImageDocumentGetViewExtent, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetViewExtent(Gatan::DM::ImageDocument const & imgDoc, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDocumentGetViewExtent: Gets the extent in view coordinates of the items visible in \n"
		"the current view mode.\n"
		""},
	 { (char *)"ImageDocumentGetViewToWindowTransform", _wrap_ImageDocumentGetViewToWindowTransform, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetViewToWindowTransform(Gatan::DM::ImageDocument const & imgDoc, float * off_x, float * off_y, float * scale_x, float * scale_y)\n"
		"\n"
		"ImageDocumentGetViewToWindowTransform: Returns the transformation from view to screen \n"
		"coordinates.\n"
		""},
	 { (char *)"ImageDocumentGetVisibleViewRect", _wrap_ImageDocumentGetVisibleViewRect, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetVisibleViewRect(Gatan::DM::ImageDocument const & imgDoc, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ImageDocumentGetVisibleViewRect: Gets the view coordinates of the rectangle visible in \n"
		"the view.\n"
		""},
	 { (char *)"ImageDocumentGetWindow", _wrap_ImageDocumentGetWindow, METH_VARARGS, (char *)"\n"
		"ImageDocumentGetWindow(Gatan::DM::ImageDocument const & imgDoc) -> Gatan::DM::Window\n"
		"\n"
		"ImageDocumentGetWindow: Returns the window displaying the document.\n"
		""},
	 { (char *)"ImageDocumentHasBeenPlacedOnPage", _wrap_ImageDocumentHasBeenPlacedOnPage, METH_VARARGS, (char *)"\n"
		"ImageDocumentHasBeenPlacedOnPage(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentHasBeenPlacedOnPage: Returns 'true' if the document has been layed out \n"
		"within the physical page.\n"
		""},
	 { (char *)"ImageDocumentHasFixedWindowSize", _wrap_ImageDocumentHasFixedWindowSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentHasFixedWindowSize(Gatan::DM::ImageDocument const & img_doc) -> bool\n"
		"\n"
		"ImageDocumentHasFixedWindowSize: Returns true if the image document is not resizable. This means\n"
		"the window has a fixed, nonresizable frame and attempts to resize the window will fail.\n"
		""},
	 { (char *)"ImageDocumentHide", _wrap_ImageDocumentHide, METH_VARARGS, (char *)"\n"
		"ImageDocumentHide(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentHide: Hides the given image document.\n"
		""},
	 { (char *)"ImageDocumentIsDirty", _wrap_ImageDocumentIsDirty, METH_VARARGS, (char *)"\n"
		"ImageDocumentIsDirty(Gatan::DM::ImageDocument const & img_doc) -> bool\n"
		"\n"
		"ImageDocumentIsDirty: Returns true if the document has changed since last saving it.\n"
		""},
	 { (char *)"ImageDocumentIsInImageMode", _wrap_ImageDocumentIsInImageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentIsInImageMode(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentIsInImageMode: Returns true if the view of the document is in image mode.\n"
		""},
	 { (char *)"ImageDocumentIsInPageMode", _wrap_ImageDocumentIsInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentIsInPageMode(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentIsInPageMode: Returns true if the view of the document is in page mode.\n"
		""},
	 { (char *)"ImageDocumentIsLockedInPageMode", _wrap_ImageDocumentIsLockedInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentIsLockedInPageMode(Gatan::DM::ImageDocument const & img_doc) -> bool\n"
		"\n"
		"ImageDocumentIsLockedInPageMode: Returns true if the view of the document is always in page mode\n"
		"and cannot be switched into image mode.\n"
		""},
	 { (char *)"ImageDocumentIsValid", _wrap_ImageDocumentIsValid, METH_VARARGS, (char *)"\n"
		"ImageDocumentIsValid(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentIsValid: Returns true if 'imageDocument' points to a valid object.\n"
		""},
	 { (char *)"ImageDocumentLockInPageMode", _wrap_ImageDocumentLockInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentLockInPageMode(Gatan::DM::ImageDocument const & img_doc, bool lock) -> bool\n"
		"\n"
		"ImageDocumentLockInPageMode: Locks/Unlocks image documents in page mode display. A document\n"
		"which is locked in page mode cannot be displayed in image mode, unless the lock is cleared.\n"
		""},
	 { (char *)"ImageDocumentMaximizeRectInView", _wrap_ImageDocumentMaximizeRectInView, METH_VARARGS, (char *)"\n"
		"ImageDocumentMaximizeRectInView(Gatan::DM::ImageDocument const & imgDoc, float top, float left, float bottom, float right)\n"
		"\n"
		"ImageDocumentMaximizeRectInView: Zooms the view so the rectangle is centered and maximal.\n"
		""},
	 { (char *)"ImageDocumentPrint", _wrap_ImageDocumentPrint, METH_VARARGS, (char *)"\n"
		"ImageDocumentPrint(Gatan::DM::ImageDocument const & imgDoc) -> bool\n"
		"\n"
		"ImageDocumentPrint: Print the image document, returning 'true' if successful.\n"
		""},
	 { (char *)"ImageDocumentRemoveFromUserInterface", _wrap_ImageDocumentRemoveFromUserInterface, METH_VARARGS, (char *)"\n"
		"ImageDocumentRemoveFromUserInterface(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentRemoveFromUserInterface: Removes the image document from the list of user \n"
		"interface documents.\n"
		""},
	 { (char *)"ImageDocumentSaveToFile", _wrap_ImageDocumentSaveToFile, METH_VARARGS, (char *)"\n"
		"ImageDocumentSaveToFile(Gatan::DM::ImageDocument const & imgDoc, Gatan::DM::String const & handler, Gatan::DM::String const & fileName)\n"
		"ImageDocumentSaveToFile(Gatan::DM::ImageDocument const & imgDoc, Gatan::DM::String const & handler, Gatan::DM::String const & fileName, uint32 const saveType)\n"
		"\n"
		"ImageDocumentSaveToFile: Saves the image document to the given file name using the I/O \n"
		"handler specified.\n"
		""},
	 { (char *)"ImageDocumentSetCurrentViewAsUnzoomed", _wrap_ImageDocumentSetCurrentViewAsUnzoomed, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetCurrentViewAsUnzoomed(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentSetCurrentViewAsUnzoomed: Makes the current view the unzoomed view.\n"
		""},
	 { (char *)"ImageDocumentSetDoIntegralZoom", _wrap_ImageDocumentSetDoIntegralZoom, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetDoIntegralZoom(Gatan::DM::ImageDocument const & imgDoc, bool do_integral_zoom)\n"
		"\n"
		"ImageDocumentSetDoIntegralZoom: Sets the integral zoom flag of the image document.\n"
		""},
	 { (char *)"ImageDocumentSetDrawMarginsInPageMode", _wrap_ImageDocumentSetDrawMarginsInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetDrawMarginsInPageMode(Gatan::DM::ImageDocument const & imgDoc, bool doDraw) -> bool\n"
		"\n"
		"ImageDocumentSetDrawMarginsInPageMode: Switches on/off drawing of paper margins for documents\n"
		"in page mode.\n"
		""},
	 { (char *)"ImageDocumentSetDrawPaperInPageMode", _wrap_ImageDocumentSetDrawPaperInPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetDrawPaperInPageMode(Gatan::DM::ImageDocument const & imgDoc, bool doDraw) -> bool\n"
		"\n"
		"ImageDocumentSetDrawPaperInPageMode: Switches on/off drawing of paper rectangle for documents\n"
		"in page mode.\n"
		""},
	 { (char *)"ImageDocumentSetFixedWindowSize", _wrap_ImageDocumentSetFixedWindowSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetFixedWindowSize(Gatan::DM::ImageDocument const & img_doc, double width, double height)\n"
		"\n"
		"ImageDocumentSetFixedWindowSize: Sets width and height of an image document and the indication\n"
		"that the image document should use those values as a fixed size for the displayed window. This\n"
		"function should be used before the image document is displayed for the very first time.\n"
		""},
	 { (char *)"ImageDocumentSetName", _wrap_ImageDocumentSetName, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetName(Gatan::DM::ImageDocument const & imgDoc, Gatan::DM::String const & name)\n"
		"\n"
		"ImageDocumentSetName: Sets the name of the image document.\n"
		""},
	 { (char *)"ImageDocumentSetOrientation", _wrap_ImageDocumentSetOrientation, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetOrientation(Gatan::DM::ImageDocument const & imgDoc, uint32 orientation) -> bool\n"
		"\n"
		"ImageDocumentSetOrientation: Set document orientation, 0: portrait, 1: landscape. Function return\n"
		"true if the orientation was changed, false if there was no change.\n"
		""},
	 { (char *)"ImageDocumentSetRectInView", _wrap_ImageDocumentSetRectInView, METH_VARARGS, (char *)"\n"
		"ImageDocumentSetRectInView(Gatan::DM::ImageDocument const & imgDoc, float v_t, float v_l, float v_b, float v_r, float w_t, float w_l, float w_b, float w_r)\n"
		"\n"
		"ImageDocumentSetRectInView: Zooms the view so the view rect (v_l,v_t,v_b,v_r) is \n"
		"displayed in the window rect (w_l,w_t,w_b,w_r).\n"
		""},
	 { (char *)"ImageDocumentShow", _wrap_ImageDocumentShow, METH_VARARGS, (char *)"\n"
		"ImageDocumentShow(Gatan::DM::ImageDocument const & imgDoc) -> Gatan::DM::Window\n"
		"\n"
		"ImageDocumentShow: Shows the given image document.\n"
		""},
	 { (char *)"ImageDocumentShowAtPosition", _wrap_ImageDocumentShowAtPosition, METH_VARARGS, (char *)"\n"
		"ImageDocumentShowAtPosition(Gatan::DM::ImageDocument const & imgDoc, long x, long y) -> Gatan::DM::Window\n"
		"\n"
		"ImageDocumentShowAtPosition: Shows the given image document at the application position \n"
		"(x,y).\n"
		""},
	 { (char *)"ImageDocumentShowAtRect", _wrap_ImageDocumentShowAtRect, METH_VARARGS, (char *)"\n"
		"ImageDocumentShowAtRect(Gatan::DM::ImageDocument const & imgDoc, long top, long left, long bottom, long right) -> Gatan::DM::Window\n"
		"\n"
		"ImageDocumentShowAtRect: Shows the given image document at the rect \n"
		"(top,left,bottom,right).\n"
		""},
	 { (char *)"ImageDocumentSwitchToImageMode", _wrap_ImageDocumentSwitchToImageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentSwitchToImageMode(Gatan::DM::ImageDocument const & imgDoc, Gatan::DM::ImageDisplay const & imgDisp)\n"
		"\n"
		"ImageDocumentSwitchToImageMode: Switches the view of the document to image mode focused \n"
		"on the display 'imgDisp'.\n"
		""},
	 { (char *)"ImageDocumentSwitchToPageMode", _wrap_ImageDocumentSwitchToPageMode, METH_VARARGS, (char *)"\n"
		"ImageDocumentSwitchToPageMode(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentSwitchToPageMode: Switches the view of the document to page mode.\n"
		""},
	 { (char *)"ImageDocumentUnsetFixedWindowSize", _wrap_ImageDocumentUnsetFixedWindowSize, METH_VARARGS, (char *)"\n"
		"ImageDocumentUnsetFixedWindowSize(Gatan::DM::ImageDocument const & img_doc)\n"
		"\n"
		"ImageDocumentUnsetFixedWindowSize: Unsets the indication that the image document will be displayed\n"
		"with a fixed, nonresizable window size. Function should be used before an image document is\n"
		"displayed for the very first time.\n"
		""},
	 { (char *)"ImageDocumentUpdateDisplay", _wrap_ImageDocumentUpdateDisplay, METH_VARARGS, (char *)"\n"
		"ImageDocumentUpdateDisplay(Gatan::DM::ImageDocument const & imgDoc)\n"
		"\n"
		"ImageDocumentUpdateDisplay: Updates the display of the image document.\n"
		""},
	 { (char *)"ImageGetDataElementBitSize", _wrap_ImageGetDataElementBitSize, METH_VARARGS, (char *)"\n"
		"ImageGetDataElementBitSize(Image img) -> ulong\n"
		"\n"
		"ImageGetDataElementBitSize: Returns the size of the data elements in bits.\n"
		""},
	 { (char *)"ImageGetDataElementByteSize", _wrap_ImageGetDataElementByteSize, METH_VARARGS, (char *)"\n"
		"ImageGetDataElementByteSize(Image img) -> ulong\n"
		"\n"
		"ImageGetDataElementByteSize: Returns the smallest number of bytes that can hold a data \n"
		"element.\n"
		""},
	 { (char *)"ImageGetDataSeed", _wrap_ImageGetDataSeed, METH_VARARGS, (char *)"\n"
		"ImageGetDataSeed(Image img) -> ulong\n"
		"\n"
		"ImageGetDataSeed: Gets the seed of the image data.\n"
		""},
	 { (char *)"ImageGetDataType", _wrap_ImageGetDataType, METH_VARARGS, (char *)"\n"
		"ImageGetDataType(Image img) -> ulong\n"
		"\n"
		"ImageGetDataType: Returns a long representing the data type.\n"
		""},
	 { (char *)"ImageGetDescriptionText", _wrap_ImageGetDescriptionText, METH_VARARGS, (char *)"\n"
		"ImageGetDescriptionText(Image img) -> Gatan::DM::String\n"
		"\n"
		"ImageGetDescriptionText: Gets the description text associated with the image.\n"
		""},
	 { (char *)"ImageGetDimensionCalibration", _wrap_ImageGetDimensionCalibration, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionCalibration(Image argument_1, long dimension, float * origin, float * scale, Gatan::DM::String & units, long calibrationFormat)\n"
		"\n"
		"ImageGetDimensionCalibration: Gets the calibration information of the given dimension.\n"
		""},
	 { (char *)"ImageGetDimensionOrigin", _wrap_ImageGetDimensionOrigin, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionOrigin(Image argument_1, long dimension) -> float\n"
		"\n"
		"ImageGetDimensionOrigin: Returns the origin of the given dimension of image.\n"
		""},
	 { (char *)"ImageGetDimensionScale", _wrap_ImageGetDimensionScale, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionScale(Image argument_1, long dimension) -> float\n"
		"\n"
		"ImageGetDimensionScale: Returns the scale of the given dimension of image.\n"
		""},
	 { (char *)"ImageGetDimensionSize", _wrap_ImageGetDimensionSize, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionSize(Image argument_1, ulong dimension) -> ulong\n"
		"\n"
		"ImageGetDimensionSize: Gets the size of the given dimension.\n"
		""},
	 { (char *)"ImageGetDimensionUnitInfo", _wrap_ImageGetDimensionUnitInfo, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionUnitInfo(Image argument_1, long dimension, Gatan::DM::String & canon_units, long * power)\n"
		"\n"
		"ImageGetDimensionUnitInfo: Copies the unit string of the given dimension of image to the \n"
		"buffer.\n"
		""},
	 { (char *)"ImageGetDimensionUnitString", _wrap_ImageGetDimensionUnitString, METH_VARARGS, (char *)"\n"
		"ImageGetDimensionUnitString(Image argument_1, long dimension) -> Gatan::DM::String\n"
		"\n"
		"ImageGetDimensionUnitString: Copies the unit string of the given dimension of image to \n"
		"the buffer.\n"
		""},
	 { (char *)"ImageGetID", _wrap_ImageGetID, METH_VARARGS, (char *)"\n"
		"ImageGetID(Image argument_1) -> ulong\n"
		"\n"
		"ImageGetID: Returns a unique identifier for the image.\n"
		""},
	 { (char *)"ImageGetImageDisplay", _wrap_ImageGetImageDisplay, METH_VARARGS, (char *)"\n"
		"ImageGetImageDisplay(Image argument_1, long index) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ImageGetImageDisplay: Returns the given image display in which this image is displayed.\n"
		""},
	 { (char *)"ImageGetImageDisplayInImageDocument", _wrap_ImageGetImageDisplayInImageDocument, METH_VARARGS, (char *)"\n"
		"ImageGetImageDisplayInImageDocument(Image argument_1, Gatan::DM::ImageDocument const & imgDoc, long index) -> Gatan::DM::ImageDisplay\n"
		"\n"
		"ImageGetImageDisplayInImageDocument: Returns the given image display in the image \n"
		"document in which this image is displayed.\n"
		""},
	 { (char *)"ImageGetIntensityOrigin", _wrap_ImageGetIntensityOrigin, METH_VARARGS, (char *)"\n"
		"ImageGetIntensityOrigin(Image argument_1) -> float\n"
		"\n"
		"ImageGetIntensityOrigin: Returns the origin of image's intensity.\n"
		""},
	 { (char *)"ImageGetIntensityScale", _wrap_ImageGetIntensityScale, METH_VARARGS, (char *)"\n"
		"ImageGetIntensityScale(Image argument_1) -> float\n"
		"\n"
		"ImageGetIntensityScale: Returns the scale of image's intensity.\n"
		""},
	 { (char *)"ImageGetIntensityUnitInfo", _wrap_ImageGetIntensityUnitInfo, METH_VARARGS, (char *)"\n"
		"ImageGetIntensityUnitInfo(Image argument_1, Gatan::DM::String & canon_units, long * power)\n"
		"\n"
		"ImageGetIntensityUnitInfo: Copies the unit string of image's intensity to the buffer.\n"
		""},
	 { (char *)"ImageGetIntensityUnitString", _wrap_ImageGetIntensityUnitString, METH_VARARGS, (char *)"\n"
		"ImageGetIntensityUnitString(Image argument_1) -> Gatan::DM::String\n"
		"\n"
		"ImageGetIntensityUnitString: Returns the units of the image's intensity.\n"
		""},
	 { (char *)"ImageGetLabel", _wrap_ImageGetLabel, METH_VARARGS, (char *)"\n"
		"ImageGetLabel(Image img) -> Gatan::DM::String\n"
		"\n"
		"ImageGetLabel: Gets the label of the image as used in scripts.\n"
		""},
	 { (char *)"ImageGetName", _wrap_ImageGetName, METH_VARARGS, (char *)"\n"
		"ImageGetName(Image img) -> Gatan::DM::String\n"
		"\n"
		"ImageGetName: Gets the name of the image.\n"
		""},
	 { (char *)"ImageGetNumDimensions", _wrap_ImageGetNumDimensions, METH_VARARGS, (char *)"\n"
		"ImageGetNumDimensions(Image argument_1) -> ulong\n"
		"\n"
		"ImageGetNumDimensions: Returns number of dimensions of the image.\n"
		""},
	 { (char *)"ImageGetOrCreateImageDocument", _wrap_ImageGetOrCreateImageDocument, METH_VARARGS, (char *)"\n"
		"ImageGetOrCreateImageDocument(Image im) -> Gatan::DM::ImageDocument\n"
		"\n"
		"ImageGetOrCreateImageDocument: Returns an image document containing the image, creating \n"
		"one if necessary.\n"
		""},
	 { (char *)"ImageSetActiveSubArea", _wrap_ImageSetActiveSubArea, METH_VARARGS, (char *)"\n"
		"ImageSetActiveSubArea(Image im, bool setSubArea, long top, long left, long bottom, long right)\n"
		"\n"
		"ImageSetActiveSubArea: Sets the area to use for surveying the image data.\n"
		""},
	 { (char *)"ImageGetTagGroup", _wrap_ImageGetTagGroup, METH_VARARGS, (char *)"\n"
		"ImageGetTagGroup(Image img) -> TagGroup\n"
		"\n"
		"ImageGetTagGroup: Gets the tags associated with the image.\n"
		""},
	 { (char *)"ImageGetUniqueID", _wrap_ImageGetUniqueID, METH_VARARGS, (char *)"\n"
		"ImageGetUniqueID(Image image) -> Gatan::DM::ScriptObject\n"
		"\n"
		"ImageGetUniqueID: Returns the unique ID for this image. This id is globally unique \n"
		"across sessions and locations.\n"
		""},
	 { (char *)"ImageIsDataTypeBinary", _wrap_ImageIsDataTypeBinary, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeBinary(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeBinary: Returns true if the data in the image is binary.\n"
		""},
	 { (char *)"ImageIsDataTypeComplex", _wrap_ImageIsDataTypeComplex, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeComplex(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeComplex: Returns true if the data in the image is complex.\n"
		""},
	 { (char *)"ImageIsDataTypeFloat", _wrap_ImageIsDataTypeFloat, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeFloat(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeFloat: Returns true if the data in the image is floating point.\n"
		""},
	 { (char *)"ImageIsDataTypeInteger", _wrap_ImageIsDataTypeInteger, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeInteger(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeInteger: Returns true if the data in the image is integral.\n"
		""},
	 { (char *)"ImageIsDataTypePackedComplex", _wrap_ImageIsDataTypePackedComplex, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypePackedComplex(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypePackedComplex: Returns true if the data in the image is packed complex.\n"
		""},
	 { (char *)"ImageIsDataTypeReal", _wrap_ImageIsDataTypeReal, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeReal(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeReal: Returns true if the data in the image is real.\n"
		""},
	 { (char *)"ImageIsDataTypeRGB", _wrap_ImageIsDataTypeRGB, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeRGB(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeRGB: Returns true if the data in the image is rgb.\n"
		""},
	 { (char *)"ImageIsDataTypeSignedInteger", _wrap_ImageIsDataTypeSignedInteger, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeSignedInteger(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeSignedInteger: Returns true if the data in the image is integral and \n"
		"signed.\n"
		""},
	 { (char *)"ImageIsDataTypeUnsignedInteger", _wrap_ImageIsDataTypeUnsignedInteger, METH_VARARGS, (char *)"\n"
		"ImageIsDataTypeUnsignedInteger(Image img) -> bool\n"
		"\n"
		"ImageIsDataTypeUnsignedInteger: Returns true if the data in the image is integral and \n"
		"unsigned.\n"
		""},
	 { (char *)"ImageIsDimensionCalibrationDisplayed", _wrap_ImageIsDimensionCalibrationDisplayed, METH_VARARGS, (char *)"\n"
		"ImageIsDimensionCalibrationDisplayed(Image im, ulong dim) -> bool\n"
		"\n"
		"ImageIsDimensionCalibrationDisplayed: Returns 'true' if the calibration of the 'dim'th \n"
		"dimension is displayed.\n"
		""},
	 { (char *)"ImageIsIntensityCalibrationDisplayed", _wrap_ImageIsIntensityCalibrationDisplayed, METH_VARARGS, (char *)"\n"
		"ImageIsIntensityCalibrationDisplayed(Image im) -> bool\n"
		"\n"
		"ImageIsIntensityCalibrationDisplayed: Returns 'true' if the calibration of the intensity \n"
		"is displayed.\n"
		""},
	 { (char *)"ImageIsValid", _wrap_ImageIsValid, METH_VARARGS, (char *)"\n"
		"ImageIsValid(Image image) -> bool\n"
		"\n"
		"ImageIsValid: Returns true if 'image' is a valid object.\n"
		""},
	 { (char *)"ImageOp_ScalarCombine", _wrap_ImageOp_ScalarCombine, METH_VARARGS, (char *)"\n"
		"ImageOp_ScalarCombine(uint32 op, Image im1, double scalar, Image im2)\n"
		"\n"
		"ImageOp_ScalarCombine: add/multiply image 1 with scalar and assign result to image 2\n"
		"op is add:0, mul:2\n"
		""},
	 { (char *)"ImageOp_ScalarCombineAssign", _wrap_ImageOp_ScalarCombineAssign, METH_VARARGS, (char *)"\n"
		"ImageOp_ScalarCombineAssign(uint32 op, double scalar, Image im)\n"
		"\n"
		"ImageOp_ScalarCombineAssign: add/multiply image with scalar\n"
		"op is add:0, mul:2\n"
		""},
	 { (char *)"ImageSetDescriptionText", _wrap_ImageSetDescriptionText, METH_VARARGS, (char *)"\n"
		"ImageSetDescriptionText(Image img, Gatan::DM::String const & description)\n"
		"\n"
		"ImageSetDescriptionText: Sets the description text associated with the image.\n"
		""},
	 { (char *)"ImageSetDimensionCalibration", _wrap_ImageSetDimensionCalibration, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionCalibration(Image argument_1, long dimenstion, float origin, float scale, Gatan::DM::String const & unitString, long calibrationFormat)\n"
		"\n"
		"ImageSetDimensionCalibration: Sets the calibration for the given dimension.\n"
		""},
	 { (char *)"ImageSetDimensionCalibrationDisplayed", _wrap_ImageSetDimensionCalibrationDisplayed, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionCalibrationDisplayed(Image im, ulong dim, bool do_display)\n"
		"\n"
		"ImageSetDimensionCalibrationDisplayed: Sets whether or not to display the 'dim'th \n"
		"dimension in calibrated units to 'do_display'.\n"
		""},
	 { (char *)"ImageSetDimensionOrigin", _wrap_ImageSetDimensionOrigin, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionOrigin(Image argument_1, long dimension, float origin)\n"
		"\n"
		"ImageSetDimensionOrigin: Sets the origin of the given dimension of image.\n"
		""},
	 { (char *)"ImageSetDimensionScale", _wrap_ImageSetDimensionScale, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionScale(Image argument_1, long dimension, float scale)\n"
		"\n"
		"ImageSetDimensionScale: Sets the scale of the given dimension of image.\n"
		""},
	 { (char *)"ImageSetDimensionUnitInfo", _wrap_ImageSetDimensionUnitInfo, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionUnitInfo(Image argument_1, long dimension, Gatan::DM::String const & canon_units, long power)\n"
		"\n"
		"ImageSetDimensionUnitInfo: Sets the unit string of the given dimension of image.\n"
		""},
	 { (char *)"ImageSetDimensionUnitString", _wrap_ImageSetDimensionUnitString, METH_VARARGS, (char *)"\n"
		"ImageSetDimensionUnitString(Image argument_1, long dimension, Gatan::DM::String const & units)\n"
		"\n"
		"ImageSetDimensionUnitString: Sets the unit string of the given dimension of image.\n"
		""},
	 { (char *)"ImageSetIntensityCalibrationDisplayed", _wrap_ImageSetIntensityCalibrationDisplayed, METH_VARARGS, (char *)"\n"
		"ImageSetIntensityCalibrationDisplayed(Image im, bool do_display)\n"
		"\n"
		"ImageSetIntensityCalibrationDisplayed: Sets whether or not to display the intensity in \n"
		"calibrated units to 'do_display'.\n"
		""},
	 { (char *)"ImageSetIntensityOrigin", _wrap_ImageSetIntensityOrigin, METH_VARARGS, (char *)"\n"
		"ImageSetIntensityOrigin(Image argument_1, float origin)\n"
		"\n"
		"ImageSetIntensityOrigin: Sets the origin of image's intensity.\n"
		""},
	 { (char *)"ImageSetIntensityScale", _wrap_ImageSetIntensityScale, METH_VARARGS, (char *)"\n"
		"ImageSetIntensityScale(Image argument_1, float scale)\n"
		"\n"
		"ImageSetIntensityScale: Sets the scale of image's intensity.\n"
		""},
	 { (char *)"ImageSetIntensityUnitInfo", _wrap_ImageSetIntensityUnitInfo, METH_VARARGS, (char *)"\n"
		"ImageSetIntensityUnitInfo(Image argument_1, Gatan::DM::String const & canon_units, long power)\n"
		"\n"
		"ImageSetIntensityUnitInfo: Sets the unit string of image's intensity.\n"
		""},
	 { (char *)"ImageSetIntensityUnitString", _wrap_ImageSetIntensityUnitString, METH_VARARGS, (char *)"\n"
		"ImageSetIntensityUnitString(Image argument_1, Gatan::DM::String const & units)\n"
		"\n"
		"ImageSetIntensityUnitString: Sets the unit string of image's intensity.\n"
		""},
	 { (char *)"ImageSetName", _wrap_ImageSetName, METH_VARARGS, (char *)"\n"
		"ImageSetName(Image img, Gatan::DM::String const & name)\n"
		"\n"
		"ImageSetName: Sets the name of the image.\n"
		""},
	 { (char *)"ImageWindowGetImageDocument", _wrap_ImageWindowGetImageDocument, METH_VARARGS, (char *)"\n"
		"ImageWindowGetImageDocument(Gatan::DM::Window const & window) -> Gatan::DM::ImageDocument\n"
		"\n"
		"ImageWindowGetImageDocument: Gets the image document displayed in the window.\n"
		""},
	 { (char *)"InstallScriptLibraryFile", _wrap_InstallScriptLibraryFile, METH_VARARGS, (char *)"\n"
		"InstallScriptLibraryFile(char const * fileName) -> float\n"
		"\n"
		"InstallScriptLibraryFile: Loads the script file indicated by fileName, executes it, and \n"
		"publishes any functions contained inside. Always returns 0.\n"
		""},
	 { (char *)"IntegerImage", _wrap_IntegerImage, METH_VARARGS, (char *)"\n"
		"IntegerImage(char const * title, long bytes, bool isSigned, long d0, long d1, long d2, long d3) -> Image\n"
		"IntegerImage(char const * title, long bytes, bool isSigned, long d0, long d1, long d2) -> Image\n"
		"IntegerImage(char const * title, long bytes, bool isSigned, long d0, long d1) -> Image\n"
		"IntegerImage(char const * title, long bytes, bool isSigned, long d0) -> Image\n"
		"\n"
		"IntegerImage: Creates a 2D integer image of size [d0,d1] with the given title. The bytes \n"
		"and isSigned parameters specify integer specific attributes of the data.\n"
		""},
	 { (char *)"Is2DDisplay", _wrap_Is2DDisplay, METH_VARARGS, (char *)"\n"
		"Is2DDisplay(Image argument_1) -> bool\n"
		"\n"
		"Is2DDisplay: Return 1 if the image is displayed as a raster image display; return 0 \n"
		"otherwise.\n"
		""},
	 { (char *)"IsBinaryDataType", _wrap_IsBinaryDataType, METH_VARARGS, (char *)"\n"
		"IsBinaryDataType(Image argument_1) -> bool\n"
		"\n"
		"IsBinaryDataType: Returns 1 if the image is an binary data type; returns 0 otherwise.\n"
		""},
	 { (char *)"IsByteImage", _wrap_IsByteImage, METH_VARARGS, (char *)"\n"
		"IsByteImage(Image argument_1) -> bool\n"
		"\n"
		"IsByteImage: Returns 1 if the image is unsigned 1-byte integer data; returns 0 otherwise.\n"
		""},
	 { (char *)"IsComplexDataType", _wrap_IsComplexDataType, METH_VARARGS, (char *)"\n"
		"IsComplexDataType(Image argument_1, long bytes) -> bool\n"
		"\n"
		"IsComplexDataType: Returns 1 if the image is an complex data type of size bytes; returns \n"
		"0 otherwise.\n"
		""},
	 { (char *)"IsComplexImage", _wrap_IsComplexImage, METH_VARARGS, (char *)"\n"
		"IsComplexImage(Image argument_1) -> bool\n"
		"\n"
		"IsComplexImage: Returns 1 if the image is single precision complex data; returns 0 \n"
		"otherwise.\n"
		""},
	 { (char *)"IsDisplayValid", _wrap_IsDisplayValid, METH_VARARGS, (char *)"\n"
		"IsDisplayValid(Image argument_1) -> bool\n"
		"\n"
		"IsDisplayValid: Return 1 if the image's display is up-to-date and 0 otherwise.\n"
		""},
	 { (char *)"IsExceptionUserAbort", _wrap_IsExceptionUserAbort, METH_VARARGS, (char *)"\n"
		"IsExceptionUserAbort() -> bool\n"
		"\n"
		"IsExceptionUserAbort: Returns true if the exception currently in effect is a user abort.\n"
		""},
	 { (char *)"IsFloatImage", _wrap_IsFloatImage, METH_VARARGS, (char *)"\n"
		"IsFloatImage(Image argument_1) -> bool\n"
		"\n"
		"IsFloatImage: Returns 1 if the image is single precision real data; returns 0 otherwise.\n"
		""},
	 { (char *)"IsImageComplex", _wrap_IsImageComplex, METH_VARARGS, (char *)"\n"
		"IsImageComplex(long id) -> bool\n"
		"\n"
		"IsImageComplex: Return true or false to indicate whether given image with the given id \n"
		"is complex-valued or not.\n"
		""},
	 { (char *)"IsImageReal", _wrap_IsImageReal, METH_VARARGS, (char *)"\n"
		"IsImageReal(long id) -> bool\n"
		"\n"
		"IsImageReal: Return true or false to indicate whether given image with the given id is \n"
		"real-valued or not.\n"
		""},
	 { (char *)"IsImageRGB", _wrap_IsImageRGB, METH_VARARGS, (char *)"\n"
		"IsImageRGB(long id) -> bool\n"
		"\n"
		"IsImageRGB: Return true or false to indicate whether given image with the given id is \n"
		"RGB-valued or not.\n"
		""},
	 { (char *)"IsIntegerDataType", _wrap_IsIntegerDataType, METH_VARARGS, (char *)"\n"
		"IsIntegerDataType(Image argument_1, long bytes, bool isSigned) -> bool\n"
		"\n"
		"IsIntegerDataType: Returns 1 if the image is an integer data type of size bytes with a \n"
		"matching sign charateristic as signed; returns 0 otherwise.\n"
		""},
	 { (char *)"IsLongImage", _wrap_IsLongImage, METH_VARARGS, (char *)"\n"
		"IsLongImage(Image argument_1) -> bool\n"
		"\n"
		"IsLongImage: Returns 1 if the image is signed 4-byte integer data; returns 0 otherwise.\n"
		""},
	 { (char *)"IsPackedComplexImage", _wrap_IsPackedComplexImage, METH_VARARGS, (char *)"\n"
		"IsPackedComplexImage(Image argument_1) -> bool\n"
		"\n"
		"IsPackedComplexImage: Returns 1 if the image is packed complex data; returns 0 otherwise.\n"
		""},
	 { (char *)"IsRealDataType", _wrap_IsRealDataType, METH_VARARGS, (char *)"\n"
		"IsRealDataType(Image argument_1, long bytes) -> bool\n"
		"\n"
		"IsRealDataType: Returns 1 if the image is an real data type of size bytes; returns 0 \n"
		"otherwise.\n"
		""},
	 { (char *)"IsRGBDataType", _wrap_IsRGBDataType, METH_VARARGS, (char *)"\n"
		"IsRGBDataType(Image argument_1, long bytes) -> bool\n"
		"\n"
		"IsRGBDataType: Returns 1 if the image is an RGB data type of size bytes; returns 0 \n"
		"otherwise.\n"
		""},
	 { (char *)"IsShortImage", _wrap_IsShortImage, METH_VARARGS, (char *)"\n"
		"IsShortImage(Image argument_1) -> bool\n"
		"\n"
		"IsShortImage: Returns 1 if the image is signed 2-byte integer data; returns 0 otherwise.\n"
		""},
	 { (char *)"KeepImage", _wrap_KeepImage, METH_VARARGS, (char *)"\n"
		"KeepImage(Image argument_1)\n"
		"\n"
		"KeepImage: Keep the image from being deleted automatically when the image's script scope \n"
		"is exited.\n"
		""},
	 { (char *)"LinePlotImageDisplayCountSlices", _wrap_LinePlotImageDisplayCountSlices, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayCountSlices(Gatan::DM::LinePlotImageDisplay const & lpid) -> long\n"
		"\n"
		"LinePlotImageDisplayCountSlices: Returns the number of slices in the line plot.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetBaseIntensity", _wrap_LinePlotImageDisplayGetBaseIntensity, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetBaseIntensity(Gatan::DM::LinePlotImageDisplay const & lpid) -> double\n"
		"\n"
		"LinePlotImageDisplayGetBaseIntensity: Returns the base intensity of the line plot.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetContrastLimits", _wrap_LinePlotImageDisplayGetContrastLimits, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetContrastLimits(Gatan::DM::LinePlotImageDisplay const & lpid, float * lowLimit, float * highLimit)\n"
		"\n"
		"LinePlotImageDisplayGetContrastLimits: Gets the lowest and higest intensities displayed.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetDisplayedChannels", _wrap_LinePlotImageDisplayGetDisplayedChannels, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetDisplayedChannels(Gatan::DM::LinePlotImageDisplay const & lpid, float * leftChannel, float * rightChannel)\n"
		"\n"
		"LinePlotImageDisplayGetDisplayedChannels: Gets the leftmost and rightmost displayed \n"
		"channels.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetDoAutoSurvey", _wrap_LinePlotImageDisplayGetDoAutoSurvey, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetDoAutoSurvey(Gatan::DM::LinePlotImageDisplay const & lpid, bool * doAutoSurveyLow, bool * doAutoSurveyHigh)\n"
		"\n"
		"LinePlotImageDisplayGetDoAutoSurvey: Gets whether to auto-survey is done on the high and \n"
		"low intensity limits.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetImageToGroupTransform", _wrap_LinePlotImageDisplayGetImageToGroupTransform, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetImageToGroupTransform(Gatan::DM::LinePlotImageDisplay const & lpid, Gatan::DM::ScriptObject const & slice_id, Gatan::DM::ScriptObject const & ref_id, double * off_val, double * scale_val, double * off_dim_0, double * scale_dim_0)\n"
		"\n"
		"LinePlotImageDisplayGetImageToGroupTransform: return image to group transform.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSlice", _wrap_LinePlotImageDisplayGetSlice, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSlice(Gatan::DM::LinePlotImageDisplay const & lpid) -> long\n"
		"\n"
		"LinePlotImageDisplayGetSlice: Returns slice currently displayed at the bottom.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSliceComponentColor", _wrap_LinePlotImageDisplayGetSliceComponentColor, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSliceComponentColor(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, long comp_index, double * r, double * g, double * b)\n"
		"\n"
		"LinePlotImageDisplayGetSliceComponentColor: Returns the color of the 'comp_index'th \n"
		"component of the 'slice_index'th slice.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSliceDrawingStyle", _wrap_LinePlotImageDisplayGetSliceDrawingStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSliceDrawingStyle(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index) -> long\n"
		"\n"
		"LinePlotImageDisplayGetSliceDrawingStyle: Returns the drawing style of the \n"
		"'slice_index'th slice.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetTrackingStyle", _wrap_LinePlotImageDisplayGetTrackingStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetTrackingStyle(Gatan::DM::LinePlotImageDisplay const & lpid, uint16 * track_style_x, uint16 * track_style_y)\n"
		"\n"
		"LinePlotImageDisplayGetTrackingStyle: Gets the tracking style of the line plot.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSliceTransparency", _wrap_LinePlotImageDisplayGetSliceTransparency, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSliceTransparency(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, bool * doTransparent, double * transparency)\n"
		"\n"
		"LinePlotImageDisplayGetSliceTransparency: Gets the transparency of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSliceTransparencyStyle", _wrap_LinePlotImageDisplayGetSliceTransparencyStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSliceTransparencyStyle(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, uint32 * transparencyStyle)\n"
		"\n"
		"LinePlotImageDisplayGetSliceTransparencyStyle: Gets the transparencyStyle of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplayGetSliceLineThickness", _wrap_LinePlotImageDisplayGetSliceLineThickness, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayGetSliceLineThickness(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index) -> long\n"
		"\n"
		"LinePlotImageDisplayGetSliceLineThickness: Gets the line thickness of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplayIsBackgroundOn", _wrap_LinePlotImageDisplayIsBackgroundOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayIsBackgroundOn(Gatan::DM::LinePlotImageDisplay const & lpid) -> bool\n"
		"\n"
		"LinePlotImageDisplayIsBackgroundOn: Returns true if the background is erased.\n"
		""},
	 { (char *)"LinePlotImageDisplayIsFilled", _wrap_LinePlotImageDisplayIsFilled, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayIsFilled(Gatan::DM::LinePlotImageDisplay const & lpid) -> bool\n"
		"\n"
		"LinePlotImageDisplayIsFilled: Returns true if the line plot is filled.\n"
		""},
	 { (char *)"LinePlotImageDisplayIsFrameOn", _wrap_LinePlotImageDisplayIsFrameOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayIsFrameOn(Gatan::DM::LinePlotImageDisplay const & lpid) -> bool\n"
		"\n"
		"LinePlotImageDisplayIsFrameOn: Returns true if the frame is drawn.\n"
		""},
	 { (char *)"LinePlotImageDisplayIsGridOn", _wrap_LinePlotImageDisplayIsGridOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplayIsGridOn(Gatan::DM::LinePlotImageDisplay const & lpid) -> bool\n"
		"\n"
		"LinePlotImageDisplayIsGridOn: Returns true if the grid is displayed on.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetBackgroundOn", _wrap_LinePlotImageDisplaySetBackgroundOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetBackgroundOn(Gatan::DM::LinePlotImageDisplay const & lpid, bool on)\n"
		"\n"
		"LinePlotImageDisplaySetBackgroundOn: Sets whether to erase the background.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetBaseIntensity", _wrap_LinePlotImageDisplaySetBaseIntensity, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetBaseIntensity(Gatan::DM::LinePlotImageDisplay const & lpid, double base_intensity)\n"
		"\n"
		"LinePlotImageDisplaySetBaseIntensity: Sets the base intensity of the line plot.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetContrastLimits", _wrap_LinePlotImageDisplaySetContrastLimits, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetContrastLimits(Gatan::DM::LinePlotImageDisplay const & lpid, float lowLimit, float highLimit)\n"
		"\n"
		"LinePlotImageDisplaySetContrastLimits: Sets the lowest and highest intensities displayed.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetDisplayedChannels", _wrap_LinePlotImageDisplaySetDisplayedChannels, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetDisplayedChannels(Gatan::DM::LinePlotImageDisplay const & lpid, float leftChannel, float rightChannel)\n"
		"\n"
		"LinePlotImageDisplaySetDisplayedChannels: Sets the leftmost and rightmost displayed \n"
		"channels.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetDoAutoSurvey", _wrap_LinePlotImageDisplaySetDoAutoSurvey, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetDoAutoSurvey(Gatan::DM::LinePlotImageDisplay const & lpid, bool doAutoSurveyLow, bool doAutoSurveyHigh)\n"
		"\n"
		"LinePlotImageDisplaySetDoAutoSurvey: Sets whether to do auto-survey on the high and low \n"
		"intensity limits.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetFilled", _wrap_LinePlotImageDisplaySetFilled, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetFilled(Gatan::DM::LinePlotImageDisplay const & lpid, bool on)\n"
		"\n"
		"LinePlotImageDisplaySetFilled: Sets whether to fill the lineplot.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetFrameOn", _wrap_LinePlotImageDisplaySetFrameOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetFrameOn(Gatan::DM::LinePlotImageDisplay const & lpid, bool on)\n"
		"\n"
		"LinePlotImageDisplaySetFrameOn: Sets whether to draw the frame.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetGridOn", _wrap_LinePlotImageDisplaySetGridOn, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetGridOn(Gatan::DM::LinePlotImageDisplay const & lpid, bool on)\n"
		"\n"
		"LinePlotImageDisplaySetGridOn: Sets whether to draw the grid.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetImageToGroupTransform", _wrap_LinePlotImageDisplaySetImageToGroupTransform, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetImageToGroupTransform(Gatan::DM::LinePlotImageDisplay const & lpid, Gatan::DM::ScriptObject const & slice_id, Gatan::DM::ScriptObject const & ref_id, double off_val, double scale_val, double off_dim_0, double scale_dim_0)\n"
		"\n"
		"LinePlotImageDisplaySetImageToGroupTransform: Sets image to group transfor,.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetLegendShown", _wrap_LinePlotImageDisplaySetLegendShown, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetLegendShown(Gatan::DM::LinePlotImageDisplay const & lpid, bool on)\n"
		"\n"
		"LinePlotImageDisplaySetLegendShown: Sets whether or not the legend is shown.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSlice", _wrap_LinePlotImageDisplaySetSlice, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSlice(Gatan::DM::LinePlotImageDisplay const & lpid, long slice)\n"
		"\n"
		"LinePlotImageDisplaySetSlice: Sets the slice currently displayed at the bottom.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSliceComponentColor", _wrap_LinePlotImageDisplaySetSliceComponentColor, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSliceComponentColor(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, long comp_index, double r, double g, double b)\n"
		"\n"
		"LinePlotImageDisplaySetSliceComponentColor: Sets the color of the 'comp_index'th \n"
		"component of the 'slice_index'th slice.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSliceDrawingStyle", _wrap_LinePlotImageDisplaySetSliceDrawingStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSliceDrawingStyle(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, long style)\n"
		"\n"
		"LinePlotImageDisplaySetSliceDrawingStyle: Sets the drawing style of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSliceTransparency", _wrap_LinePlotImageDisplaySetSliceTransparency, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSliceTransparency(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, bool doTransparent, double transparency)\n"
		"\n"
		"LinePlotImageDisplaySetSliceTransparency: Sets the transparency of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSliceTransparencyStyle", _wrap_LinePlotImageDisplaySetSliceTransparencyStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSliceTransparencyStyle(Gatan::DM::LinePlotImageDisplay const & lpid, uint32 slice_index, uint32 transparencyStyle)\n"
		"\n"
		"LinePlotImageDisplaySetSliceTransparencyStyle: Sets the transparencyStyle of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetSliceLineThickness", _wrap_LinePlotImageDisplaySetSliceLineThickness, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetSliceLineThickness(Gatan::DM::LinePlotImageDisplay const & lpid, long slice_index, long thickness)\n"
		"\n"
		"LinePlotImageDisplaySetSliceLineThickness: Sets the line thickness of the 'slice_index'th \n"
		"slice.\n"
		""},
	 { (char *)"LinePlotImageDisplaySetTrackingStyle", _wrap_LinePlotImageDisplaySetTrackingStyle, METH_VARARGS, (char *)"\n"
		"LinePlotImageDisplaySetTrackingStyle(Gatan::DM::LinePlotImageDisplay const & lpid, uint16 track_style_x, uint16 track_style_y)\n"
		"\n"
		"LinePlotImageDisplaySetTrackingStyle: Sets the tracking style of the line plot.\n"
		""},
	 { (char *)"LUDecomposition", _wrap_LUDecomposition, METH_VARARGS, (char *)"\n"
		"LUDecomposition(Image a, Image b) -> Image\n"
		"\n"
		"LUDecomposition: Return the image resulting from a LU decomposition on images a,b.\n"
		""},
	 { (char *)"MaintainStatus", _wrap_MaintainStatus, METH_VARARGS, (char *)"\n"
		"MaintainStatus()\n"
		"\n"
		"MaintainStatus: Update the status window if it needs to be updated.\n"
		""},
	 { (char *)"MatrixDeterminant", _wrap_MatrixDeterminant, METH_VARARGS, (char *)"\n"
		"MatrixDeterminant(Image a) -> float\n"
		"\n"
		"MatrixDeterminant: Return the matrix determinant number of matrix image a.\n"
		""},
	 { (char *)"MatrixInverse", _wrap_MatrixInverse, METH_VARARGS, (char *)"\n"
		"MatrixInverse(Image a) -> Image\n"
		"\n"
		"MatrixInverse: Return the matrix inverse image of matrix image a.\n"
		""},
	 { (char *)"MatrixMultiply", _wrap_MatrixMultiply, METH_VARARGS, (char *)"\n"
		"MatrixMultiply(Image a, Image b) -> Image\n"
		"\n"
		"MatrixMultiply: Return the matrix product image of matrix images a and b.\n"
		""},
	 { (char *)"MatrixPrint", _wrap_MatrixPrint, METH_VARARGS, (char *)"\n"
		"MatrixPrint(Image a)\n"
		"\n"
		"MatrixPrint: Print an image as a matrix to the results window.\n"
		""},
	 { (char *)"MatrixTranspose", _wrap_MatrixTranspose, METH_VARARGS, (char *)"\n"
		"MatrixTranspose(Image a) -> Image\n"
		"\n"
		"MatrixTranspose: Return the matrix transpose image of matrix image a.\n"
		""},
	 { (char *)"MedianFilter", _wrap_MedianFilter, METH_VARARGS, (char *)"\n"
		"MedianFilter(Image source, long filterType, long size) -> Image\n"
		"\n"
		"MedianFilter: Performs a median filter on the source image according to the filterType \n"
		"parameter (0=horizontal, 1=vertical, 2=cross, 3=entire) and the size parameter. Size \n"
		"specifies size in each direction - so a 'size' of 2 is a 5x5 window.\n"
		""},
	 { (char *)"ModelessDialog", _wrap_ModelessDialog, METH_VARARGS, (char *)"\n"
		"ModelessDialog(char const * prompt, char const * buttonName, long semaphore)\n"
		"\n"
		"ModelessDialog: Present a modeless dialog with the prompt and buttonName. When the user \n"
		"presses the button, the semaphore will be cleared. This function can only be used in the \n"
		"background.\n"
		""},
	 { (char *)"ModelessFFT", _wrap_ModelessFFT, METH_VARARGS, (char *)"\n"
		"ModelessFFT(Image argument_1, bool reduce)\n"
		"\n"
		"ModelessFFT: Begin the modeless FFT procedure with the image as the source. The \n"
		"parameter reduce indicates whether to perform a reduced FFT.\n"
		""},
	 { (char *)"MPClose", _wrap_MPClose, METH_VARARGS, (char *)"\n"
		"MPClose(Image image, long neighbors) -> Image\n"
		"\n"
		"MPClose: Morphologically close the image using the neighbors parameter to control the \n"
		"closing and return the resulting image. The source image must be binary.\n"
		""},
	 { (char *)"MPDilate", _wrap_MPDilate, METH_VARARGS, (char *)"\n"
		"MPDilate(Image image, long neighbors) -> Image\n"
		"\n"
		"MPDilate: Morphologically dilate the image using the neighbors parameter to control the \n"
		"dilation and return the resulting image. The source image must be binary.\n"
		""},
	 { (char *)"MPDistanceMap", _wrap_MPDistanceMap, METH_VARARGS, (char *)"\n"
		"MPDistanceMap(Image image) -> Image\n"
		"\n"
		"MPDistanceMap: Generate a distance map from the source image and return the resulting \n"
		"real image. The source image must be binary.\n"
		""},
	 { (char *)"MPErode", _wrap_MPErode, METH_VARARGS, (char *)"\n"
		"MPErode(Image image, long neighbors) -> Image\n"
		"\n"
		"MPErode: Morphologically erode the image using the neighbors parameter to control the \n"
		"erosion and return the resulting image. The source image must be binary.\n"
		""},
	 { (char *)"MPEuclideanDistanceMap", _wrap_MPEuclideanDistanceMap, METH_VARARGS, (char *)"\n"
		"MPEuclideanDistanceMap(Image image) -> Image\n"
		"\n"
		"MPEuclideanDistanceMap: Generate a Euclidean distance map from the source image and \n"
		"return the resulting real image. The source image must be binary.\n"
		""},
	 { (char *)"MPExactDistanceMap", _wrap_MPExactDistanceMap, METH_VARARGS, (char *)"\n"
		"MPExactDistanceMap(Image image) -> Image\n"
		"\n"
		"MPExactDistanceMap: Generate an exact distance map from the source image and return the \n"
		"resulting complex image. The source image must be binary.\n"
		""},
	 { (char *)"MPOpen", _wrap_MPOpen, METH_VARARGS, (char *)"\n"
		"MPOpen(Image image, long neighbors) -> Image\n"
		"\n"
		"MPOpen: Morphologically open the image using the neighbors parameter to control the \n"
		"opening and return the resulting image. The source image must be binary.\n"
		""},
	 { (char *)"MPOutline", _wrap_MPOutline, METH_VARARGS, (char *)"\n"
		"MPOutline(Image image) -> Image\n"
		"\n"
		"MPOutline: Morphologically outline the image and return the resulting image. The source \n"
		"image must be binary.\n"
		""},
	 { (char *)"MultiplyFloatByFloat", _wrap_MultiplyFloatByFloat, METH_VARARGS, (char *)"\n"
		"MultiplyFloatByFloat(Image a, Image b)\n"
		"\n"
		"MultiplyFloatByFloat: Multiply real image a by real image b and store the result in \n"
		"a. No data type checking is performed.\n"
		""},
	 { (char *)"MultiplyPackedByFloat", _wrap_MultiplyPackedByFloat, METH_VARARGS, (char *)"\n"
		"MultiplyPackedByFloat(Image a, Image b)\n"
		"\n"
		"MultiplyPackedByFloat: Multiply packed image a by real image b and store the result \n"
		"in a. No data type checking is performed.\n"
		""},
	 { (char *)"MultiplyPackedByScalar", _wrap_MultiplyPackedByScalar, METH_VARARGS, (char *)"\n"
		"MultiplyPackedByScalar(Image a, float argument_2)\n"
		"\n"
		"MultiplyPackedByScalar: Multiply packed image a by real and store the result in a. No \n"
		"data type checking is performed.\n"
		""},
	 { (char *)"NewArrowAnnotation", _wrap_NewArrowAnnotation, METH_VARARGS, (char *)"\n"
		"NewArrowAnnotation(float top, float left, float bottom, float right) -> Gatan::DM::Component\n"
		"\n"
		"NewArrowAnnotation: Creates a new arrow annotation.\n"
		""},
	 { (char *)"NewBoxAnnotation", _wrap_NewBoxAnnotation, METH_VARARGS, (char *)"\n"
		"NewBoxAnnotation(float top, float left, float bottom, float right) -> Gatan::DM::Component\n"
		"\n"
		"NewBoxAnnotation: Creates a new box annotation.\n"
		""},
	 { (char *)"NewComponent", _wrap_NewComponent, METH_VARARGS, (char *)"\n"
		"NewComponent(long type, float f1, float f2, float f3, float f4) -> Gatan::DM::Component\n"
		"\n"
		"NewComponent: Creates a new annotaiton of type 'type'\n"
		""},
	 { (char *)"NewDoubleArrowAnnotation", _wrap_NewDoubleArrowAnnotation, METH_VARARGS, (char *)"\n"
		"NewDoubleArrowAnnotation(float top, float left, float bottom, float right) -> Gatan::DM::Component\n"
		"\n"
		"NewDoubleArrowAnnotation: Creates a new double arrow annotation.\n"
		""},
	 { (char *)"NewGroupAnnotation", _wrap_NewGroupAnnotation, METH_VARARGS, (char *)"\n"
		"NewGroupAnnotation() -> Gatan::DM::Component\n"
		"\n"
		"NewGroupAnnotation: Creates a new group annotation.\n"
		""},
	 { (char *)"NewImageFromFile", _wrap_NewImageFromFile, METH_VARARGS, (char *)"\n"
		"NewImageFromFile(Gatan::DM::String const & file_path) -> Image\n"
		"\n"
		"NewImageFromFile: Opens a file and reads it as an image.\n"
		""},
	 { (char *)"NewLineAnnotation", _wrap_NewLineAnnotation, METH_VARARGS, (char *)"\n"
		"NewLineAnnotation(float top, float left, float bottom, float right) -> Gatan::DM::Component\n"
		"\n"
		"NewLineAnnotation: Creates a new line annotation.\n"
		""},
	 { (char *)"NewLiveFFT", _wrap_NewLiveFFT, METH_VARARGS, (char *)"\n"
		"NewLiveFFT(Gatan::DM::ImageDisplay const & imageDisplay, Gatan::DM::ROI const & roi, bool reduce) -> Image\n"
		"\n"
		"NewLiveFFT: Creates a new live fft of the area in 'roi', that is reduced if 'reduce' is \n"
		"'true'\n"
		""},
	 { (char *)"NewLiveHistogram", _wrap_NewLiveHistogram, METH_VARARGS, (char *)"\n"
		"NewLiveHistogram(Gatan::DM::ImageDisplay const & imageDisplay, Gatan::DM::ROI const & roi, long num_channels) -> Image\n"
		"\n"
		"NewLiveHistogram: Creates a new live histogram of the area in 'roi', binned by \n"
		"'num_channels'\n"
		""},
	 { (char *)"NewLiveProfile", _wrap_NewLiveProfile, METH_VARARGS, (char *)"\n"
		"NewLiveProfile(Gatan::DM::ImageDisplay const & imageDisplay, float start_x, float start_y, float end_x, float end_y, float width) -> Image\n"
		"\n"
		"NewLiveProfile: Creates a new live profile from (start_x,start_y) to (end_x,end_y)\n"
		""},
	 { (char *)"NewOvalAnnotation", _wrap_NewOvalAnnotation, METH_VARARGS, (char *)"\n"
		"NewOvalAnnotation(float top, float left, float bottom, float right) -> Gatan::DM::Component\n"
		"\n"
		"NewOvalAnnotation: Creates a new oval annotation.\n"
		""},
	 { (char *)"NewPictureAnnotation", _wrap_NewPictureAnnotation, METH_VARARGS, (char *)"\n"
		"NewPictureAnnotation(float top, float left, float bottom, float right, long picture) -> Gatan::DM::Component\n"
		"\n"
		"NewPictureAnnotation: Creates a new picture annotation.\n"
		""},
	 { (char *)"NewROI", _wrap_NewROI, METH_VARARGS, (char *)"\n"
		"NewROI() -> Gatan::DM::ROI\n"
		"\n"
		"NewROI: Creates an empty region of interest.\n"
		""},
	 { (char *)"NewScriptWindow", _wrap_NewScriptWindow, METH_VARARGS, (char *)"\n"
		"NewScriptWindow(Gatan::DM::String const & title, long top, long left, long bottom, long right) -> Gatan::DM::Window\n"
		"\n"
		"NewScriptWindow: Creates a new editor window.\n"
		""},
	 { (char *)"NewScriptWindowFromFile", _wrap_NewScriptWindowFromFile, METH_VARARGS, (char *)"\n"
		"NewScriptWindowFromFile(Gatan::DM::String const & file_name, long top, long left, long bottom, long right) -> Gatan::DM::Window\n"
		"NewScriptWindowFromFile(Gatan::DM::String const & file_name) -> Gatan::DM::Window\n"
		"NewScriptWindowFromFile(Gatan::DM::String const & file_name, Gatan::DM::String const & font_name, ulong attributes, ulong size) -> Gatan::DM::Window\n"
		"NewScriptWindowFromFile(Gatan::DM::String const & file_name, Gatan::DM::String const & font_name, ulong attributes, ulong size, long top, long left, long bottom, long right) -> Gatan::DM::Window\n"
		"\n"
		"NewScriptWindowFromFile: Opens a file into a script window.\n"
		""},
	 { (char *)"NewSemaphore", _wrap_NewSemaphore, METH_VARARGS, (char *)"\n"
		"NewSemaphore() -> long\n"
		"\n"
		"NewSemaphore: Create a semaphore. Used only with background processing.\n"
		""},
	 { (char *)"NewTagGroup", _wrap_NewTagGroup, METH_VARARGS, (char *)"\n"
		"NewTagGroup() -> TagGroup\n"
		"\n"
		"NewTagGroup: Creates an empty tag group.\n"
		""},
	 { (char *)"NewTagList", _wrap_NewTagList, METH_VARARGS, (char *)"\n"
		"NewTagList() -> TagGroup\n"
		"\n"
		"NewTagList: Creates an empty tag list.\n"
		""},
	 { (char *)"NewTextAnnotation", _wrap_NewTextAnnotation, METH_VARARGS, (char *)"\n"
		"NewTextAnnotation(float left, float top, Gatan::DM::String const & text, float size) -> Gatan::DM::Component\n"
		"\n"
		"NewTextAnnotation: Creates a new text annotation.\n"
		""},
	 { (char *)"NextImage", _wrap_NextImage, METH_VARARGS, (char *)"\n"
		"NextImage(Image argument_1) -> Image\n"
		"\n"
		"NextImage: Find the next image.\n"
		""},
	 { (char *)"OkCancelDialog", _wrap_OkCancelDialog, METH_VARARGS, (char *)"\n"
		"OkCancelDialog(char const * prompt) -> bool\n"
		"\n"
		"OkCancelDialog: Puts up a dialog with the given prompt. Returns 1 for OK and 0 for \n"
		"Cancel.\n"
		""},
	 { (char *)"OkDialog", _wrap_OkDialog, METH_VARARGS, (char *)"\n"
		"OkDialog(char const * prompt)\n"
		"\n"
		"OkDialog: Puts up a dialog with the given prompt.\n"
		""},
	 { (char *)"OpenAndSetProgressWindow", _wrap_OpenAndSetProgressWindow, METH_VARARGS, (char *)"\n"
		"OpenAndSetProgressWindow(char const * line1, char const * line2, char const * line3)\n"
		"\n"
		"OpenAndSetProgressWindow: Open the progress window and sets the text within to line1, \n"
		"line2, and line3.\n"
		""},
	 { (char *)"OpenDialog", _wrap_OpenDialog, METH_VARARGS, (char *)"\n"
		"OpenDialog(Gatan::DM::String & pathname) -> bool\n"
		"\n"
		"OpenDialog: Puts up an Open dialog, allows the user to select a file, and stores the \n"
		"pathname into the pathname variable. Returns 1 for OK and 0 for Cancel.\n"
		""},
	 { (char *)"OpenFileForReading", _wrap_OpenFileForReading, METH_VARARGS, (char *)"\n"
		"OpenFileForReading(Gatan::DM::String const & file_path) -> DM_FileReference\n"
		"\n"
		"OpenFileForReading: Open the file for reading. Return the file reference for this file. \n"
		"This call must be balanced with call to CloseFile() with the returned reference number.\n"
		""},
	 { (char *)"OpenFileForReadingAndWriting", _wrap_OpenFileForReadingAndWriting, METH_VARARGS, (char *)"\n"
		"OpenFileForReadingAndWriting(Gatan::DM::String const & file_path) -> DM_FileReference\n"
		"\n"
		"OpenFileForReadingAndWriting: Open the file for reading and writing. Return the file \n"
		"reference for this file. This call must be balanced with call to CloseFile() with the \n"
		"returned reference number.\n"
		""},
	 { (char *)"OpenFileForWriting", _wrap_OpenFileForWriting, METH_VARARGS, (char *)"\n"
		"OpenFileForWriting(Gatan::DM::String const & file_path) -> DM_FileReference\n"
		"\n"
		"OpenFileForWriting: Open the file for writing. Return the file reference for this file. \n"
		"This call must be balanced with call to CloseFile() with the returned reference number.\n"
		""},
	 { (char *)"OpenImage", _wrap_OpenImage, METH_VARARGS, (char *)"\n"
		"OpenImage(Gatan::DM::String const & fileName) -> Image\n"
		"\n"
		"OpenImage: Open the image with the filename. Returns the opened image.\n"
		""},
	 { (char *)"OpenResultsWindow", _wrap_OpenResultsWindow, METH_VARARGS, (char *)"\n"
		"OpenResultsWindow()\n"
		"\n"
		"OpenResultsWindow: Open the results window if it is not already open.\n"
		""},
	 { (char *)"OpenTimeBar", _wrap_OpenTimeBar, METH_VARARGS, (char *)"\n"
		"OpenTimeBar(char const * prompt, long total)\n"
		"\n"
		"OpenTimeBar: Opens the time bar with the given prompt. The total parameter is ignored. \n"
		"CloseTimeBar() must be invoked exactly once for every OpenTimeBar() call.\n"
		""},
	 { (char *)"OptionDown", _wrap_OptionDown, METH_VARARGS, (char *)"\n"
		"OptionDown() -> bool\n"
		"\n"
		"OptionDown: Returns 1 if the option key is down and 0 otherwise.\n"
		""},
	 { (char *)"PackedFFT", _wrap_PackedFFT, METH_VARARGS, (char *)"\n"
		"PackedFFT(Image source) -> Image\n"
		"\n"
		"PackedFFT: Creates a new packed complex image from the FFT of the real image source.\n"
		""},
	 { (char *)"PackedIFFT", _wrap_PackedIFFT, METH_VARARGS, (char *)"\n"
		"PackedIFFT(Image source) -> Image\n"
		"\n"
		"PackedIFFT: Creates a new real image from the inverse FFT of the packed complex image \n"
		"source.\n"
		""},
	 { (char *)"PackedLnModulusToImage", _wrap_PackedLnModulusToImage, METH_VARARGS, (char *)"\n"
		"PackedLnModulusToImage(Image imageSrc, Image imageDst, float lowLimit, float highLimit, float range)\n"
		"\n"
		"PackedLnModulusToImage: Store the unpacked log modulus of the packed complex image \n"
		"imageSrc into imageDst using the lowLimit, highLimit, and range parameters. No data type \n"
		"checking is performed.\n"
		""},
	 { (char *)"PackedToComplex", _wrap_PackedToComplex, METH_VARARGS, (char *)"\n"
		"PackedToComplex(Image source) -> Image\n"
		"\n"
		"PackedToComplex: Creates a new complex 8-byte image from the packed complex source.\n"
		""},
	 { (char *)"PathAddParentIndirection", _wrap_PathAddParentIndirection, METH_VARARGS, (char *)"\n"
		"PathAddParentIndirection(Gatan::DM::String const & path) -> Gatan::DM::String\n"
		"\n"
		"PathAddParentIndirection: Returns 'path' appended with a string denoting indirection to \n"
		"the parent directory\n"
		""},
	 { (char *)"PathBeginRelative", _wrap_PathBeginRelative, METH_VARARGS, (char *)"\n"
		"PathBeginRelative() -> Gatan::DM::String\n"
		"\n"
		"PathBeginRelative: Returns a string that begins a relative path\n"
		""},
	 { (char *)"PathConcatenate", _wrap_PathConcatenate, METH_VARARGS, (char *)"\n"
		"PathConcatenate(Gatan::DM::String const & initial_path, Gatan::DM::String const & final_path) -> Gatan::DM::String\n"
		"\n"
		"PathConcatenate: Concatenates 'final_path' to 'initial_path' to create a new path, \n"
		"adding separators as necessary.\n"
		""},
	 { (char *)"PathExtractBaseName", _wrap_PathExtractBaseName, METH_VARARGS, (char *)"\n"
		"PathExtractBaseName(Gatan::DM::String const & path, ulong path_type) -> Gatan::DM::String\n"
		"\n"
		"PathExtractBaseName: Returns the base name portion of 'dir_path', where 'path_type' \n"
		"denotes '1' for Mac paths, '2' for Windows paths, and '0' for current OS paths\n"
		""},
	 { (char *)"PathExtractDirectory", _wrap_PathExtractDirectory, METH_VARARGS, (char *)"\n"
		"PathExtractDirectory(Gatan::DM::String const & path, ulong path_type) -> Gatan::DM::String\n"
		"\n"
		"PathExtractDirectory: Returns the directory portion of 'dir_path', where 'path_type' \n"
		"denotes '1' for Mac paths, '2' for Windows paths, and '0' for current OS paths\n"
		""},
	 { (char *)"PathExtractExtension", _wrap_PathExtractExtension, METH_VARARGS, (char *)"\n"
		"PathExtractExtension(Gatan::DM::String const & path, ulong path_type) -> Gatan::DM::String\n"
		"\n"
		"PathExtractExtension: Returns the extension portion of 'dir_path', where 'path_type' \n"
		"denotes '1' for Mac paths, '2' for Windows32 paths, '3' for Windows64 paths, and '0' for current OS paths\n"
		""},
	 { (char *)"PathExtractFileName", _wrap_PathExtractFileName, METH_VARARGS, (char *)"\n"
		"PathExtractFileName(Gatan::DM::String const & path, ulong path_type) -> Gatan::DM::String\n"
		"\n"
		"PathExtractFileName: Returns the file name portion of 'dir_path', where 'path_type' \n"
		"denotes '1' for Mac paths, '2' for Windows paths, and '0' for current OS paths\n"
		""},
	 { (char *)"PathExtractParentDirectory", _wrap_PathExtractParentDirectory, METH_VARARGS, (char *)"\n"
		"PathExtractParentDirectory(Gatan::DM::String const & path, ulong path_type) -> Gatan::DM::String\n"
		"\n"
		"PathExtractParentDirectory: Returns the parent directory portion of 'dir_path', where \n"
		"'path_type' denotes '1' for Mac paths, '2' for Windows paths, and '0' for current OS paths\n"
		""},
	 { (char *)"PathGetFullpath", _wrap_PathGetFullpath, METH_VARARGS, (char *)"\n"
		"PathGetFullpath(Gatan::DM::String const & path) -> Gatan::DM::String\n"
		"\n"
		"PathGetFullpath: Returns the full path name of the file denoted by 'dir_path'\n"
		""},
	 { (char *)"PathsSpecifySameFile", _wrap_PathsSpecifySameFile, METH_VARARGS, (char *)"\n"
		"PathsSpecifySameFile(Gatan::DM::String const & path_1, Gatan::DM::String const & path_2) -> bool\n"
		"\n"
		"PathGetFullpath: Returns the full path name of the file denoted by 'dir_path'\n"
		""},
	 { (char *)"Pi", _wrap_Pi, METH_VARARGS, (char *)"\n"
		"Pi() -> double\n"
		"\n"
		"Pi: Return an approximation of pi.\n"
		""},
	 { (char *)"PictureAnnotationSetPicture", _wrap_PictureAnnotationSetPicture, METH_VARARGS, (char *)"\n"
		"PictureAnnotationSetPicture(Gatan::DM::Component const & comp, long picture)\n"
		"\n"
		"PictureAnnotationSetPicture: Sets the picture of an annotation.\n"
		""},
	 { (char *)"PIctureGetBounds", _wrap_PIctureGetBounds, METH_VARARGS, (char *)"\n"
		"PIctureGetBounds(long picture, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"PIctureGetBounds: Gets the preferred bounds of the picture for display on the screen.\n"
		""},
	 { (char *)"PrintImage", _wrap_PrintImage, METH_VARARGS, (char *)"\n"
		"PrintImage(Image argument_1)\n"
		"\n"
		"PrintImage: Print the image.\n"
		""},
	 { (char *)"RasterImageDisplayAddThresholdToMask", _wrap_RasterImageDisplayAddThresholdToMask, METH_VARARGS, (char *)"\n"
		"RasterImageDisplayAddThresholdToMask(Gatan::DM::RasterImageDisplay const & rid, Image mask, float top, float left, float bottom, float right)\n"
		"\n"
		"RasterImageDisplayAddThresholdToMask: Sets the points in mask to 1 if they lie within \n"
		"the threshold.\n"
		""},
	 { (char *)"RasterImageDisplayGetThresholdLimits", _wrap_RasterImageDisplayGetThresholdLimits, METH_VARARGS, (char *)"\n"
		"RasterImageDisplayGetThresholdLimits(Gatan::DM::RasterImageDisplay const & rid, float * low, float * high)\n"
		"\n"
		"RasterImageDisplayGetThresholdLimits: Gets the threshold limits of the display.\n"
		""},
	 { (char *)"RasterImageDisplayIsThresholdOn", _wrap_RasterImageDisplayIsThresholdOn, METH_VARARGS, (char *)"\n"
		"RasterImageDisplayIsThresholdOn(Gatan::DM::RasterImageDisplay const & rid) -> bool\n"
		"\n"
		"RasterImageDisplayIsThresholdOn: Determines whether the thresholding overlay is on or \n"
		"off.\n"
		""},
	 { (char *)"RasterImageDisplaySetThresholdLimits", _wrap_RasterImageDisplaySetThresholdLimits, METH_VARARGS, (char *)"\n"
		"RasterImageDisplaySetThresholdLimits(Gatan::DM::RasterImageDisplay const & rid, float low, float high)\n"
		"\n"
		"RasterImageDisplaySetThresholdLimits: Sets the threshold limits of the display.\n"
		""},
	 { (char *)"RasterImageDisplaySetThresholdOn", _wrap_RasterImageDisplaySetThresholdOn, METH_VARARGS, (char *)"\n"
		"RasterImageDisplaySetThresholdOn(Gatan::DM::RasterImageDisplay const & rid, bool on)\n"
		"\n"
		"RasterImageDisplaySetThresholdOn: Sets whether the thresholding overlay is on or off.\n"
		""},
	 { (char *)"RasterizeRGB", _wrap_RasterizeRGB, METH_VARARGS, (char *)"\n"
		"RasterizeRGB(Image source, bool dither) -> Image\n"
		"\n"
		"RasterizeRGB: Rasterize the source RGB image and return the resulting Raster image \n"
		"displayed image with an appropriate color table. The dither parameter controls dithering.\n"
		""},
	 { (char *)"RawCopyImage", _wrap_RawCopyImage, METH_VARARGS, (char *)"\n"
		"RawCopyImage(Image src, Image dst)\n"
		"\n"
		"RawCopyImage: Copies the src image to the dst image ignoring data types. The data type \n"
		"sizes of the two images must be the same.\n"
		""},
	 { (char *)"ReadFile", _wrap_ReadFile, METH_VARARGS, (char *)"\n"
		"ReadFile(DM_FileReference file, long count) -> Gatan::DM::String\n"
		"\n"
		"ReadFile: Read count bytes from the file, returning them as a string.\n"
		""},
	 { (char *)"ReadFileLine", _wrap_ReadFileLine, METH_VARARGS, (char *)"\n"
		"ReadFileLine(DM_FileReference file, Gatan::DM::String & string) -> bool\n"
		"\n"
		"ReadFileLine: Read a line of text from the file, storing it into the string variable. \n"
		"Return 1 if successful and 0 otherwise.\n"
		""},
	 { (char *)"ReadRawStream", _wrap_ReadRawStream, METH_VARARGS, (char *)"\n"
		"ReadRawStream(long rawStream, long data, long length)\n"
		"\n"
		"ReadRawStream: Read length bytes from rawStream and store it into the memory pointed to \n"
		"by data.\n"
		""},
	 { (char *)"RealFFT", _wrap_RealFFT, METH_VARARGS, (char *)"\n"
		"RealFFT(Image source) -> Image\n"
		"\n"
		"RealFFT: Creates a new complex 8-byte image from the FFT of the real image source.\n"
		""},
	 { (char *)"RealIFFT", _wrap_RealIFFT, METH_VARARGS, (char *)"\n"
		"RealIFFT(Image source) -> Image\n"
		"\n"
		"RealIFFT: Creates a new real image from the inverse FFT of the complex 8-byte image \n"
		"source.\n"
		""},
	 { (char *)"RealImage", _wrap_RealImage, METH_VARARGS, (char *)"\n"
		"RealImage(Gatan::DM::String const & title, uint32 bytes, uint32 d0, uint32 d1, uint32 d2, uint32 d3) -> Image\n"
		"RealImage(Gatan::DM::String const & title, uint32 bytes, uint32 d0, uint32 d1, uint32 d2) -> Image\n"
		"RealImage(Gatan::DM::String const & title, uint32 bytes, uint32 d0, uint32 d1) -> Image\n"
		"RealImage(Gatan::DM::String const & title, uint32 bytes, uint32 d0) -> Image\n"
		"\n"
		"RealImage: Creates a 2D real image of size [d0,d1] with the given title. The bytes \n"
		"parameter can be 4 or 8 for single and double precision floating point numbers.\n"
		""},
	 { (char *)"Reduce", _wrap_Reduce, METH_VARARGS, (char *)"\n"
		"Reduce(Image argument_1)\n"
		"\n"
		"Reduce: Reduces the image by 2X.\n"
		""},
	 { (char *)"ReducedFFT", _wrap_ReducedFFT, METH_VARARGS, (char *)"\n"
		"ReducedFFT(Image source) -> Image\n"
		"\n"
		"ReducedFFT: Creates a new packed complex image from the FFT of the real image source \n"
		"after reducing the source by a factor of 2.\n"
		""},
	 { (char *)"ImageUtilities_MeanAndVariance", _wrap_ImageUtilities_MeanAndVariance, METH_VARARGS, (char *)"\n"
		"ImageUtilities_MeanAndVariance(Image src_img, Image mask_img, double & mean, double & variance) -> double\n"
		"\n"
		"ImageUtilities_MeanAndVariance: Calculates image stats\n"
		""},
	 { (char *)"RegisterCustomMenu", _wrap_RegisterCustomMenu, METH_VARARGS, (char *)"\n"
		"RegisterCustomMenu(long menuHandler) -> long\n"
		"\n"
		"RegisterCustomMenu: Register a custom menu. See the SDK documentation for more \n"
		"information.\n"
		""},
	 { (char *)"SetStatusBarVisibility", _wrap_SetStatusBarVisibility, METH_VARARGS, (char *)"\n"
		"SetStatusBarVisibility(bool visibility)\n"
		"\n"
		"Show/Hide status bar\n"
		""},
	 { (char *)"SetShowHideStatusBarMenuItemEnabled", _wrap_SetShowHideStatusBarMenuItemEnabled, METH_VARARGS, (char *)"\n"
		"SetShowHideStatusBarMenuItemEnabled(bool enabled)\n"
		"\n"
		"Show/Hide status bar menu item ( poor, but we want to disable item for serial scopes from Microscope plugin. RTH)\n"
		""},
	 { (char *)"UpdateStatusBar", _wrap_UpdateStatusBar, METH_VARARGS, (char *)"\n"
		"UpdateStatusBar(long nIndex, char const * pcText)\n"
		"\n"
		"Update status bar's pane text\n"
		""},
	 { (char *)"RegisterCustomTool", _wrap_RegisterCustomTool, METH_VARARGS, (char *)"\n"
		"RegisterCustomTool(ULONG_PTR toolInstance, char const * toolTip, ULONG_PTR hBitmap) -> ULONG_PTR\n"
		"\n"
		"RegisterCustomTool: Add the tool to the custom tool list. See the SDK documentation for \n"
		"more information.\n"
		""},
	 { (char *)"RegisterMenuAdjustment", _wrap_RegisterMenuAdjustment, METH_VARARGS, (char *)"\n"
		"RegisterMenuAdjustment(char const * menuName, char const * adjustedMenuName)\n"
		"\n"
		"RegisterMenuAdjustment: Unregister a menu name adjustment. See the SDK documentation for \n"
		"more information.\n"
		""},
	 { (char *)"RegisterObjectListener", _wrap_RegisterObjectListener, METH_VARARGS, (char *)"\n"
		"RegisterObjectListener(ulong_ptr_t object, ulong_ptr_t proc, ulong_ptr_t refCon) -> ulong_ptr_t\n"
		"\n"
		"RegisterObjectListener: Add object listener to OM object. See the SDK documentation for \n"
		"more information.\n"
		""},
	 { (char *)"RegisterScriptPalette", _wrap_RegisterScriptPalette, METH_VARARGS, (char *)"\n"
		"RegisterScriptPalette(Gatan::DM::ScriptObject const & argument_1, char const * type, char const * name)\n"
		"\n"
		"RegisterScriptPalette:\n"
		""},
	 { (char *)"RegisterSystemIdle", _wrap_RegisterSystemIdle, METH_VARARGS, (char *)"\n"
		"RegisterSystemIdle(SystemIdleProc SystemIdleProc)\n"
		"\n"
		"RegisterSystemIdle: Register a system idle procedure.\n"
		""},
	 { (char *)"ReleaseDataPtr", _wrap_ReleaseDataPtr, METH_VARARGS, (char *)"\n"
		"ReleaseDataPtr(Image argument_1)\n"
		"\n"
		"ReleaseDataPtr: Releases the pointer to the image data acquired using the GetDataPtr() \n"
		"function.\n"
		""},
	 { (char *)"ReleaseSemaphore", _wrap_ReleaseSemaphore, METH_VARARGS, (char *)"\n"
		"ReleaseSemaphore(long argument_1)\n"
		"\n"
		"ReleaseSemaphore: Release a semaphore. Used only with background processing.\n"
		""},
	 { (char *)"RemoveCustomTool", _wrap_RemoveCustomTool, METH_VARARGS, (char *)"\n"
		"RemoveCustomTool(long doStateProc)\n"
		"\n"
		"RemoveCustomTool: Remove the tool to the custom tool list. See the SDK documentation for \n"
		"more information.\n"
		""},
	 { (char *)"RevertToDefaultTool", _wrap_RevertToDefaultTool, METH_VARARGS, (char *)"\n"
		"RevertToDefaultTool()\n"
		"\n"
		"RevertToDefaultTool: Revert DM to the default tool\n"
		""},
	 { (char *)"RemoveFunction", _wrap_RemoveFunction, METH_VARARGS, (char *)"\n"
		"RemoveFunction(void * fnPtr)\n"
		"\n"
		"RemoveFunction: Removes the user defined function with an entry point matching fnPtr.\n"
		""},
	 { (char *)"RemovePathFromCopyToImageList", _wrap_RemovePathFromCopyToImageList, METH_VARARGS, (char *)"\n"
		"RemovePathFromCopyToImageList(char const * path)\n"
		"\n"
		"RemovePathFromCopyToImageList: Removes 'path' from the copy to image list.\n"
		""},
	 { (char *)"RemoveScriptFromMenu", _wrap_RemoveScriptFromMenu, METH_VARARGS, (char *)"\n"
		"RemoveScriptFromMenu(char const * commandName, char const * menuName, char const * optionalSubMenuName)\n"
		"\n"
		"RemoveScriptFromMenu: Removes the given menu command from the menu. The commandName \n"
		"indicates the string by which this script is known to the application. The menuName and \n"
		"optionalSubMenuName parameters specify the menu.\n"
		""},
	 { (char *)"ResetContrastLimitsAlways", _wrap_ResetContrastLimitsAlways, METH_VARARGS, (char *)"\n"
		"ResetContrastLimitsAlways(Image argument_1)\n"
		"\n"
		"ResetContrastLimitsAlways: Reset the contrast limits of the image from the survey \n"
		"information.\n"
		""},
	 { (char *)"Result", _wrap_Result, METH_VARARGS, (char *)"\n"
		"Result(Gatan::DM::String const & argument_1)\n"
		"\n"
		"Result: Output the string to the results window.\n"
		""},
	 { (char *)"Debug", _wrap_Debug, METH_VARARGS, (char *)"\n"
		"Debug(Gatan::DM::String const & argument_1)\n"
		"\n"
		"Debug: Output the string to the debug window.\n"
		""},
	 { (char *)"GetLogDirectory", _wrap_GetLogDirectory, METH_VARARGS, (char *)"\n"
		"GetLogDirectory(std::string & log_dir) -> bool\n"
		"\n"
		"DM logger: Get DM log file directory.\n"
		""},
	 { (char *)"GetLogFilename", _wrap_GetLogFilename, METH_VARARGS, (char *)"\n"
		"GetLogFilename(std::string & filename) -> bool\n"
		"\n"
		"DM logger: Get current DM log file name.\n"
		""},
	 { (char *)"CopyLogFile", _wrap_CopyLogFile, METH_VARARGS, (char *)"\n"
		"CopyLogFile(uint32 level) -> bool\n"
		"\n"
		"DM logger: Copied DM log file to temp with specified Level filter\n"
		""},
	 { (char *)"GetCopyLogFilename", _wrap_GetCopyLogFilename, METH_VARARGS, (char *)"\n"
		"GetCopyLogFilename(std::string & copyfilename) -> bool\n"
		"\n"
		"DM logger: Get copied file name created by function CopyLogFile\n"
		""},
	 { (char *)"FlushLogFile", _wrap_FlushLogFile, METH_VARARGS, (char *)"\n"
		"FlushLogFile() -> bool\n"
		"\n"
		"DM logger: Force disc-write of log message queue\n"
		""},
	 { (char *)"GetLogMessageCount", _wrap_GetLogMessageCount, METH_VARARGS, (char *)"\n"
		"GetLogMessageCount(uint32 level) -> uint32\n"
		"\n"
		"DM logger: Get message count with specified Level filter\n"
		""},
	 { (char *)"RGBImage", _wrap_RGBImage, METH_VARARGS, (char *)"\n"
		"RGBImage(char const * title, long bytes, long d0, long d1, long d2, long d3) -> Image\n"
		"RGBImage(char const * title, long bytes, long d0, long d1, long d2) -> Image\n"
		"RGBImage(char const * title, long bytes, long d0, long d1) -> Image\n"
		"RGBImage(char const * title, long bytes, long d0) -> Image\n"
		"\n"
		"RGBImage: Creates a 2D RGB image of size [d0,d1] with the given title. The bytes \n"
		"parameter must be 4.\n"
		""},
	 { (char *)"ROIAddToMask", _wrap_ROIAddToMask, METH_VARARGS, (char *)"\n"
		"ROIAddToMask(Gatan::DM::ROI const & roi, Image mask, float top, float left, float bottom, float right)\n"
		"\n"
		"ROIAddToMask: Add the region of interest to the image within the bounds of the specified \n"
		"rectangle.\n"
		""},
	 { (char *)"ROIAddVertex", _wrap_ROIAddVertex, METH_VARARGS, (char *)"\n"
		"ROIAddVertex(Gatan::DM::ROI const & roi, float x, float y)\n"
		"\n"
		"ROIAddVertex: Add a vertex with the given coordinates to the region of interest.\n"
		""},
	 { (char *)"ROIClearVertices", _wrap_ROIClearVertices, METH_VARARGS, (char *)"\n"
		"ROIClearVertices(Gatan::DM::ROI const & roi)\n"
		"\n"
		"ROIClearVertices: Remove all vertices from the region of interest.\n"
		""},
	 { (char *)"ROIClone", _wrap_ROIClone, METH_VARARGS, (char *)"\n"
		"ROIClone(Gatan::DM::ROI const & roi) -> Gatan::DM::ROI\n"
		"\n"
		"ROIClone: Returns a clone of the roi.\n"
		""},
	 { (char *)"ROIContainsPoint", _wrap_ROIContainsPoint, METH_VARARGS, (char *)"\n"
		"ROIContainsPoint(Gatan::DM::ROI const & roi, float x, float y) -> bool\n"
		"\n"
		"ROIContainsPoint: Returns whether the region of interest encloses the given point.\n"
		""},
	 { (char *)"ROICountVertices", _wrap_ROICountVertices, METH_VARARGS, (char *)"\n"
		"ROICountVertices(Gatan::DM::ROI const & roi) -> long\n"
		"\n"
		"ROICountVertices: Return the number of vertices comprising the region of interest.\n"
		""},
	 { (char *)"ROIDeleteVertex", _wrap_ROIDeleteVertex, METH_VARARGS, (char *)"\n"
		"ROIDeleteVertex(Gatan::DM::ROI const & roi, long index)\n"
		"\n"
		"ROIDeleteVertex: Delete the given vertex from the region of interest.\n"
		""},
	 { (char *)"ROIGetColor", _wrap_ROIGetColor, METH_VARARGS, (char *)"\n"
		"ROIGetColor(Gatan::DM::ROI const & roi, float * r, float * g, float * b)\n"
		"\n"
		"ROIGetColor: Stores the color of the region of interest into the variables. Each number \n"
		"will be in the range of 0 to 1.\n"
		""},
	 { (char *)"ROIGetDeletable", _wrap_ROIGetDeletable, METH_VARARGS, (char *)"\n"
		"ROIGetDeletable(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIGetDeletable: Return whether the region of interest is deletable or not.\n"
		""},
	 { (char *)"ROIGetID", _wrap_ROIGetID, METH_VARARGS, (char *)"\n"
		"ROIGetID(Gatan::DM::ROI const & roi) -> long\n"
		"\n"
		"ROIGetID: Return the ID for the region of interest.\n"
		""},
	 { (char *)"ROIGetLabel", _wrap_ROIGetLabel, METH_VARARGS, (char *)"\n"
		"ROIGetLabel(Gatan::DM::ROI const & roi) -> Gatan::DM::String\n"
		"\n"
		"ROIGetLabel: Return the label of the region of interest.\n"
		""},
	 { (char *)"ROIGetLabelStripeColor", _wrap_ROIGetLabelStripeColor, METH_VARARGS, (char *)"\n"
		"ROIGetLabelStripeColor(Gatan::DM::ROI const & roi, float * r, float * g, float * b)\n"
		"\n"
		"ROIGetLabelStripeColor: Stores the color of the label stripe into the variables. Each number \n"
		"will be in the range of 0 to 1.\n"
		""},
	 { (char *)"ROIGetLine", _wrap_ROIGetLine, METH_VARARGS, (char *)"\n"
		"ROIGetLine(Gatan::DM::ROI const & roi, float * sx, float * sy, float * ex, float * ey)\n"
		"\n"
		"ROIGetLine: Fill in the start and end points of the line represented by the region of \n"
		"interest.\n"
		""},
	 { (char *)"ROIGetMoveable", _wrap_ROIGetMoveable, METH_VARARGS, (char *)"\n"
		"ROIGetMoveable(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIGetMoveable: Return whether the region of interest is moveable or not.\n"
		""},
	 { (char *)"ROIGetName", _wrap_ROIGetName, METH_VARARGS, (char *)"\n"
		"ROIGetName(Gatan::DM::ROI const & roi) -> Gatan::DM::String\n"
		"\n"
		"ROIGetName: Return the name of the region of interest.\n"
		""},
	 { (char *)"ROIGetPoint", _wrap_ROIGetPoint, METH_VARARGS, (char *)"\n"
		"ROIGetPoint(Gatan::DM::ROI const & roi, float * x, float * y)\n"
		"\n"
		"ROIGetPoint: Return the coordinates of the point represented by this region of interest.\n"
		""},
	 { (char *)"ROIGetRange", _wrap_ROIGetRange, METH_VARARGS, (char *)"\n"
		"ROIGetRange(Gatan::DM::ROI const & roi, float * start, float * end)\n"
		"\n"
		"ROIGetRange: Fills in the start and end columns of the range represented by the region \n"
		"of interest.\n"
		""},
	 { (char *)"ROIGetRectangle", _wrap_ROIGetRectangle, METH_VARARGS, (char *)"\n"
		"ROIGetRectangle(Gatan::DM::ROI const & roi, float * top, float * left, float * bottom, float * right)\n"
		"\n"
		"ROIGetRectangle: Fill in the coordinates of the rectangle represented by the region of \n"
		"interest.\n"
		""},
	 { (char *)"ROIGetResizable", _wrap_ROIGetResizable, METH_VARARGS, (char *)"\n"
		"ROIGetResizable(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIGetResizable: Return whether the region of interest is resizable or not.\n"
		""},
	 { (char *)"ROIGetVertex", _wrap_ROIGetVertex, METH_VARARGS, (char *)"\n"
		"ROIGetVertex(Gatan::DM::ROI const & roi, long index, float * x, float * y)\n"
		"\n"
		"ROIGetVertex: Return the coordinates of the given vertex of the region of interest.\n"
		""},
	 { (char *)"ROIGetVolatile", _wrap_ROIGetVolatile, METH_VARARGS, (char *)"\n"
		"ROIGetVolatile(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIGetVolatile: Return whether the region of interest is volatile or not.\n"
		""},
	 { (char *)"ROIInsertVertex", _wrap_ROIInsertVertex, METH_VARARGS, (char *)"\n"
		"ROIInsertVertex(Gatan::DM::ROI const & roi, long before, float x, float y)\n"
		"\n"
		"ROIInsertVertex: Insert a vertex with the given coordinates before the indicated vertex \n"
		"of the region of interest.\n"
		""},
	 { (char *)"ROIIsClosed", _wrap_ROIIsClosed, METH_VARARGS, (char *)"\n"
		"ROIIsClosed(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsClosed: Returns whether the region of interest is a closed loop or not.\n"
		""},
	 { (char *)"ROIIsLine", _wrap_ROIIsLine, METH_VARARGS, (char *)"\n"
		"ROIIsLine(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsLine: Return whether the region of interest is a line.\n"
		""},
	 { (char *)"ROIIsPoint", _wrap_ROIIsPoint, METH_VARARGS, (char *)"\n"
		"ROIIsPoint(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsPoint: Return whether the region of interest is a point.\n"
		""},
	 { (char *)"ROIIsRange", _wrap_ROIIsRange, METH_VARARGS, (char *)"\n"
		"ROIIsRange(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsRange: Returns whether the region of interest is a range.\n"
		""},
	 { (char *)"ROIIsRectangle", _wrap_ROIIsRectangle, METH_VARARGS, (char *)"\n"
		"ROIIsRectangle(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsRectangle: Return whether the region of interest is a rectangle.\n"
		""},
	 { (char *)"ROIIsValid", _wrap_ROIIsValid, METH_VARARGS, (char *)"\n"
		"ROIIsValid(Gatan::DM::ROI const & roi) -> bool\n"
		"\n"
		"ROIIsValid: Returns 'true' if the region of interest is a valid object.\n"
		""},
	 { (char *)"ROISetColor", _wrap_ROISetColor, METH_VARARGS, (char *)"\n"
		"ROISetColor(Gatan::DM::ROI const & roi, float r, float g, float b)\n"
		"\n"
		"ROISetColor: Set the color of the region of interest. Each number should be in the range \n"
		"of 0 to 1.\n"
		""},
	 { (char *)"ROISetDeletable", _wrap_ROISetDeletable, METH_VARARGS, (char *)"\n"
		"ROISetDeletable(Gatan::DM::ROI const & roi, bool deletable)\n"
		"\n"
		"ROISetDeletable: Sets whether the region of interest should be deletable or not.\n"
		""},
	 { (char *)"ROISetIsClosed", _wrap_ROISetIsClosed, METH_VARARGS, (char *)"\n"
		"ROISetIsClosed(Gatan::DM::ROI const & roi, bool is_closed)\n"
		"\n"
		"ROISetIsClosed: Sets whether the region of interest is a closed loop or not (that is the \n"
		"last vertex connects to the first).\n"
		""},
	 { (char *)"ROISetLabel", _wrap_ROISetLabel, METH_VARARGS, (char *)"\n"
		"ROISetLabel(Gatan::DM::ROI const & roi, Gatan::DM::String const & name)\n"
		"\n"
		"ROISetLabel: Set the label on the region of interest.\n"
		""},
	 { (char *)"ROISetBoldLabel", _wrap_ROISetBoldLabel, METH_VARARGS, (char *)"\n"
		"ROISetBoldLabel(Gatan::DM::ROI const & roi, bool boldLabel)\n"
		"\n"
		"ROISetLabel: Set the label on the region of interest to bold.\n"
		""},
	 { (char *)"ROISetBorderThickness", _wrap_ROISetBorderThickness, METH_VARARGS, (char *)"\n"
		"ROISetBorderThickness(Gatan::DM::ROI const & roi, float borderThickness)\n"
		"\n"
		"ROISetLabel: Set the label on the region of interest to bold.\n"
		""},
	 { (char *)"ROISetLine", _wrap_ROISetLine, METH_VARARGS, (char *)"\n"
		"ROISetLine(Gatan::DM::ROI const & roi, float sx, float sy, float ex, float ey)\n"
		"\n"
		"ROISetLine: Set the region of interest to a line with the given start and end \n"
		"coordinates.\n"
		""},
	 { (char *)"ROISetMoveable", _wrap_ROISetMoveable, METH_VARARGS, (char *)"\n"
		"ROISetMoveable(Gatan::DM::ROI const & roi, bool moveable)\n"
		"\n"
		"ROISetMoveable: Sets whether the region of interest should be moveable or not.\n"
		""},
	 { (char *)"ROISetName", _wrap_ROISetName, METH_VARARGS, (char *)"\n"
		"ROISetName(Gatan::DM::ROI const & roi, Gatan::DM::String const & name)\n"
		"\n"
		"ROISetName: Set the name of the region of interest.\n"
		""},
	 { (char *)"ROISetPoint", _wrap_ROISetPoint, METH_VARARGS, (char *)"\n"
		"ROISetPoint(Gatan::DM::ROI const & roi, float x, float y)\n"
		"\n"
		"ROISetPoint: Set the region of interest to a point with the given coordinate.\n"
		""},
	 { (char *)"ROISetRange", _wrap_ROISetRange, METH_VARARGS, (char *)"\n"
		"ROISetRange(Gatan::DM::ROI const & roi, float start, float end)\n"
		"\n"
		"ROISetRange: Sets the region of interest to a range with the given start and end columns.\n"
		""},
	 { (char *)"ROISetRectangle", _wrap_ROISetRectangle, METH_VARARGS, (char *)"\n"
		"ROISetRectangle(Gatan::DM::ROI const & roi, float top, float left, float bottom, float right)\n"
		"\n"
		"ROISetRectangle: Set the region of interest to a rectangle with the given coordinates.\n"
		""},
	 { (char *)"ROISetRegionToComplexValue", _wrap_ROISetRegionToComplexValue, METH_VARARGS, (char *)"\n"
		"ROISetRegionToComplexValue(Gatan::DM::ROI const & roi, Image mask, complex128_t const & value, float top, float left, float bottom, float right)\n"
		"\n"
		"ROISetRegionToComplexValue: Sets the area in 'mask' corresponding to the region to the \n"
		"value 'value'.\n"
		""},
	 { (char *)"ROISetRegionToRGBValue", _wrap_ROISetRegionToRGBValue, METH_VARARGS, (char *)"\n"
		"ROISetRegionToRGBValue(Gatan::DM::ROI const & roi, Image mask, rgba_uint8_os_t value, float top, float left, float bottom, float right)\n"
		"\n"
		"ROISetRegionToRGBValue: Sets the area in 'mask' corresponding to the region to the value \n"
		"'value'.\n"
		""},
	 { (char *)"ROISetRegionToValue", _wrap_ROISetRegionToValue, METH_VARARGS, (char *)"\n"
		"ROISetRegionToValue(Gatan::DM::ROI const & roi, Image mask, double value, float top, float left, float bottom, float right)\n"
		"\n"
		"ROISetRegionToValue: Sets the area in 'mask' corresponding to the region to the value \n"
		"'value'.\n"
		""},
	 { (char *)"ROISetResizable", _wrap_ROISetResizable, METH_VARARGS, (char *)"\n"
		"ROISetResizable(Gatan::DM::ROI const & roi, bool resizable)\n"
		"\n"
		"ROISetResizable: Sets whether the region of interest should be resizable or not.\n"
		""},
	 { (char *)"ROISetVertex", _wrap_ROISetVertex, METH_VARARGS, (char *)"\n"
		"ROISetVertex(Gatan::DM::ROI const & roi, long index, float x, float y)\n"
		"\n"
		"ROISetVertex: Set the coordinates of the given vertex of the region of interest.\n"
		""},
	 { (char *)"ROISetVolatile", _wrap_ROISetVolatile, METH_VARARGS, (char *)"\n"
		"ROISetVolatile(Gatan::DM::ROI const & roi, bool is_volatile)\n"
		"\n"
		"ROISetVolatile: Set whether the region of interest is volatile or not.\n"
		""},
	 { (char *)"Rotate", _wrap_Rotate, METH_VARARGS, (char *)"\n"
		"Rotate(Image source, float radians) -> Image\n"
		"\n"
		"Rotate: Creates a new real image by rotating the source image counterclockwise by \n"
		"radians.\n"
		""},
	 { (char *)"RotateLeft", _wrap_RotateLeft, METH_VARARGS, (char *)"\n"
		"RotateLeft(Image argument_1)\n"
		"\n"
		"RotateLeft: Rotates the image to the left by 90�.\n"
		""},
	 { (char *)"RotateRight", _wrap_RotateRight, METH_VARARGS, (char *)"\n"
		"RotateRight(Image argument_1)\n"
		"\n"
		"RotateRight: Rotates the image to the right by 90�.\n"
		""},
	 { (char *)"Save", _wrap_Save, METH_VARARGS, (char *)"\n"
		"Save(Image argument_1)\n"
		"\n"
		"Save: Save the image under the it's current filename.\n"
		""},
	 { (char *)"SaveAsDialog", _wrap_SaveAsDialog, METH_VARARGS, (char *)"\n"
		"SaveAsDialog(char const * prompt, char const * defaultName, char * saveName) -> bool\n"
		"\n"
		"SaveAsDialog: Puts up the SaveAs dialog with the given prompt and default file name, and \n"
		"then stores the chosen path for the saved file into the saveName variable. Returns 1 for \n"
		"OK and 0 for Cancel.\n"
		""},
	 { (char *)"SaveAsGatan", _wrap_SaveAsGatan, METH_VARARGS, (char *)"\n"
		"SaveAsGatan(Image argument_1, Gatan::DM::String const & file_path)\n"
		"SaveAsGatan(Image argument_1, Gatan::DM::String const & file_path, bool inc_thumb)\n"
		"\n"
		"SaveAsGatan: Save the image to the fileName in Gatan 4.0 file format.\n"
		""},
	 { (char *)"SaveAsGatan3", _wrap_SaveAsGatan3, METH_VARARGS, (char *)"\n"
		"SaveAsGatan3(Image argument_1, Gatan::DM::String const & file_path)\n"
		"SaveAsGatan3(Image argument_1, Gatan::DM::String const & file_path, bool inc_thumb)\n"
		"\n"
		"SaveAsGatan3: Save the image to the fileName in Gatan 3.0 file format. \n"
		"( No thumbnail option ).\n"
		""},
	 { (char *)"SaveAsGIF", _wrap_SaveAsGIF, METH_VARARGS, (char *)"\n"
		"SaveAsGIF(Image argument_1, Gatan::DM::String const & fileName)\n"
		"\n"
		"SaveAsGIF: Save the image to the fileName in GIF file format. The DM Import/Export \n"
		"Plug-in must be installed in order for this function to work.\n"
		""},
	 { (char *)"SaveAsPCX", _wrap_SaveAsPCX, METH_VARARGS, (char *)"\n"
		"SaveAsPCX(Image argument_1, Gatan::DM::String const & fileName)\n"
		"\n"
		"SaveAsPCX: Save the image to the fileName in PCX file format. The DM Import/Export \n"
		"Plug-in must be installed in order for this function to work.\n"
		""},
	 { (char *)"SaveAsPICT", _wrap_SaveAsPICT, METH_VARARGS, (char *)"\n"
		"SaveAsPICT(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveAsPICT: Save the image to the fileName in PICT file format. The DM Import/Export \n"
		"Plug-in must be installed in order for this function to work.\n"
		""},
	 { (char *)"SaveAsRawData", _wrap_SaveAsRawData, METH_VARARGS, (char *)"\n"
		"SaveAsRawData(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveAsRawData: Save the image to the fileName in raw file format.\n"
		""},
	 { (char *)"SaveAsSmallHeader", _wrap_SaveAsSmallHeader, METH_VARARGS, (char *)"\n"
		"SaveAsSmallHeader(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveAsSmallHeader: Save the image to the fileName in Gatan small header file format.\n"
		""},
	 { (char *)"SaveAsText", _wrap_SaveAsText, METH_VARARGS, (char *)"\n"
		"SaveAsText(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveAsText: Save the image to the fileName in text file format.\n"
		""},
	 { (char *)"SaveAsTIFF", _wrap_SaveAsTIFF, METH_VARARGS, (char *)"\n"
		"SaveAsTIFF(Image argument_1, Gatan::DM::String const & fileName)\n"
		"\n"
		"SaveAsTIFF: Save the image to the fileName in TIFF file format. The DM Import/Export \n"
		"Plug-in must be installed in order for this function to work.\n"
		""},
	 { (char *)"SaveImage", _wrap_SaveImage, METH_VARARGS, (char *)"\n"
		"SaveImage(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveImage: Save the image to the fileName in it's current file format.\n"
		""},
	 { (char *)"SaveAsMSA", _wrap_SaveAsMSA, METH_VARARGS, (char *)"\n"
		"SaveAsMSA(Image argument_1, Gatan::DM::String const & file_path)\n"
		"\n"
		"SaveAsMSA: Save the image to the fileName in MSA file format.\n"
		""},
	 { (char *)"ScrapClear", _wrap_ScrapClear, METH_VARARGS, (char *)"\n"
		"ScrapClear(Image argument_1)\n"
		"\n"
		"ScrapClear: Clear the pasted image (if there is one) from the image.\n"
		""},
	 { (char *)"ScrapCopy", _wrap_ScrapCopy, METH_VARARGS, (char *)"\n"
		"ScrapCopy(Image argument_1)\n"
		"\n"
		"ScrapCopy: Copy the selected portion of the image to the scrap.\n"
		""},
	 { (char *)"ScrapGetLocation", _wrap_ScrapGetLocation, METH_VARARGS, (char *)"\n"
		"ScrapGetLocation(Image argument_1, long * top, long * left)\n"
		"\n"
		"ScrapGetLocation: Store the pasted image location (in image coordinates) into the top \n"
		"and left variables.\n"
		""},
	 { (char *)"ScrapGetSize", _wrap_ScrapGetSize, METH_VARARGS, (char *)"\n"
		"ScrapGetSize(Image argument_1, long * width, long * height)\n"
		"\n"
		"ScrapGetSize: Store the pasted image size (in image coordinates) into the width and \n"
		"height variables.\n"
		""},
	 { (char *)"ScrapMerge", _wrap_ScrapMerge, METH_VARARGS, (char *)"\n"
		"ScrapMerge(Image argument_1)\n"
		"\n"
		"ScrapMerge: Merge the pasted image (if there is one) with the image.\n"
		""},
	 { (char *)"ScrapPaste", _wrap_ScrapPaste, METH_VARARGS, (char *)"\n"
		"ScrapPaste(Image argument_1)\n"
		"\n"
		"ScrapPaste: Paste the scrap into the image.\n"
		""},
	 { (char *)"ScrapPasteNew", _wrap_ScrapPasteNew, METH_VARARGS, (char *)"\n"
		"ScrapPasteNew()\n"
		"\n"
		"ScrapPasteNew: Paste the scrap into a new image.\n"
		""},
	 { (char *)"ScrapSetLocation", _wrap_ScrapSetLocation, METH_VARARGS, (char *)"\n"
		"ScrapSetLocation(Image argument_1, long top, long left)\n"
		"\n"
		"ScrapSetLocation: Set the location of the pasted image (if there is one) to [top,left].\n"
		""},
	 { (char *)"ScreenGetBounds", _wrap_ScreenGetBounds, METH_VARARGS, (char *)"\n"
		"ScreenGetBounds(long index, long * t, long * l, long * b, long * r)\n"
		"\n"
		"ScreenGetBounds: Gets the bounds of the 'index'th screen.\n"
		""},
	 { (char *)"ScreenGetWorkArea", _wrap_ScreenGetWorkArea, METH_VARARGS, (char *)"\n"
		"ScreenGetWorkArea(long index, long * t, long * l, long * b, long * r)\n"
		"\n"
		"ScreenGetWorkArea: Gets the bounds of the 'index'th screen.\n"
		""},
	 { (char *)"ScriptInterfaceGenerateStubs", _wrap_ScriptInterfaceGenerateStubs, METH_VARARGS, (char *)"\n"
		"ScriptInterfaceGenerateStubs(char const * interface_name, Gatan::DM::String & str_h, Gatan::DM::String & str_cp)\n"
		"\n"
		"ScriptInterfaceGenerateStubs: Generates C++ stubs for the interface.\n"
		""},
	 { (char *)"ScriptObjectGetClassToken", _wrap_ScriptObjectGetClassToken, METH_VARARGS, (char *)"\n"
		"ScriptObjectGetClassToken(Gatan::DM::ScriptObject const & scriptObject, Gatan::DM::String const & class_name) -> ulong\n"
		"\n"
		"ScriptObjectGetClassToken: Gets the token in 'scriptObject' corresponding to the class \n"
		"'class_name'.\n"
		""},
	 { (char *)"ScriptObjectGetID", _wrap_ScriptObjectGetID, METH_VARARGS, (char *)"\n"
		"ScriptObjectGetID(Gatan::DM::ScriptObject const & scriptObject) -> long\n"
		"\n"
		"ScriptObjectGetID: Returns a unique ID for this object. The object can be recovered by \n"
		"using GetScriptObjectFromID function.\n"
		""},
	 { (char *)"ScriptObjectIsValid", _wrap_ScriptObjectIsValid, METH_VARARGS, (char *)"\n"
		"ScriptObjectIsValid(Gatan::DM::ScriptObject const & scriptObject) -> bool\n"
		"\n"
		"ScriptObjectIsValid: Returns true if 'scriptObject' references a valid object.\n"
		""},
	 { (char *)"ScriptObjectLookupMethod", _wrap_ScriptObjectLookupMethod, METH_VARARGS, (char *)"\n"
		"ScriptObjectLookupMethod(Gatan::DM::ScriptObject const & scriptObject, Gatan::DM::Function const & meth_abs, char const * class_name) -> Gatan::DM::Function\n"
		"ScriptObjectLookupMethod(Gatan::DM::ScriptObject const & scriptObject, Gatan::DM::Function const & meth_abs) -> Gatan::DM::Function\n"
		"\n"
		"ScriptObjectLookupMethod: Returns the method of this object corresponding to the \n"
		"abstract method 'meth_abs' and class 'class_name'.\n"
		""},
	 { (char *)"ScriptWindowExecute", _wrap_ScriptWindowExecute, METH_VARARGS, (char *)"\n"
		"ScriptWindowExecute(Gatan::DM::Window const & window)\n"
		"\n"
		"ScriptWindowExecute: Executes the script in the script window.\n"
		""},
	 { (char *)"SelectImage", _wrap_SelectImage, METH_VARARGS, (char *)"\n"
		"SelectImage(Image argument_1)\n"
		"\n"
		"SelectImage: Bring the image's image document window to the front.\n"
		""},
	 { (char *)"SetColorMode", _wrap_SetColorMode, METH_VARARGS, (char *)"\n"
		"SetColorMode(Image argument_1, short mode)\n"
		"\n"
		"SetColorMode: Set the color mode of the image. The possible values for mode are \n"
		"1=greyscale, 3=rainbow, 4=temperature.\n"
		""},
	 { (char *)"SetComplexMode", _wrap_SetComplexMode, METH_VARARGS, (char *)"\n"
		"SetComplexMode(Image argument_1, short mode)\n"
		"\n"
		"SetComplexMode: Set the complex-to-real mode of the image. The possible value for mode \n"
		"are 1=real, 2=imaginary, 3=modulus, 4=log of modulus, 5=phase.\n"
		""},
	 { (char *)"SetContrastMode", _wrap_SetContrastMode, METH_VARARGS, (char *)"\n"
		"SetContrastMode(Image argument_1, short mode)\n"
		"\n"
		"SetContrastMode: Set the constrast mode of the image. The possible value for mode are \n"
		"1=linear, 2=equalized, 3=contoured, 4=custom.\n"
		""},
	 { (char *)"SetCustomCLUT", _wrap_SetCustomCLUT, METH_VARARGS, (char *)"\n"
		"SetCustomCLUT(Image argument_1, Image clutImage)\n"
		"\n"
		"SetCustomCLUT: Set the CLUT for the image to clutImage. clutImage must be a 256x1 RGB \n"
		"image.\n"
		""},
	 { (char *)"SetDisplayType", _wrap_SetDisplayType, METH_VARARGS, (char *)"\n"
		"SetDisplayType(Image argument_1, long displayType)\n"
		"\n"
		"SetDisplayType: Set the display type of the image. Possible displayType values are \n"
		"-1=best, 1=raster image, 2=surface plot, 3=RGB, 4=line plot, 5=spreadsheet.\n"
		""},
	 { (char *)"SetDoCreateCustomIcon", _wrap_SetDoCreateCustomIcon, METH_VARARGS, (char *)"\n"
		"SetDoCreateCustomIcon(Image image, bool doCreateCustomIcon)\n"
		"\n"
		"SetDoCreateCustomIcon: Open the image with the filename. Returns the opened image.\n"
		""},
	 { (char *)"SetDoSavePreview", _wrap_SetDoSavePreview, METH_VARARGS, (char *)"\n"
		"SetDoSavePreview(Image image, bool doSavePreview)\n"
		"\n"
		"SetDoSavePreview: Sets whether to save a preview along with the saved file.\n"
		""},
	 { (char *)"SetEstimatedMinMax", _wrap_SetEstimatedMinMax, METH_VARARGS, (char *)"\n"
		"SetEstimatedMinMax(Image argument_1, float min, float max)\n"
		"\n"
		"SetEstimatedMinMax: Set the estimated minimum and maximum of the image to min, max. This \n"
		"can be used if survey is turned off.\n"
		""},
	 { (char *)"SetImagePositionWithinWindow", _wrap_SetImagePositionWithinWindow, METH_VARARGS, (char *)"\n"
		"SetImagePositionWithinWindow(Image argument_1, long x, long y)\n"
		"\n"
		"SetImagePositionWithinWindow: Set top-left position of the image to [x,y] within the \n"
		"image document.\n"
		""},
	 { (char *)"SetInversionMode", _wrap_SetInversionMode, METH_VARARGS, (char *)"\n"
		"SetInversionMode(Image argument_1, bool inverted)\n"
		"\n"
		"SetInversionMode: Set the contrast of the image to be inverted or not inverted.\n"
		""},
	 { (char *)"SetLimits", _wrap_SetLimits, METH_VARARGS, (char *)"\n"
		"SetLimits(Image argument_1, float low, float high)\n"
		"\n"
		"SetLimits: Set the lowest and highest displayed pixel values for the image. Everything \n"
		"below low will be the 'black' color and every above high will be the 'white' color. The \n"
		"black and white colors may not actually be black and white if the color table is not \n"
		"greyscale.\n"
		""},
	 { (char *)"SetMinContrast", _wrap_SetMinContrast, METH_VARARGS, (char *)"\n"
		"SetMinContrast(Image argument_1, float minContrast)\n"
		"\n"
		"SetMinContrast: Set the minimum amount of contrast for the image to minContrast.\n"
		""},
	 { (char *)"SetName", _wrap_SetName, METH_VARARGS, (char *)"\n"
		"SetName(Image argument_1, char const * name)\n"
		"\n"
		"SetName: Sets the name of the image's image document to name.\n"
		""},
	 { (char *)"SetOrigin", _wrap_SetOrigin, METH_VARARGS, (char *)"\n"
		"SetOrigin(Image argument_1, float x, float y)\n"
		"\n"
		"SetOrigin: Set the origin of the image coordinates to [x,y] which are in pixel units.\n"
		""},
	 { (char *)"SetPixel", _wrap_SetPixel, METH_VARARGS, (char *)"\n"
		"SetPixel(Image argument_1, long x, long y, double value)\n"
		"\n"
		"SetPixel: Sets the pixel in the image at [x,y] to value.\n"
		""},
	 { (char *)"SetRawStreamPos", _wrap_SetRawStreamPos, METH_VARARGS, (char *)"\n"
		"SetRawStreamPos(long rawStream, long mode, long offset)\n"
		"\n"
		"SetRawStreamPos: Set the current position in rawStream to offset using the mode.\n"
		""},
	 { (char *)"SetScale", _wrap_SetScale, METH_VARARGS, (char *)"\n"
		"SetScale(Image argument_1, float x, float y)\n"
		"\n"
		"SetScale: Set the scale of the image to [x,y].\n"
		""},
	 { (char *)"SetSelection", _wrap_SetSelection, METH_VARARGS, (char *)"\n"
		"SetSelection(Image argument_1, long top, long left, long bottom, long right)\n"
		"\n"
		"SetSelection: Sets the selection of the image to [top,left,bottom,right].\n"
		""},
	 { (char *)"SetSurvey", _wrap_SetSurvey, METH_VARARGS, (char *)"\n"
		"SetSurvey(Image argument_1, bool surveyOnOff)\n"
		"\n"
		"SetSurvey: Turn surveying on or off for the image.\n"
		""},
	 { (char *)"SetSurveyTechnique", _wrap_SetSurveyTechnique, METH_VARARGS, (char *)"\n"
		"SetSurveyTechnique(Image argument_1, short mode)\n"
		"\n"
		"SetSurveyTechnique: Set the survey technique for the image to mode. Mode can be \n"
		"0=cross-wire, 1=whole image, 2=sparse.\n"
		""},
	 { (char *)"SetToZero", _wrap_SetToZero, METH_VARARGS, (char *)"\n"
		"SetToZero(Image argument_1)\n"
		"\n"
		"SetToZero: Set the image to zero.\n"
		""},
	 { (char *)"SetUnitString", _wrap_SetUnitString, METH_VARARGS, (char *)"\n"
		"SetUnitString(Image argument_1, char const * unitString)\n"
		"\n"
		"SetUnitString: Set the units of the image to unitString.\n"
		""},
	 { (char *)"SetUsesToZero", _wrap_SetUsesToZero, METH_VARARGS, (char *)"\n"
		"SetUsesToZero(Image argument_1)\n"
		"\n"
		"SetUsesToZero: Mark the image as deletable at scope exit.\n"
		""},
	 { (char *)"SetWindowBounds", _wrap_SetWindowBounds, METH_VARARGS, (char *)"\n"
		"SetWindowBounds(Image argument_1, long top, long left, long bottom, long right)\n"
		"\n"
		"SetWindowBounds: Set the image's image document window bounds to \n"
		"(left,top),(right,bottom).\n"
		""},
	 { (char *)"SetWindowPosition", _wrap_SetWindowPosition, METH_VARARGS, (char *)"\n"
		"SetWindowPosition(Image argument_1, long xPos, long yPos)\n"
		"\n"
		"SetWindowPosition: Set the image's image document window position to [xPos, yPos]. Only \n"
		"valid for images that are already shown in a window.\n"
		""},
	 { (char *)"SetWindowSize", _wrap_SetWindowSize, METH_VARARGS, (char *)"\n"
		"SetWindowSize(Image argument_1, long width, long height)\n"
		"\n"
		"SetWindowSize: Set the image's image document window size to [width, height].\n"
		""},
	 { (char *)"SetZoom", _wrap_SetZoom, METH_VARARGS, (char *)"\n"
		"SetZoom(Image argument_1, float zoom)\n"
		"\n"
		"SetZoom: Set the zoom of the image display.\n"
		""},
	 { (char *)"ShiftCenter", _wrap_ShiftCenter, METH_VARARGS, (char *)"\n"
		"ShiftCenter(Image image)\n"
		"\n"
		"ShiftCenter: Shifts each dimension of an image by half. For two dimensional images it\n"
		" will swap quadrants. This is the forward shift function to move the image center\n"
		" from (0,0) to (x/2, y/2). To shift it back use the UnShiftCenter function.\n"
		""},
	 { (char *)"ShiftDown", _wrap_ShiftDown, METH_VARARGS, (char *)"\n"
		"ShiftDown() -> bool\n"
		"\n"
		"ShiftDown: Returns 1 if the shift key is down and 0 otherwise.\n"
		""},
	 { (char *)"ShowAlert", _wrap_ShowAlert, METH_VARARGS, (char *)"\n"
		"ShowAlert(Gatan::DM::String const & prompt, long alertStyle)\n"
		"\n"
		"ShowAlert: Puts up an alert with the given prompt and style.\n"
		""},
	 { (char *)"ShowWarning", _wrap_ShowWarning, METH_VARARGS, (char *)"\n"
		"ShowWarning(Gatan::DM::String const & title, Gatan::DM::String const & prompt, bool * do_not_warn_again) -> bool\n"
		"\n"
		"ShowWarning: Puts up a warning with the given title and prompt with a choice to prevent \n"
		"future warnings. Returns 1 for OK and 0 for Cancel.\n"
		""},
	 { (char *)"Sleep", _wrap_Sleep, METH_VARARGS, (char *)"\n"
		"Sleep(float seconds)\n"
		"\n"
		"Sleep: Puts the current thread to sleep for the given number of seconds (resolution may \n"
		"vary by platform).\n"
		""},
	 { (char *)"SpaceDown", _wrap_SpaceDown, METH_VARARGS, (char *)"\n"
		"SpaceDown() -> bool\n"
		"\n"
		"SpaceDown: Returns 1 if the space key is down and 0 otherwise.\n"
		""},
	 { (char *)"StopAcquisitionDaemon", _wrap_StopAcquisitionDaemon, METH_VARARGS, (char *)"\n"
		"StopAcquisitionDaemon(Image argument_1)\n"
		"\n"
		"StopAcquisitionDaemon: Stop all acquisition daemons associated with the image.\n"
		""},
	 { (char *)"StopAllAcquisitionDaemons", _wrap_StopAllAcquisitionDaemons, METH_VARARGS, (char *)"\n"
		"StopAllAcquisitionDaemons()\n"
		"\n"
		"StopAllAcquisitionDaemons: Stop all acquisition daemons with any image within the \n"
		"application.\n"
		""},
	 { (char *)"StringAppend", _wrap_StringAppend, METH_VARARGS, (char *)"\n"
		"StringAppend(Gatan::DM::String & s1, Gatan::DM::String const & s2) -> Gatan::DM::String\n"
		"StringAppend(Gatan::DM::String & s1, ulong ch, ulong encoding_id) -> Gatan::DM::String\n"
		"\n"
		"StringAppend: Appends string s2 to s1, converting its encoding to that of s1 if \n"
		"necessary.\n"
		""},
	 { (char *)"StringCompare", _wrap_StringCompare, METH_VARARGS, (char *)"\n"
		"StringCompare(Gatan::DM::String const & s1, Gatan::DM::String const & s2) -> long\n"
		"\n"
		"StringCompare: Compares strings 's1' and 's2', returning -1,0, or 1 if s1 is less, \n"
		"equal, or greater than s2.\n"
		""},
	 { (char *)"StringConvertToEncoding", _wrap_StringConvertToEncoding, METH_VARARGS, (char *)"\n"
		"StringConvertToEncoding(Gatan::DM::String const & s1, ulong encoding_id) -> Gatan::DM::String\n"
		"\n"
		"StringConvertToEncoding: Converts 's1' to the encoding specified by 'encoding_id'.\n"
		""},
	 { (char *)"StringIsValid", _wrap_StringIsValid, METH_VARARGS, (char *)"\n"
		"StringIsValid(Gatan::DM::String const & str) -> bool\n"
		"\n"
		"StringIsValid: Returns true if 'str' is a valid object.\n"
		""},
	 { (char *)"SubtractMeanPacked", _wrap_SubtractMeanPacked, METH_VARARGS, (char *)"\n"
		"SubtractMeanPacked(Image a)\n"
		"\n"
		"SubtractMeanPacked: Subtract the mean from the packed image a. No data type checking \n"
		"is performed.\n"
		""},
	 { (char *)"SubtractMultiply", _wrap_SubtractMultiply, METH_VARARGS, (char *)"\n"
		"SubtractMultiply(Image a, Image b, Image c)\n"
		"\n"
		"SubtractMultiply: Subtract real image b from real image a, multiply the result by \n"
		"real image c, and store the result in image a. No data type checking is performed.\n"
		""},
	 { (char *)"SurfacePlotImageDisplayGetCubeAxes", _wrap_SurfacePlotImageDisplayGetCubeAxes, METH_VARARGS, (char *)"\n"
		"SurfacePlotImageDisplayGetCubeAxes(Gatan::DM::SurfacePlotImageDisplay const & spid, float * x_axis_x, float * x_axis_y, float * y_axis_x, float * y_axis_y, float * z_axis)\n"
		"\n"
		"SurfacePlotImageDisplayGetCubeAxes: Gets the points describing the surface plot cube.\n"
		""},
	 { (char *)"SurfacePlotImageDisplayGetCubePoint", _wrap_SurfacePlotImageDisplayGetCubePoint, METH_VARARGS, (char *)"\n"
		"SurfacePlotImageDisplayGetCubePoint(Gatan::DM::SurfacePlotImageDisplay const & spid, long which_point, float * x, float * y)\n"
		"\n"
		"SurfacePlotImageDisplayGetCubePoint: Gets the child coordinates of the cube point \n"
		"indicated by 'which_point'\n"
		""},
	 { (char *)"SurfacePlotImageDisplayIsShadingOn", _wrap_SurfacePlotImageDisplayIsShadingOn, METH_VARARGS, (char *)"\n"
		"SurfacePlotImageDisplayIsShadingOn(Gatan::DM::SurfacePlotImageDisplay const & spid) -> bool\n"
		"\n"
		"SurfacePlotImageDisplayIsShadingOn: Determines whether shading is on or off.\n"
		""},
	 { (char *)"SurfacePlotImageDisplaySetCubeAxes", _wrap_SurfacePlotImageDisplaySetCubeAxes, METH_VARARGS, (char *)"\n"
		"SurfacePlotImageDisplaySetCubeAxes(Gatan::DM::SurfacePlotImageDisplay const & spid, float x_axis_x, float x_axis_y, float y_axis_x, float y_axis_y, float z_axis)\n"
		"\n"
		"SurfacePlotImageDisplaySetCubeAxes: Sets the points describing the surface plot cube.\n"
		""},
	 { (char *)"SurfacePlotImageDisplaySetShadingOn", _wrap_SurfacePlotImageDisplaySetShadingOn, METH_VARARGS, (char *)"\n"
		"SurfacePlotImageDisplaySetShadingOn(Gatan::DM::SurfacePlotImageDisplay const & spid, bool on)\n"
		"\n"
		"SurfacePlotImageDisplaySetShadingOn: Sets whether shading is on or off.\n"
		""},
	 { (char *)"SurveyNormalPackedModulus", _wrap_SurveyNormalPackedModulus, METH_VARARGS, (char *)"\n"
		"SurveyNormalPackedModulus(Image image, float * lowLimit, float * highLimit)\n"
		"\n"
		"SurveyNormalPackedModulus: Survey packed image a and store the minimum and maximum \n"
		"values found into the lowLimit and highLimit variables. No data type checking is \n"
		"performed.\n"
		""},
	 { (char *)"SVDecomposition", _wrap_SVDecomposition, METH_VARARGS, (char *)"\n"
		"SVDecomposition(Image a, Image b) -> Image\n"
		"\n"
		"SVDecomposition: Return the image resulting from a SV decomposition on images a,b.\n"
		""},
	 { (char *)"SVDFit", _wrap_SVDFit, METH_VARARGS, (char *)"\n"
		"SVDFit(Image a, Image b, float tolerance) -> Image\n"
		"\n"
		"SVDFit: Return the image resulting from a SVD fit on images a,b with the given tolerance.\n"
		""},
	 { (char *)"SwapByteOrder", _wrap_SwapByteOrder, METH_VARARGS, (char *)"\n"
		"SwapByteOrder(Image argument_1)\n"
		"\n"
		"SwapByteOrder: Swaps the byte order for each long word in the image. ABCD become DCBA.\n"
		""},
	 { (char *)"SwapWordOrder", _wrap_SwapWordOrder, METH_VARARGS, (char *)"\n"
		"SwapWordOrder(Image argument_1)\n"
		"\n"
		"SwapWordOrder: Swaps the byte order for each short word in the image. ABCD become BADC.\n"
		""},
	 { (char *)"TagGroupAddLabeledTagGroup", _wrap_TagGroupAddLabeledTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupAddLabeledTagGroup(TagGroup tagGroup, char const * label, TagGroup newGroup) -> TagGroup\n"
		"\n"
		"TagGroupAddLabeledTagGroup: Adds 'newGroup' to 'tagGroup' at the label 'label'.\n"
		""},
	 { (char *)"TagGroupAddTagGroupAfter", _wrap_TagGroupAddTagGroupAfter, METH_VARARGS, (char *)"\n"
		"TagGroupAddTagGroupAfter(TagGroup tagList, long ref_index, TagGroup newGroup) -> TagGroup\n"
		"\n"
		"TagGroupAddTagGroupAfter: Adds 'newGroup' to 'tagList' after index 'ref_index'.\n"
		""},
	 { (char *)"TagGroupAddTagGroupAtBeginning", _wrap_TagGroupAddTagGroupAtBeginning, METH_VARARGS, (char *)"\n"
		"TagGroupAddTagGroupAtBeginning(TagGroup tagList, TagGroup newGroup) -> TagGroup\n"
		"\n"
		"TagGroupAddTagGroupAtBeginning: Adds 'newGroup' to the beginning of 'tagList'.\n"
		""},
	 { (char *)"TagGroupAddTagGroupAtEnd", _wrap_TagGroupAddTagGroupAtEnd, METH_VARARGS, (char *)"\n"
		"TagGroupAddTagGroupAtEnd(TagGroup tagList, TagGroup newGroup) -> TagGroup\n"
		"\n"
		"TagGroupAddTagGroupAtEnd: Adds 'newGroup' to the end of 'tagList'.\n"
		""},
	 { (char *)"TagGroupAddTagGroupBefore", _wrap_TagGroupAddTagGroupBefore, METH_VARARGS, (char *)"\n"
		"TagGroupAddTagGroupBefore(TagGroup tagList, long ref_index, TagGroup newGroup) -> TagGroup\n"
		"\n"
		"TagGroupAddTagGroupBefore: Adds 'newGroup' to 'tagList' before index 'ref_index'.\n"
		""},
	 { (char *)"TagGroupClone", _wrap_TagGroupClone, METH_VARARGS, (char *)"\n"
		"TagGroupClone(TagGroup tagGroup) -> TagGroup\n"
		"\n"
		"TagGroupClone: Returns an identical copy of 'tagGroup' and its sub-tags.\n"
		""},
	 { (char *)"TagGroupCopyTag", _wrap_TagGroupCopyTag, METH_VARARGS, (char *)"\n"
		"TagGroupCopyTag(TagGroup tagGroup, TagGroup srcGroup, long srcIndex) -> long\n"
		"\n"
		"TagGroupCopyTag: Copies the 'srcIndex'th tag in 'srcGroup' to 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupCopyTagToPath", _wrap_TagGroupCopyTagToPath, METH_VARARGS, (char *)"\n"
		"TagGroupCopyTagToPath(TagGroup tagGroup, Gatan::DM::String const & tag_path_dst, TagGroup srcGroup, Gatan::DM::String const & tag_path_src) -> long\n"
		"\n"
		"TagGroupCopyTag: Copies the 'srcIndex'th tag in 'srcGroup' to 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupCopyTagsFrom", _wrap_TagGroupCopyTagsFrom, METH_VARARGS, (char *)"\n"
		"TagGroupCopyTagsFrom(TagGroup tagGroup, TagGroup srcGroup)\n"
		"\n"
		"TagGroupCopyTagsFrom: Copies tags in 'srcGroup' to 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupCopyTagToIndex", _wrap_TagGroupCopyTagToIndex, METH_VARARGS, (char *)"\n"
		"TagGroupCopyTagToIndex(TagGroup tagGroup, long dstIndex, TagGroup srcGroup, long srcIndex)\n"
		"\n"
		"TagGroupCopyTagToIndex: Copies data in the 'srcIndex'th tag in 'srcGroup' to the \n"
		"'dstIndex'th tag in 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupCountTags", _wrap_TagGroupCountTags, METH_VARARGS, (char *)"\n"
		"TagGroupCountTags(TagGroup tagGroup) -> long\n"
		"\n"
		"TagGroupCountTags: Returns the number of sub-tags in this tag group.\n"
		""},
	 { (char *)"TagGroupCreateGroupTagAfter", _wrap_TagGroupCreateGroupTagAfter, METH_VARARGS, (char *)"\n"
		"TagGroupCreateGroupTagAfter(TagGroup tagList, long ref_index) -> TagGroup\n"
		"\n"
		"TagGroupCreateGroupTagAfter: Creates a new tag group after 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateGroupTagAtBeginning", _wrap_TagGroupCreateGroupTagAtBeginning, METH_VARARGS, (char *)"\n"
		"TagGroupCreateGroupTagAtBeginning(TagGroup tagList) -> TagGroup\n"
		"\n"
		"TagGroupCreateGroupTagAtBeginning: Creates a new tag group at the beginning of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateGroupTagAtEnd", _wrap_TagGroupCreateGroupTagAtEnd, METH_VARARGS, (char *)"\n"
		"TagGroupCreateGroupTagAtEnd(TagGroup tagList) -> TagGroup\n"
		"\n"
		"TagGroupCreateGroupTagAtEnd: Creates a new tag group at the end of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateGroupTagBefore", _wrap_TagGroupCreateGroupTagBefore, METH_VARARGS, (char *)"\n"
		"TagGroupCreateGroupTagBefore(TagGroup tagList, long ref_index) -> TagGroup\n"
		"\n"
		"TagGroupCreateGroupTagBefore: Creates a new tag group before 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateListTagAfter", _wrap_TagGroupCreateListTagAfter, METH_VARARGS, (char *)"\n"
		"TagGroupCreateListTagAfter(TagGroup tagList, long ref_index) -> TagGroup\n"
		"\n"
		"TagGroupCreateListTagAfter: Creates a new tag group after 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateListTagAtBeginning", _wrap_TagGroupCreateListTagAtBeginning, METH_VARARGS, (char *)"\n"
		"TagGroupCreateListTagAtBeginning(TagGroup tagList) -> TagGroup\n"
		"\n"
		"TagGroupCreateListTagAtBeginning: Creates a new tag group at the beginning of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateListTagAtEnd", _wrap_TagGroupCreateListTagAtEnd, METH_VARARGS, (char *)"\n"
		"TagGroupCreateListTagAtEnd(TagGroup tagList) -> TagGroup\n"
		"\n"
		"TagGroupCreateListTagAtEnd: Creates a new tag group at the end of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateListTagBefore", _wrap_TagGroupCreateListTagBefore, METH_VARARGS, (char *)"\n"
		"TagGroupCreateListTagBefore(TagGroup tagList, long ref_index) -> TagGroup\n"
		"\n"
		"TagGroupCreateListTagBefore: Creates a new tag group before 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateNewLabeledGroup", _wrap_TagGroupCreateNewLabeledGroup, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewLabeledGroup(TagGroup tagGroup, char const * label) -> TagGroup\n"
		"\n"
		"TagGroupCreateNewLabeledGroup: Adds a new tag group at label 'label' and returns the new \n"
		"group.\n"
		""},
	 { (char *)"TagGroupCreateNewLabeledList", _wrap_TagGroupCreateNewLabeledList, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewLabeledList(TagGroup tagGroup, char const * label) -> TagGroup\n"
		"\n"
		"TagGroupCreateNewLabeledList: Adds a new tag list at label 'label' and returns the new \n"
		"group.\n"
		""},
	 { (char *)"TagGroupCreateNewLabeledTag", _wrap_TagGroupCreateNewLabeledTag, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewLabeledTag(TagGroup tagGroup, char const * label) -> long\n"
		"\n"
		"TagGroupCreateNewLabeledTag: Creates a new labeled tag and returns its index.\n"
		""},
	 { (char *)"TagGroupCreateNewTagAfter", _wrap_TagGroupCreateNewTagAfter, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewTagAfter(TagGroup tagList, long ref_index) -> long\n"
		"\n"
		"TagGroupCreateNewTagAfter: Creates a new tag after 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateNewTagAtBeginning", _wrap_TagGroupCreateNewTagAtBeginning, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewTagAtBeginning(TagGroup tagList) -> long\n"
		"\n"
		"TagGroupCreateNewTagAtBeginning: Creates a new tag at the beginning of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateNewTagAtEnd", _wrap_TagGroupCreateNewTagAtEnd, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewTagAtEnd(TagGroup tagList) -> long\n"
		"\n"
		"TagGroupCreateNewTagAtEnd: Creates a new tag at the end of 'tagList'.\n"
		""},
	 { (char *)"TagGroupCreateNewTagBefore", _wrap_TagGroupCreateNewTagBefore, METH_VARARGS, (char *)"\n"
		"TagGroupCreateNewTagBefore(TagGroup tagList, long ref_index) -> long\n"
		"\n"
		"TagGroupCreateNewTagBefore: Creates a new tag before 'ref_index' in 'tagList'.\n"
		""},
	 { (char *)"TagGroupDeleteAllTags", _wrap_TagGroupDeleteAllTags, METH_VARARGS, (char *)"\n"
		"TagGroupDeleteAllTags(TagGroup tagGroup)\n"
		"\n"
		"TagGroupDeleteAllTags: Deletes all the tags in 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupDeleteTagWithIndex", _wrap_TagGroupDeleteTagWithIndex, METH_VARARGS, (char *)"\n"
		"TagGroupDeleteTagWithIndex(TagGroup taGroup, long index)\n"
		"\n"
		"TagGroupDeleteTagWithIndex: Deletes the tag at index 'index'.\n"
		""},
	 { (char *)"TagGroupDeleteTagWithLabel", _wrap_TagGroupDeleteTagWithLabel, METH_VARARGS, (char *)"\n"
		"TagGroupDeleteTagWithLabel(TagGroup tagGroup, Gatan::DM::String const & tagPath) -> bool\n"
		"\n"
		"TagGroupDeleteTagWithLabel: Deletes the tag labelled by the path 'tagPath'. Returns false\n"
		"if the label could not be found.\n"
		""},
	 { (char *)"TagGroupDoesTagExist", _wrap_TagGroupDoesTagExist, METH_VARARGS, (char *)"\n"
		"TagGroupDoesTagExist(TagGroup tagGroup, Gatan::DM::String const & tagPath) -> bool\n"
		"\n"
		"TagGroupDoesTagExist: Finds the tag group and index corresponding to the tag referenced \n"
		"by 'tagPath' in 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupExecuteScriptGroup", _wrap_TagGroupExecuteScriptGroup, METH_VARARGS, (char *)"\n"
		"TagGroupExecuteScriptGroup(TagGroup tagGroup, char const * form)\n"
		"\n"
		"TagGroupExecuteScriptGroup: Execute a group of script functions in 'tagGroup'. The \n"
		"actual scripts executed will be formed by sprintf'ing into the 'form' parameter.  The \n"
		"form parameter should contain exactly one '%s' into which the function name will be \n"
		"inserted.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsArray", _wrap_TagGroupGetIndexedTagAsArray, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsArray(TagGroup tagGroup, ulong index, Image image) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsArray: Gets the data at 'index' in 'tagGroup' as an array of data \n"
		"in 'image'.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsBoolean", _wrap_TagGroupGetIndexedTagAsBoolean, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsBoolean(TagGroup tagGroup, long index, bool * val) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsBoolean: Gets the data at 'index' in 'tagGroup' as a boolean.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsDouble", _wrap_TagGroupGetIndexedTagAsDouble, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsDouble(TagGroup tagGroup, long index, double * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsDouble: Gets the data at 'index' in 'tagGroup' as a double.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsDoubleComplex", _wrap_TagGroupGetIndexedTagAsDoubleComplex, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsDoubleComplex(TagGroup tagGroup, long index, complex128_t * c) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsDoubleComplex: Gets the data at 'index' in 'tagGroup' as a double \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsEightBitColor", _wrap_TagGroupGetIndexedTagAsEightBitColor, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsEightBitColor(TagGroup tagGroup, long index, rgba_uint8_os_t * c) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsEightBitColor: Gets the data at 'index' in 'tagGroup' as an eight \n"
		"bit color.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsFloat", _wrap_TagGroupGetIndexedTagAsFloat, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsFloat(TagGroup tagGroup, long index, float * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsFloat: Gets the data at 'index' in 'tagGroup' as a float.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsFloatComplex", _wrap_TagGroupGetIndexedTagAsFloatComplex, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsFloatComplex(TagGroup tagGroup, long index, complex128_t * c) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsFloatComplex: Gets the data at 'index' in 'tagGroup' as a float \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsFloatPoint", _wrap_TagGroupGetIndexedTagAsFloatPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsFloatPoint(TagGroup tagGroup, long index, float * x, float * y) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsFloatPoint: Gets the data at 'index' in 'tagGroup' as a float \n"
		"point.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsFloatRect", _wrap_TagGroupGetIndexedTagAsFloatRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsFloatRect(TagGroup tagGroup, long index, float * t, float * l, float * b, float * r) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsFloatRect: Gets the data at 'index' in 'tagGroup' as a float rect.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsLong", _wrap_TagGroupGetIndexedTagAsLong, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsLong(TagGroup tagGroup, long index, long * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsLong: Gets the data at 'index' in 'tagGroup' as a long.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsLongPoint", _wrap_TagGroupGetIndexedTagAsLongPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsLongPoint(TagGroup tagGroup, long index, SSIZE_T * x, SSIZE_T * y) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsLongPoint: Gets the data at 'index' in 'tagGroup' as a long point.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsLongRect", _wrap_TagGroupGetIndexedTagAsLongRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsLongRect(TagGroup tagGroup, long index, SSIZE_T * t, SSIZE_T * l, SSIZE_T * b, SSIZE_T * r) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsLongRect: Gets the data at 'index' in 'tagGroup' as a long rect.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsShort", _wrap_TagGroupGetIndexedTagAsShort, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsShort(TagGroup tagGroup, long index, short * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsShort: Gets the data at 'index' in 'tagGroup' as a short.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsShortPoint", _wrap_TagGroupGetIndexedTagAsShortPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsShortPoint(TagGroup tagGroup, long index, short * x, short * y) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsShortPoint: Gets the data at 'index' in 'tagGroup' as a short \n"
		"point.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsShortRect", _wrap_TagGroupGetIndexedTagAsShortRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsShortRect(TagGroup tagGroup, long index, short * t, short * l, short * b, short * r) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsShortRect: Gets the data at 'index' in 'tagGroup' as a short rect.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsString", _wrap_TagGroupGetIndexedTagAsString, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsString(TagGroup tagGroup, long index, Gatan::DM::String & str) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsString: Gets the data at 'index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsTagGroup", _wrap_TagGroupGetIndexedTagAsTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsTagGroup(TagGroup tagGroup, long index, TagGroup subGroup) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsTagGroup: Gets the data at 'index' in 'TagGroup' as a group.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsText", _wrap_TagGroupGetIndexedTagAsText, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsText(TagGroup tagGroup, long index, Gatan::DM::String & str) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsText: Gets the data at 'index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsUInt16", _wrap_TagGroupGetIndexedTagAsUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsUInt16(TagGroup tagGroup, long index, uint16 * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsUInt16: Gets the data at 'index' in 'tagGroup' as a 16-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupGetIndexedTagAsUInt32", _wrap_TagGroupGetIndexedTagAsUInt32, METH_VARARGS, (char *)"\n"
		"TagGroupGetIndexedTagAsUInt32(TagGroup tagGroup, long index, ulong * number) -> bool\n"
		"\n"
		"TagGroupGetIndexedTagAsUInt32: Gets the data at 'index' in 'tagGroup' as a 32-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupGetOrCreateTagGroup", _wrap_TagGroupGetOrCreateTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupGetOrCreateTagGroup(TagGroup tagGroup, Gatan::DM::String const & tagPath) -> TagGroup\n"
		"\n"
		"TagGroupGetOrCreateTagGroup: Gets the tag group named by 'tagPath', or creates a new \n"
		"such group and all necessary intermediate groups.\n"
		""},
	 { (char *)"TagGroupGetOrCreateTagList", _wrap_TagGroupGetOrCreateTagList, METH_VARARGS, (char *)"\n"
		"TagGroupGetOrCreateTagList(TagGroup tagGroup, Gatan::DM::String const & tagPath) -> TagGroup\n"
		"\n"
		"TagGroupGetOrCreateTagList: Gets the tag list named by 'tagPath', or creates a new such \n"
		"list and all necessary intermediate groups.\n"
		""},
	 { (char *)"TagGroupGetSeeds", _wrap_TagGroupGetSeeds, METH_VARARGS, (char *)"\n"
		"TagGroupGetSeeds(TagGroup tagGroup) -> long\n"
		"\n"
		"TagGroupGetSeeds: Gets a set of seeds that describe the tag group.\n"
		""},
	 { (char *)"TagGroupGetTagAsArray", _wrap_TagGroupGetTagAsArray, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsArray(TagGroup tagGroup, char const * tagPath, Image image) -> bool\n"
		"\n"
		"TagGroupGetTagAsArray: Gets the data at 'tagPath' in 'tagGroup' as an array of data in \n"
		"'image'.\n"
		""},
	 { (char *)"TagGroupGetTagAsBoolean", _wrap_TagGroupGetTagAsBoolean, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsBoolean(TagGroup tags, Gatan::DM::String const & tag_path, bool * tag_val) -> bool\n"
		"\n"
		"TagGroupGetTagAsBoolean: Gets the data at 'tagPath' in 'tagGroup' as a boolean.\n"
		""},
	 { (char *)"TagGroupGetTagAsDouble", _wrap_TagGroupGetTagAsDouble, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsDouble(TagGroup tagGroup, char const * tagPath, double * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsDouble: Gets the data at 'tagPath' in 'tagGroup' as a double.\n"
		""},
	 { (char *)"TagGroupGetTagAsDoubleComplex", _wrap_TagGroupGetTagAsDoubleComplex, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsDoubleComplex(TagGroup tagGroup, char const * tagPath, complex128_t * c) -> bool\n"
		"\n"
		"TagGroupGetTagAsDoubleComplex: Gets the data at 'tagPath' in 'tagGroup' as a double \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupGetTagAsEightBitColor", _wrap_TagGroupGetTagAsEightBitColor, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsEightBitColor(TagGroup tagGroup, char const * tagPath, rgba_uint8_os_t * c) -> bool\n"
		"\n"
		"TagGroupGetTagAsEightBitColor: Gets the data at 'tagPath' in 'tagGroup' as an eight bit \n"
		"color.\n"
		""},
	 { (char *)"TagGroupGetTagAsFloat", _wrap_TagGroupGetTagAsFloat, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsFloat(TagGroup tagGroup, char const * tagPath, float * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsFloat: Gets the data at 'tagPath' in 'tagGroup' as a float.\n"
		""},
	 { (char *)"TagGroupGetTagAsFloatComplex", _wrap_TagGroupGetTagAsFloatComplex, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsFloatComplex(TagGroup tagGroup, char const * tagPath, complex128_t * c) -> bool\n"
		"\n"
		"TagGroupGetTagAsFloatComplex: Gets the data at 'tagPath' in 'tagGroup' as a float \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupGetTagAsFloatPoint", _wrap_TagGroupGetTagAsFloatPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsFloatPoint(TagGroup tagGroup, char const * tagPath, float * x, float * y) -> bool\n"
		"\n"
		"TagGroupGetTagAsFloatPoint: Gets the data at 'tagPath' in 'tagGroup' as a short point.\n"
		""},
	 { (char *)"TagGroupGetTagAsFloatRect", _wrap_TagGroupGetTagAsFloatRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsFloatRect(TagGroup tagGroup, char const * tagPath, float * t, float * l, float * b, float * r) -> bool\n"
		"\n"
		"TagGroupGetTagAsFloatRect: Gets the data at 'tagPath' in 'tagGroup' as a short rect.\n"
		""},
	 { (char *)"TagGroupGetTagAsLong", _wrap_TagGroupGetTagAsLong, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsLong(TagGroup tagGroup, char const * tagPath, long * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsLong: Gets the data at 'tagPath' in 'tagGroup' as a long.\n"
		""},
	 { (char *)"TagGroupGetTagAsLongPoint", _wrap_TagGroupGetTagAsLongPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsLongPoint(TagGroup tagGroup, char const * tagPath, long * x, long * y) -> bool\n"
		"\n"
		"TagGroupGetTagAsLongPoint: Gets the data at 'tagPath' in 'tagGroup' as a long point.\n"
		""},
	 { (char *)"TagGroupGetTagAsLongRect", _wrap_TagGroupGetTagAsLongRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsLongRect(TagGroup tagGroup, char const * tagPath, long * t, long * l, long * b, long * r) -> bool\n"
		"\n"
		"TagGroupGetTagAsLongRect: Gets the data at 'tagPath' in 'tagGroup' as a long rect.\n"
		""},
	 { (char *)"TagGroupGetTagAsRGBUInt16", _wrap_TagGroupGetTagAsRGBUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsRGBUInt16(TagGroup tagGroup, long index, uint16 * r, uint16 * g, uint16 * b) -> bool\n"
		"TagGroupGetTagAsRGBUInt16(TagGroup tagGroup, char const * tagPath, uint16 * r, uint16 * g, uint16 * b) -> bool\n"
		"\n"
		"TagGroupGetTagAsRGBUInt16: Gets the data at 'index' in 'tagGroup' as a 16-bit rgb value.\n"
		""},
	 { (char *)"TagGroupGetTagAsShort", _wrap_TagGroupGetTagAsShort, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsShort(TagGroup tagGroup, char const * tagPath, short * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsShort: Gets the data at 'tagPath' in 'tagGroup' as a short.\n"
		""},
	 { (char *)"TagGroupGetTagAsShortPoint", _wrap_TagGroupGetTagAsShortPoint, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsShortPoint(TagGroup tagGroup, char const * tagPath, short * x, short * y) -> bool\n"
		"\n"
		"TagGroupGetTagAsShortPoint: Gets the data at 'tagPath' in 'tagGroup' as a short point.\n"
		""},
	 { (char *)"TagGroupGetTagAsShortRect", _wrap_TagGroupGetTagAsShortRect, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsShortRect(TagGroup tagGroup, char const * tagPath, short * t, short * l, short * b, short * r) -> bool\n"
		"\n"
		"TagGroupGetTagAsShortRect: Gets the data at 'tagPath' in 'tagGroup' as a short rect.\n"
		""},
	 { (char *)"TagGroupGetTagAsString", _wrap_TagGroupGetTagAsString, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsString(TagGroup tagGroup, char const * tagPath, Gatan::DM::String & str) -> bool\n"
		"\n"
		"TagGroupGetTagAsString: Gets the data at 'tagPath' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupGetTagAsTagGroup", _wrap_TagGroupGetTagAsTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsTagGroup(TagGroup tags, Gatan::DM::String const & tag_path, TagGroup sub_tags) -> bool\n"
		"\n"
		"TagGroupGetTagAsTagGroup: Gets the data at 'tagPath' in 'TagGroup' as a group.\n"
		""},
	 { (char *)"TagGroupGetTagAsList", _wrap_TagGroupGetTagAsList, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsList(TagGroup tagGroup, char const * tagPath, TagGroup subGroup) -> bool\n"
		"\n"
		"TagGroupGetTagAsList: Gets the data at 'tagPath' in 'TagGroup' as a list.\n"
		""},
	 { (char *)"TagGroupGetTagAsText", _wrap_TagGroupGetTagAsText, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsText(TagGroup tagGroup, char const * tagPath, Gatan::DM::String & str) -> bool\n"
		"\n"
		"TagGroupGetTagAsText: Gets the data at 'tagPath' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupGetTagAsUInt16", _wrap_TagGroupGetTagAsUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsUInt16(TagGroup tagGroup, char const * tagPath, uint16 * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsUInt16: Gets the data at 'tagPath' in 'tagGroup' as a 16-bit unsigned \n"
		"integer.\n"
		""},
	 { (char *)"TagGroupGetTagAsUInt32", _wrap_TagGroupGetTagAsUInt32, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagAsUInt32(TagGroup tagGroup, char const * tagPath, ulong * number) -> bool\n"
		"\n"
		"TagGroupGetTagAsUInt32: Gets the data at 'tagPath' in 'tagGroup' as a 32-bit unsigned \n"
		"integer.\n"
		""},
	 { (char *)"TagGroupGetTagLabel", _wrap_TagGroupGetTagLabel, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagLabel(TagGroup tagGroup, long index) -> Gatan::DM::String\n"
		"\n"
		"TagGroupGetTagLabel: Gets the label of the 'index'th tag in the tag group.\n"
		""},
	 { (char *)"TagGroupGetTagSize", _wrap_TagGroupGetTagSize, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagSize(TagGroup tagGroup, long index) -> long\n"
		"\n"
		"TagGroupGetTagSize: Gets the size of the tag.\n"
		""},
	 { (char *)"TagGroupGetTagType", _wrap_TagGroupGetTagType, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagType(TagGroup tagGroup, long index, long type_index) -> long\n"
		"\n"
		"TagGroupGetTagType: Returns the 'type_index'th element of the tag's type.\n"
		""},
	 { (char *)"TagGroupGetTagTypeLength", _wrap_TagGroupGetTagTypeLength, METH_VARARGS, (char *)"\n"
		"TagGroupGetTagTypeLength(TagGroup tagGroup, long index) -> long\n"
		"\n"
		"TagGroupGetTagTypeLength: Returns number of elements in the tag's type.\n"
		""},
	 { (char *)"TagGroupHasChangedSince", _wrap_TagGroupHasChangedSince, METH_VARARGS, (char *)"\n"
		"TagGroupHasChangedSince(TagGroup tagGroup, long seeds) -> bool\n"
		"\n"
		"TagGroupHasChangedSince: Returns true if the tag group has changed since 'seeds' was \n"
		"constructed.\n"
		""},
	 { (char *)"TagGroupInsertTagAsArray", _wrap_TagGroupInsertTagAsArray, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsArray(TagGroup tagGroup, ulong ref_index, Image image)\n"
		"\n"
		"TagGroupInsertTagAsArray: Inserts new data before 'ref_index' in 'tagGroup' as an array \n"
		"of data in 'image'.\n"
		""},
	 { (char *)"TagGroupInsertTagAsBoolean", _wrap_TagGroupInsertTagAsBoolean, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsBoolean(TagGroup tagGroup, long ref_index, bool val)\n"
		"\n"
		"TagGroupInsertTagAsBoolean: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"boolean.\n"
		""},
	 { (char *)"TagGroupInsertTagAsDouble", _wrap_TagGroupInsertTagAsDouble, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsDouble(TagGroup tagGroup, long ref_index, double number)\n"
		"\n"
		"TagGroupInsertTagAsDouble: Inserts new data before 'ref_index' in 'tagGroup' as a double.\n"
		""},
	 { (char *)"TagGroupInsertTagAsDoubleComplex", _wrap_TagGroupInsertTagAsDoubleComplex, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsDoubleComplex(TagGroup tagGroup, long ref_index, complex128_t const & c)\n"
		"\n"
		"TagGroupInsertTagAsDoubleComplex: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"double complex.\n"
		""},
	 { (char *)"TagGroupInsertTagAsEightBitColor", _wrap_TagGroupInsertTagAsEightBitColor, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsEightBitColor(TagGroup tagGroup, long ref_index, rgba_uint8_os_t c)\n"
		"\n"
		"TagGroupInsertTagAsEightBitColor: Inserts new data before 'ref_index' in 'tagGroup' as \n"
		"an eight bit color.\n"
		""},
	 { (char *)"TagGroupInsertTagAsFloat", _wrap_TagGroupInsertTagAsFloat, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsFloat(TagGroup tagGroup, long ref_index, float number)\n"
		"\n"
		"TagGroupInsertTagAsFloat: Inserts new data before 'ref_index' in 'tagGroup' as a float.\n"
		""},
	 { (char *)"TagGroupInsertTagAsFloatComplex", _wrap_TagGroupInsertTagAsFloatComplex, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsFloatComplex(TagGroup tagGroup, long ref_index, complex128_t const & c)\n"
		"\n"
		"TagGroupInsertTagAsFloatComplex: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"float complex.\n"
		""},
	 { (char *)"TagGroupInsertTagAsFloatPoint", _wrap_TagGroupInsertTagAsFloatPoint, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsFloatPoint(TagGroup tagGroup, long ref_index, float x, float y)\n"
		"\n"
		"TagGroupInsertTagAsFloatPoint: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"float point.\n"
		""},
	 { (char *)"TagGroupInsertTagAsFloatRect", _wrap_TagGroupInsertTagAsFloatRect, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsFloatRect(TagGroup tagGroup, long ref_index, float t, float l, float b, float r)\n"
		"\n"
		"TagGroupInsertTagAsFloatRect: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"float rect.\n"
		""},
	 { (char *)"TagGroupInsertTagAsLong", _wrap_TagGroupInsertTagAsLong, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsLong(TagGroup tagGroup, long ref_index, long number)\n"
		"\n"
		"TagGroupInsertTagAsLong: Inserts new data before 'ref_index' in 'tagGroup' as a long.\n"
		""},
	 { (char *)"TagGroupInsertTagAsLongPoint", _wrap_TagGroupInsertTagAsLongPoint, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsLongPoint(TagGroup tagGroup, long ref_index, long x, long y)\n"
		"\n"
		"TagGroupInsertTagAsLongPoint: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"long point.\n"
		""},
	 { (char *)"TagGroupInsertTagAsLongRect", _wrap_TagGroupInsertTagAsLongRect, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsLongRect(TagGroup tagGroup, long ref_index, long t, long l, long b, long r)\n"
		"\n"
		"TagGroupInsertTagAsLongRect: Inserts new data before 'ref_index' in 'tagGroup' as a long \n"
		"rect.\n"
		""},
	 { (char *)"TagGroupInsertTagAsRGBUInt16", _wrap_TagGroupInsertTagAsRGBUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsRGBUInt16(TagGroup tagGroup, long ref_index, uint16 r, uint16 g, uint16 b)\n"
		"\n"
		"TagGroupInsertTagAsRGBUInt16: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"16-bit rgb value.\n"
		""},
	 { (char *)"TagGroupInsertTagAsShort", _wrap_TagGroupInsertTagAsShort, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsShort(TagGroup tagGroup, long ref_index, short number)\n"
		"\n"
		"TagGroupInsertTagAsShort: Inserts new data before 'ref_index' in 'tagGroup' as a short.\n"
		""},
	 { (char *)"TagGroupInsertTagAsShortPoint", _wrap_TagGroupInsertTagAsShortPoint, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsShortPoint(TagGroup tagGroup, long ref_index, short x, short y)\n"
		"\n"
		"TagGroupInsertTagAsShortPoint: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"short point.\n"
		""},
	 { (char *)"TagGroupInsertTagAsShortRect", _wrap_TagGroupInsertTagAsShortRect, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsShortRect(TagGroup tagGroup, long ref_index, short t, short l, short b, short r)\n"
		"\n"
		"TagGroupInsertTagAsShortRect: Inserts new data before 'ref_index' in 'tagGroup' as a \n"
		"short rect.\n"
		""},
	 { (char *)"TagGroupInsertTagAsString", _wrap_TagGroupInsertTagAsString, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsString(TagGroup tagGroup, long ref_index, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupInsertTagAsString: Inserts new data before 'ref_index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupInsertTagAsTagGroup", _wrap_TagGroupInsertTagAsTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsTagGroup(TagGroup tagGroup, long ref_index, TagGroup subGroup)\n"
		"\n"
		"TagGroupInsertTagAsTagGroup: Inserts new data before 'ref_index' in 'TagGroup' as a \n"
		"group.\n"
		""},
	 { (char *)"TagGroupInsertTagAsText", _wrap_TagGroupInsertTagAsText, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsText(TagGroup tagGroup, long ref_index, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupInsertTagAsText: Inserts new data before 'ref_index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupInsertTagAsUInt16", _wrap_TagGroupInsertTagAsUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsUInt16(TagGroup tagGroup, long ref_index, uint16 number)\n"
		"\n"
		"TagGroupInsertTagAsUInt16: Inserts new data before 'ref_index' in 'tagGroup' as a 16-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupInsertTagAsUInt32", _wrap_TagGroupInsertTagAsUInt32, METH_VARARGS, (char *)"\n"
		"TagGroupInsertTagAsUInt32(TagGroup tagGroup, long ref_index, ulong number)\n"
		"\n"
		"TagGroupInsertTagAsUInt32: Inserts new data before 'ref_index' in 'tagGroup' as a 32-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupIsList", _wrap_TagGroupIsList, METH_VARARGS, (char *)"\n"
		"TagGroupIsList(TagGroup tagGroup) -> bool\n"
		"\n"
		"TagGroupIsList: Returns true if the tag group is a list.\n"
		""},
	 { (char *)"TagGroupIsOpen", _wrap_TagGroupIsOpen, METH_VARARGS, (char *)"\n"
		"TagGroupIsOpen(TagGroup tagGroup) -> bool\n"
		"\n"
		"TagGroupIsOpen: Returns whether 'tagGroup' is open or not.\n"
		""},
	 { (char *)"TagGroupIsValid", _wrap_TagGroupIsValid, METH_VARARGS, (char *)"\n"
		"TagGroupIsValid(TagGroup tagGroup) -> bool\n"
		"\n"
		"TagGroupIsValid: Returns true if 'tagGroup' references a valid object.\n"
		""},
	 { (char *)"TagGroupLoadFromFile", _wrap_TagGroupLoadFromFile, METH_VARARGS, (char *)"\n"
		"TagGroupLoadFromFile(TagGroup tagGroup, Gatan::DM::String const & path) -> bool\n"
		"\n"
		"TagGroupLoadFromFile: Loads the contents of the file specified by 'path' into the tag \n"
		"group.\n"
		""},
	 { (char *)"TagGroupLoadFromFileWithLabel", _wrap_TagGroupLoadFromFileWithLabel, METH_VARARGS, (char *)"\n"
		"TagGroupLoadFromFileWithLabel(TagGroup tagGroup, Gatan::DM::String const & path, Gatan::DM::String & label) -> bool\n"
		"\n"
		"TagGroupLoadFromFileWithLabel: Loads the contents of the file specified by 'path' into \n"
		"the tag group and returns the label, if any.\n"
		""},
	 { (char *)"TagGroupMarkAsChanged", _wrap_TagGroupMarkAsChanged, METH_VARARGS, (char *)"\n"
		"TagGroupMarkAsChanged(TagGroup tagGroup)\n"
		"\n"
		"TagGroupMarkAsChanged: Marks 'tagGroup' as having beein modified.\n"
		""},
	 { (char *)"TagGroupMergeTagsFrom", _wrap_TagGroupMergeTagsFrom, METH_VARARGS, (char *)"\n"
		"TagGroupMergeTagsFrom(TagGroup tagGroup, TagGroup srcGroup)\n"
		"\n"
		"TagGroupMergeTagsFrom: merges tags from 'srcGroup' into 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupOpenBrowserWindow", _wrap_TagGroupOpenBrowserWindow, METH_VARARGS, (char *)"\n"
		"TagGroupOpenBrowserWindow(TagGroup tagGroup, bool isFileBased) -> Gatan::DM::Window\n"
		"\n"
		"TagGroupOpenBrowserWindow: Opens a browser window for the tag group.\n"
		""},
	 { (char *)"TagGroupParseAndCreateTagPath", _wrap_TagGroupParseAndCreateTagPath, METH_VARARGS, (char *)"\n"
		"TagGroupParseAndCreateTagPath(TagGroup tagGroup, Gatan::DM::String const & tagPath, TagGroup parentGroup, Gatan::DM::String & label) -> long\n"
		"\n"
		"TagGroupParseAndCreateTagPath: Finds the tag group and index corresponding to the tag \n"
		"referenced by 'tagPath' in 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupParseTagPath", _wrap_TagGroupParseTagPath, METH_VARARGS, (char *)"\n"
		"TagGroupParseTagPath(TagGroup tagGroup, Gatan::DM::String const & tagPath, TagGroup parentGroup, Gatan::DM::String & label) -> long\n"
		"\n"
		"TagGroupParseTagPath: Finds the tag group and index corresponding to the tag referenced \n"
		"by 'tagPath' in 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupReleaseSeeds", _wrap_TagGroupReleaseSeeds, METH_VARARGS, (char *)"\n"
		"TagGroupReleaseSeeds(TagGroup tagGroup, long seeds)\n"
		"\n"
		"TagGroupReleaseSeeds: Releases the seeds returned by 'TagGroupGetSeeds'.\n"
		""},
	 { (char *)"TagGroupReplaceTagsWithCopy", _wrap_TagGroupReplaceTagsWithCopy, METH_VARARGS, (char *)"\n"
		"TagGroupReplaceTagsWithCopy(TagGroup tagGroup, TagGroup srcGroup)\n"
		"\n"
		"TagGroupReplaceTagsWithCopy: Deletes all tags in 'tagGroup' and copies tags in \n"
		"'srcGroup' to 'tagGroup'.\n"
		""},
	 { (char *)"TagGroupSaveToFile", _wrap_TagGroupSaveToFile, METH_VARARGS, (char *)"\n"
		"TagGroupSaveToFile(TagGroup tagGroup, Gatan::DM::String const & path)\n"
		"\n"
		"TagGroupSaveToFile: Saves the contents of the tag group to the file specified by 'path'.\n"
		""},
	 { (char *)"TagGroupSaveToFileWithLabel", _wrap_TagGroupSaveToFileWithLabel, METH_VARARGS, (char *)"\n"
		"TagGroupSaveToFileWithLabel(TagGroup tagGroup, Gatan::DM::String const & path, Gatan::DM::String const & label)\n"
		"\n"
		"TagGroupSaveToFileWithLabel: Saves the contents of the tag group and the label 'label' \n"
		"to the file specified by 'path'.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsArray", _wrap_TagGroupSetIndexedTagAsArray, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsArray(TagGroup tagGroup, ulong index, Image image)\n"
		"\n"
		"TagGroupSetIndexedTagAsArray: Set the data at 'index' in 'tagGroup' as an array of data \n"
		"in 'image'.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsBoolean", _wrap_TagGroupSetIndexedTagAsBoolean, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsBoolean(TagGroup tagGroup, long index, bool val)\n"
		"\n"
		"TagGroupSetIndexedTagAsBoolean: Sets the data at 'index' in 'tagGroup' as a boolean.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsDouble", _wrap_TagGroupSetIndexedTagAsDouble, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsDouble(TagGroup tagGroup, long index, double number)\n"
		"\n"
		"TagGroupSetIndexedTagAsDouble: Sets the data at 'index' in 'tagGroup' as a double.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsDoubleComplex", _wrap_TagGroupSetIndexedTagAsDoubleComplex, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsDoubleComplex(TagGroup tagGroup, long index, complex128_t const & c)\n"
		"\n"
		"TagGroupSetIndexedTagAsDoubleComplex: Sets the data at 'index' in 'tagGroup' as a double \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsEightBitColor", _wrap_TagGroupSetIndexedTagAsEightBitColor, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsEightBitColor(TagGroup tagGroup, long index, rgba_uint8_os_t c)\n"
		"\n"
		"TagGroupSetIndexedTagAsEightBitColor: Sets the data at 'index' in 'tagGroup' as an eight \n"
		"bit color.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsFloat", _wrap_TagGroupSetIndexedTagAsFloat, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsFloat(TagGroup tagGroup, long index, float number)\n"
		"\n"
		"TagGroupSetIndexedTagAsFloat: Sets the data at 'index' in 'tagGroup' as a float.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsFloatComplex", _wrap_TagGroupSetIndexedTagAsFloatComplex, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsFloatComplex(TagGroup tagGroup, long index, complex128_t const & c)\n"
		"\n"
		"TagGroupSetIndexedTagAsFloatComplex: Sets the data at 'index' in 'tagGroup' as a float \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsFloatPoint", _wrap_TagGroupSetIndexedTagAsFloatPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsFloatPoint(TagGroup tagGroup, long index, float x, float y)\n"
		"\n"
		"TagGroupSetIndexedTagAsFloatPoint: Sets the data at 'index' in 'tagGroup' as a float \n"
		"point.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsFloatRect", _wrap_TagGroupSetIndexedTagAsFloatRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsFloatRect(TagGroup tagGroup, long index, float t, float l, float b, float r)\n"
		"\n"
		"TagGroupSetIndexedTagAsFloatRect: Sets the data at 'index' in 'tagGroup' as a float rect.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsLong", _wrap_TagGroupSetIndexedTagAsLong, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsLong(TagGroup tagGroup, long index, long number)\n"
		"\n"
		"TagGroupSetIndexedTagAsLong: Sets the data at 'index' in 'tagGroup' as a long.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsLongPoint", _wrap_TagGroupSetIndexedTagAsLongPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsLongPoint(TagGroup tagGroup, long index, SSIZE_T x, SSIZE_T y)\n"
		"\n"
		"TagGroupSetIndexedTagAsLongPoint: Sets the data at 'index' in 'tagGroup' as a long point.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsLongRect", _wrap_TagGroupSetIndexedTagAsLongRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsLongRect(TagGroup tagGroup, long index, SSIZE_T t, SSIZE_T l, SSIZE_T b, SSIZE_T r)\n"
		"\n"
		"TagGroupSetIndexedTagAsLongRect: Sets the data at 'index' in 'tagGroup' as a long rect.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsRGBUInt16", _wrap_TagGroupSetIndexedTagAsRGBUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsRGBUInt16(TagGroup tagGroup, long index, uint16 r, uint16 g, uint16 b)\n"
		"\n"
		"TagGroupSetIndexedTagAsRGBUInt16: Sets the data at 'index' in 'tagGroup' as a 16-bit rgb \n"
		"value.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsShort", _wrap_TagGroupSetIndexedTagAsShort, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsShort(TagGroup tagGroup, long index, short number)\n"
		"\n"
		"TagGroupSetIndexedTagAsShort: Sets the data at 'index' in 'tagGroup' as a short.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsShortPoint", _wrap_TagGroupSetIndexedTagAsShortPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsShortPoint(TagGroup tagGroup, long index, short x, short y)\n"
		"\n"
		"TagGroupSetIndexedTagAsShortPoint: Sets the data at 'index' in 'tagGroup' as a short \n"
		"point.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsShortRect", _wrap_TagGroupSetIndexedTagAsShortRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsShortRect(TagGroup tagGroup, long index, short t, short l, short b, short r)\n"
		"\n"
		"TagGroupSetIndexedTagAsShortRect: Sets the data at 'index' in 'tagGroup' as a short rect.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsString", _wrap_TagGroupSetIndexedTagAsString, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsString(TagGroup tagGroup, long index, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupSetIndexedTagAsString: Sets the data at 'index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsTagGroup", _wrap_TagGroupSetIndexedTagAsTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsTagGroup(TagGroup tagGroup, long index, TagGroup subGroup)\n"
		"\n"
		"TagGroupSetIndexedTagAsTagGroup: Sets the data at 'index' in 'TagGroup' as a group.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsText", _wrap_TagGroupSetIndexedTagAsText, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsText(TagGroup tagGroup, long index, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupSetIndexedTagAsText: Sets the data at 'index' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsUInt16", _wrap_TagGroupSetIndexedTagAsUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsUInt16(TagGroup tagGroup, long index, uint16 number)\n"
		"\n"
		"TagGroupSetIndexedTagAsUInt16: Sets the data at 'index' in 'tagGroup' as a 16-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupSetIndexedTagAsUInt32", _wrap_TagGroupSetIndexedTagAsUInt32, METH_VARARGS, (char *)"\n"
		"TagGroupSetIndexedTagAsUInt32(TagGroup tagGroup, long index, ulong number)\n"
		"\n"
		"TagGroupSetIndexedTagAsUInt32: Sets the data at 'index' in 'tagGroup' as a 32-bit \n"
		"unsigned integer.\n"
		""},
	 { (char *)"TagGroupSetIsOpen", _wrap_TagGroupSetIsOpen, METH_VARARGS, (char *)"\n"
		"TagGroupSetIsOpen(TagGroup tagGroup, bool is_open)\n"
		"\n"
		"TagGroupSetIsOpen: Sets whether 'tagGroup' is open or not.\n"
		""},
	 { (char *)"TagGroupSetTagAsArray", _wrap_TagGroupSetTagAsArray, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsArray(TagGroup tagGroup, char const * tagPath, Image image)\n"
		"\n"
		"TagGroupSetTagAsArray: Set the data at 'tagPath' in 'tagGroup' as an array of data in \n"
		"'image'.\n"
		""},
	 { (char *)"TagGroupSetTagAsBoolean", _wrap_TagGroupSetTagAsBoolean, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsBoolean(TagGroup tagGroup, char const * tagPath, bool val)\n"
		"\n"
		"TagGroupSetTagAsBoolean: Sets the data at 'tagPath' in 'tagGroup' as a boolean.\n"
		""},
	 { (char *)"TagGroupSetTagAsDouble", _wrap_TagGroupSetTagAsDouble, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsDouble(TagGroup tagGroup, char const * tagPath, double number)\n"
		"\n"
		"TagGroupSetTagAsDouble: Sets the data at 'tagPath' in 'tagGroup' as a double.\n"
		""},
	 { (char *)"TagGroupSetTagAsDoubleComplex", _wrap_TagGroupSetTagAsDoubleComplex, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsDoubleComplex(TagGroup tagGroup, char const * tagPath, complex128_t const & c)\n"
		"\n"
		"TagGroupSetTagAsDoubleComplex: Sets the data at 'tagPath' in 'tagGroup' as a double \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupSetTagAsEightBitColor", _wrap_TagGroupSetTagAsEightBitColor, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsEightBitColor(TagGroup tagGroup, char const * tagPath, rgba_uint8_os_t c)\n"
		"\n"
		"TagGroupSetTagAsEightBitColor: Sets the data at 'tagPath' in 'tagGroup' as an eight bit \n"
		"color.\n"
		""},
	 { (char *)"TagGroupSetTagAsFloat", _wrap_TagGroupSetTagAsFloat, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsFloat(TagGroup tagGroup, char const * tagPath, float number)\n"
		"\n"
		"TagGroupSetTagAsFloat: Sets the data at 'tagPath' in 'tagGroup' as a float.\n"
		""},
	 { (char *)"TagGroupSetTagAsFloatComplex", _wrap_TagGroupSetTagAsFloatComplex, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsFloatComplex(TagGroup tagGroup, char const * tagPath, complex128_t const & c)\n"
		"\n"
		"TagGroupSetTagAsFloatComplex: Sets the data at 'tagPath' in 'tagGroup' as a float \n"
		"complex.\n"
		""},
	 { (char *)"TagGroupSetTagAsFloatPoint", _wrap_TagGroupSetTagAsFloatPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsFloatPoint(TagGroup tagGroup, char const * tagPath, float x, float y)\n"
		"\n"
		"TagGroupSetTagAsFloatPoint: Sets the data at 'tagPath' in 'tagGroup' as a float point.\n"
		""},
	 { (char *)"TagGroupSetTagAsFloatRect", _wrap_TagGroupSetTagAsFloatRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsFloatRect(TagGroup tagGroup, char const * tagPath, float t, float l, float b, float r)\n"
		"\n"
		"TagGroupSetTagAsFloatRect: Sets the data at 'tagPath' in 'tagGroup' as a float rect.\n"
		""},
	 { (char *)"TagGroupSetTagAsLong", _wrap_TagGroupSetTagAsLong, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsLong(TagGroup tagGroup, char const * tagPath, long number)\n"
		"\n"
		"TagGroupSetTagAsLong: Sets the data at 'tagPath' in 'tagGroup' as a long.\n"
		""},
	 { (char *)"TagGroupSetTagAsLongPoint", _wrap_TagGroupSetTagAsLongPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsLongPoint(TagGroup tagGroup, char const * tagPath, long x, long y)\n"
		"\n"
		"TagGroupSetTagAsLongPoint: Sets the data at 'tagPath' in 'tagGroup' as a long point.\n"
		""},
	 { (char *)"TagGroupSetTagAsLongRect", _wrap_TagGroupSetTagAsLongRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsLongRect(TagGroup tagGroup, char const * tagPath, long t, long l, long b, long r)\n"
		"\n"
		"TagGroupSetTagAsLongRect: Sets the data at 'tagPath' in 'tagGroup' as a long rect.\n"
		""},
	 { (char *)"TagGroupSetTagAsRGBUInt16", _wrap_TagGroupSetTagAsRGBUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsRGBUInt16(TagGroup tagGroup, char const * tagPath, uint16 r, uint16 g, uint16 b)\n"
		"\n"
		"TagGroupSetTagAsRGBUInt16: Sets the data at 'tagPath' in 'tagGroup' as a 16-bit rgb \n"
		"value.\n"
		""},
	 { (char *)"TagGroupSetTagAsShort", _wrap_TagGroupSetTagAsShort, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsShort(TagGroup tagGroup, char const * tagPath, short number)\n"
		"\n"
		"TagGroupSetTagAsShort: Sets the data at 'tagPath' in 'tagGroup' as a short.\n"
		""},
	 { (char *)"TagGroupSetTagAsShortPoint", _wrap_TagGroupSetTagAsShortPoint, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsShortPoint(TagGroup tagGroup, char const * tagPath, short x, short y)\n"
		"\n"
		"TagGroupSetTagAsShortPoint: Sets the data at 'tagPath' in 'tagGroup' as a short point.\n"
		""},
	 { (char *)"TagGroupSetTagAsShortRect", _wrap_TagGroupSetTagAsShortRect, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsShortRect(TagGroup tagGroup, char const * tagPath, short t, short l, short b, short r)\n"
		"\n"
		"TagGroupSetTagAsShortRect: Sets the data at 'tagPath' in 'tagGroup' as a short rect.\n"
		""},
	 { (char *)"TagGroupSetTagAsString", _wrap_TagGroupSetTagAsString, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsString(TagGroup tagGroup, char const * tagPath, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupSetTagAsString: Sets the data at 'tagPath' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupSetTagAsTagGroup", _wrap_TagGroupSetTagAsTagGroup, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsTagGroup(TagGroup tags, Gatan::DM::String const & tag_path, TagGroup tag_val)\n"
		"\n"
		"TagGroupSetTagAsTagGroup: Sets the data at 'tagPath' in 'TagGroup' as a group.\n"
		""},
	 { (char *)"TagGroupSetTagAsText", _wrap_TagGroupSetTagAsText, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsText(TagGroup tagGroup, char const * tagPath, Gatan::DM::String const & s)\n"
		"\n"
		"TagGroupSetTagAsText: Sets the data at 'tagPath' in 'tagGroup' as a string.\n"
		""},
	 { (char *)"TagGroupSetTagAsUInt16", _wrap_TagGroupSetTagAsUInt16, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsUInt16(TagGroup tagGroup, char const * tagPath, uint16 number)\n"
		"\n"
		"TagGroupSetTagAsUInt16: Sets the data at 'tagPath' in 'tagGroup' as a 16-bit unsigned \n"
		"integer.\n"
		""},
	 { (char *)"TagGroupSetTagAsUInt32", _wrap_TagGroupSetTagAsUInt32, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagAsUInt32(TagGroup tagGroup, char const * tagPath, ulong number)\n"
		"\n"
		"TagGroupSetTagAsUInt32: Sets the data at 'tagPath' in 'tagGroup' as a 32-bit unsigned \n"
		"integer.\n"
		""},
	 { (char *)"TagGroupSetTagRGBBitmap", _wrap_TagGroupSetTagRGBBitmap, METH_VARARGS, (char *)"\n"
		"TagGroupSetTagRGBBitmap(TagGroup tagGroup, char const * tagPath, Image image)\n"
		"\n"
		"TagGroupSetTagRGBBitmap: Sets the data at 'tagPath' in 'tagGroup' as a RGB bitmap.\n"
		""},
	 { (char *)"TextAnnotationGetAlignment", _wrap_TextAnnotationGetAlignment, METH_VARARGS, (char *)"\n"
		"TextAnnotationGetAlignment(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"TextAnnotationGetAlignment: Gets the alignment of the text in the text annotation.\n"
		""},
	 { (char *)"TextAnnotationGetFixedPoint", _wrap_TextAnnotationGetFixedPoint, METH_VARARGS, (char *)"\n"
		"TextAnnotationGetFixedPoint(Gatan::DM::Component const & comp, float * x, float * y)\n"
		"\n"
		"TextAnnotationGetFixedPoint: Gets the fixed point of the text annotation.\n"
		""},
	 { (char *)"TextAnnotationGetResizeStyle", _wrap_TextAnnotationGetResizeStyle, METH_VARARGS, (char *)"\n"
		"TextAnnotationGetResizeStyle(Gatan::DM::Component const & comp) -> long\n"
		"\n"
		"TextAnnotationGetResizeStyle: Gets the resize style of the text annotation.\n"
		""},
	 { (char *)"TextAnnotationGetText", _wrap_TextAnnotationGetText, METH_VARARGS, (char *)"\n"
		"TextAnnotationGetText(Gatan::DM::Component const & comp) -> Gatan::DM::String\n"
		"\n"
		"TextAnnotationGetText: Gets the text of a text annotation.\n"
		""},
	 { (char *)"TextAnnotationSetAlignment", _wrap_TextAnnotationSetAlignment, METH_VARARGS, (char *)"\n"
		"TextAnnotationSetAlignment(Gatan::DM::Component const & comp, long alignment)\n"
		"\n"
		"TextAnnotationSetAlignment: Sets the alignment of the text in the text annotation.\n"
		""},
	 { (char *)"TextAnnotationSetFixedPoint", _wrap_TextAnnotationSetFixedPoint, METH_VARARGS, (char *)"\n"
		"TextAnnotationSetFixedPoint(Gatan::DM::Component const & comp, float x, float y)\n"
		"\n"
		"TextAnnotationSetFixedPoint: Sets the fixed point of the text annotation.\n"
		""},
	 { (char *)"TextAnnotationSetResizeStyle", _wrap_TextAnnotationSetResizeStyle, METH_VARARGS, (char *)"\n"
		"TextAnnotationSetResizeStyle(Gatan::DM::Component const & comp, long style)\n"
		"\n"
		"TextAnnotationSetResizeStyle: Sets the resize style of the text annotation.\n"
		""},
	 { (char *)"TextAnnotationSetText", _wrap_TextAnnotationSetText, METH_VARARGS, (char *)"\n"
		"TextAnnotationSetText(Gatan::DM::Component const & comp, Gatan::DM::String const & text)\n"
		"\n"
		"TextAnnotationSetText: Sets the text of a text annotation.\n"
		""},
	 { (char *)"ThrowableIsValid", _wrap_ThrowableIsValid, METH_VARARGS, (char *)"\n"
		"ThrowableIsValid(Gatan::DM::Throwable const & throw_) -> bool\n"
		"\n"
		"ThrowableIsValid: Returns true if 'throw_' is a valid object.\n"
		""},
	 { (char *)"TickCount", _wrap_TickCount, METH_VARARGS, (char *)"\n"
		"TickCount() -> uint32\n"
		"\n"
		"TickCount: Return the MacOS system tick count.\n"
		""},
	 { (char *)"TransferTagsAndApplyDataBar", _wrap_TransferTagsAndApplyDataBar, METH_VARARGS, (char *)"\n"
		"TransferTagsAndApplyDataBar(Image argument_1)\n"
		"\n"
		"TransferTagsAndApplyDataBar: Transfer tags and apply data bar to the image. (Deprecated, use\n"
		" AutoApplyDefaultLayout instead.)\n"
		""},
	 { (char *)"TransformPointFromImageToWindow", _wrap_TransformPointFromImageToWindow, METH_VARARGS, (char *)"\n"
		"TransformPointFromImageToWindow(Image image, float x_image, float y_image, float * x_window, float * y_window)\n"
		"\n"
		"TransformPointFromImageToWindow: Place in (x_window,y_window) the\n"
		""},
	 { (char *)"TrapException", _wrap_TrapException, METH_VARARGS, (char *)"\n"
		"TrapException(short error, long context)\n"
		"\n"
		"TrapException: Mark the exception to be thrown upon return external function call.\n"
		""},
	 { (char *)"TryToUse", _wrap_TryToUse, METH_VARARGS, (char *)"\n"
		"TryToUse(char const * name, long width, long height, short dataType, short h, short v, bool * fresh) -> Image\n"
		"\n"
		"TryToUse: Look for an image with the given name, width, height, dataType, and position \n"
		"[h,v]. Return it if found and create it if not. Store 1 into fresh if it was created and \n"
		"0 if not.\n"
		""},
	 { (char *)"TurboFFT", _wrap_TurboFFT, METH_VARARGS, (char *)"\n"
		"TurboFFT(Image buffer, Image fft, Image dark, Image gain, long top, long left, long bottom, long right, long dst, long rowBytes)\n"
		"\n"
		"TurboFFT: Perform a turbo FFT on the real image fft minus the real dark image and \n"
		"multiplied by the real gain image. Store the resulting FFT into the packed complex image \n"
		"fft. Copy the sub-area of unsigned 1-byte integer image src indicated by \n"
		"[top,left,bottom,right] to dst. The rowBytes parameter indicates the length of the row of \n"
		"dst. To copy to the screen, pass 0 for dst and rowBytes. The real buffer image is a \n"
		"scratch area. No data type checking is performed.\n"
		""},
	 { (char *)"TwoButtonDialog", _wrap_TwoButtonDialog, METH_VARARGS, (char *)"\n"
		"TwoButtonDialog(char const * prompt, char const * acceptLabel, char const * rejectLabel) -> bool\n"
		"\n"
		"TwoButtonDialog: Puts up a dialog with the given prompt and two buttons labeled \n"
		"according to the parameters. Returns 1 for the acceptLabel button and false for the other \n"
		"one.\n"
		""},
	 { (char *)"UpdateDataBar", _wrap_UpdateDataBar, METH_VARARGS, (char *)"\n"
		"UpdateDataBar(Image argument_1)\n"
		"UpdateDataBar(Image argument_1, bool update_all)\n"
		"\n"
		"UpdateDataBar: causes an update of the live data bar components based on the passed image.\n"
		""},
	 { (char *)"ApplyDefaultLayout", _wrap_ApplyDefaultLayout, METH_VARARGS, (char *)"\n"
		"ApplyDefaultLayout(Image img)\n"
		"\n"
		"ApplyDefaultLayout: applies a default layout to the image document containing the zero'th \n"
		"image display of this image. The default layout may include a scalemark and/or a databar.\n"
		"In the page mode the layout includes image display position(s). The databar components are generated based\n"
		"on the tags on this image.\n"
		""},
	 { (char *)"AutoApplyDefaultLayout", _wrap_AutoApplyDefaultLayout, METH_VARARGS, (char *)"\n"
		"AutoApplyDefaultLayout(Image img)\n"
		"\n"
		"AutoApplyDefaultLayout: checks DM preferences and optionally applies a default layout to the \n"
		"image document containing the zero'th image display of this image. The default layout may \n"
		"include a scalemark and/or a databar. In the page mode the layout includes image display position(s). \n"
		"The databar components are generated based on the tags on this image.\n"
		""},
	 { (char *)"UnregisterCustomMenu", _wrap_UnregisterCustomMenu, METH_VARARGS, (char *)"\n"
		"UnregisterCustomMenu(long menuHandlerToken)\n"
		"\n"
		"UnregisterCustomMenu: Unregister a custom menu. See the SDK documentation for more \n"
		"information.\n"
		""},
	 { (char *)"UnregisterCustomTool", _wrap_UnregisterCustomTool, METH_VARARGS, (char *)"\n"
		"UnregisterCustomTool(ULONG_PTR toolToken)\n"
		"\n"
		"UnregisterCustomTool: Remove the tool to the custom tool list. See the SDK documentation \n"
		"for more information.\n"
		""},
	 { (char *)"UnregisterObjectListener", _wrap_UnregisterObjectListener, METH_VARARGS, (char *)"\n"
		"UnregisterObjectListener(ulong_ptr_t object, ulong_ptr_t id)\n"
		"\n"
		"UnregisterObjectListener: Remove object listener from OM object. See the SDK \n"
		"documentation for more information.\n"
		""},
	 { (char *)"UnregisterSystemIdle", _wrap_UnregisterSystemIdle, METH_VARARGS, (char *)"\n"
		"UnregisterSystemIdle(SystemIdleProc SystemIdleProc)\n"
		"\n"
		"UnregisterSystemIdle: Unregister a system idle procedure.\n"
		""},
	 { (char *)"UnShiftCenter", _wrap_UnShiftCenter, METH_VARARGS, (char *)"\n"
		"UnShiftCenter(Image image)\n"
		"\n"
		"UnShiftCenter: Shifts each dimension of an image by half. For two dimensional images it\n"
		" will swap quadrants. This is the backward shift function to move the image center\n"
		" from (x/2, y/2) to (0,0). To shift it forward use the ShiftCenter function.\n"
		""},
	 { (char *)"UpdateDisplay", _wrap_UpdateDisplay, METH_VARARGS, (char *)"\n"
		"UpdateDisplay(Image argument_1, long startRow, long endRow)\n"
		"\n"
		"UpdateDisplay: Update the image display portion that displays the image rows from \n"
		"startRow to endRow.\n"
		""},
	 { (char *)"UpdateImage", _wrap_UpdateImage, METH_VARARGS, (char *)"\n"
		"UpdateImage(Image argument_1)\n"
		"\n"
		"UpdateImage: Update the image immediately.\n"
		""},
	 { (char *)"UpdateTimeBarPercentage", _wrap_UpdateTimeBarPercentage, METH_VARARGS, (char *)"\n"
		"UpdateTimeBarPercentage(float percentage)\n"
		"\n"
		"UpdateTimeBarPercentage: Updates an open time bar to the given percentage.\n"
		""},
	 { (char *)"ValidateSurvey", _wrap_ValidateSurvey, METH_VARARGS, (char *)"\n"
		"ValidateSurvey(Image argument_1)\n"
		"\n"
		"ValidateSurvey: Do the survey if necessary.\n"
		""},
	 { (char *)"variance", _wrap_variance, METH_VARARGS, (char *)"\n"
		"variance(Image argument_1) -> float\n"
		"\n"
		"variance: Return the variance of the image.\n"
		""},
	 { (char *)"WindowClose", _wrap_WindowClose, METH_VARARGS, (char *)"\n"
		"WindowClose(Gatan::DM::Window const & window, bool verify)\n"
		"\n"
		"WindowClose: Closes the window, prompting the user if 'verify' is true.\n"
		""},
	 { (char *)"WindowGetCurrentFile", _wrap_WindowGetCurrentFile, METH_VARARGS, (char *)"\n"
		"WindowGetCurrentFile(Gatan::DM::Window const & window) -> Gatan::DM::String\n"
		"\n"
		"WindowGetCurrentFile: Gets the file name of the window's document.\n"
		""},
	 { (char *)"WindowGetContentBounds", _wrap_WindowGetContentBounds, METH_VARARGS, (char *)"\n"
		"WindowGetContentBounds(Gatan::DM::Window const & window, long * top, long * left, long * bottom, long * right)\n"
		"\n"
		"WindowGetContentBounds: Gets the bounding rectangle of the content area of the 'window'.\n"
		""},
	 { (char *)"WindowGetContentPosition", _wrap_WindowGetContentPosition, METH_VARARGS, (char *)"\n"
		"WindowGetContentPosition(Gatan::DM::Window const & window, long * x, long * y)\n"
		"\n"
		"WindowGetContentPosition: Gets the position of the top-left corner of the content area \n"
		"of the 'window'.\n"
		""},
	 { (char *)"WindowGetContentSize", _wrap_WindowGetContentSize, METH_VARARGS, (char *)"\n"
		"WindowGetContentSize(Gatan::DM::Window const & window, long * x, long * y)\n"
		"\n"
		"WindowGetContentSize: Gets the size of the content area of the 'window'.\n"
		""},
	 { (char *)"WindowGetFrameBounds", _wrap_WindowGetFrameBounds, METH_VARARGS, (char *)"\n"
		"WindowGetFrameBounds(Gatan::DM::Window const & window, long * top, long * left, long * bottom, long * right)\n"
		"\n"
		"WindowGetFrameBounds: Gets the bounding rectangle of the frame area of the 'window'.\n"
		""},
	 { (char *)"WindowGetFramePosition", _wrap_WindowGetFramePosition, METH_VARARGS, (char *)"\n"
		"WindowGetFramePosition(Gatan::DM::Window const & window, long * x, long * y)\n"
		"\n"
		"WindowGetFramePosition: Gets the position of the top-left corner of the frame area of \n"
		"the 'window'.\n"
		""},
	 { (char *)"WindowGetFrameSize", _wrap_WindowGetFrameSize, METH_VARARGS, (char *)"\n"
		"WindowGetFrameSize(Gatan::DM::Window const & window, long * x, long * y)\n"
		"\n"
		"WindowGetFrameSize: Gets the size of the frame area of the 'window'.\n"
		""},
	 { (char *)"WindowGetMousePosition", _wrap_WindowGetMousePosition, METH_VARARGS, (char *)"\n"
		"WindowGetMousePosition(Gatan::DM::Window const & window, long * x, long * y)\n"
		"\n"
		"WindowGetMousePosition: Gets the current position of the mouse in the windows coordinate \n"
		"system.\n"
		""},
	 { (char *)"WindowGetTitle", _wrap_WindowGetTitle, METH_VARARGS, (char *)"\n"
		"WindowGetTitle(Gatan::DM::Window const & window) -> Gatan::DM::String\n"
		"\n"
		"WindowGetTitle: Gets the title of the window.\n"
		""},
	 { (char *)"WindowGetType", _wrap_WindowGetType, METH_VARARGS, (char *)"\n"
		"WindowGetType(Gatan::DM::Window const & window) -> long\n"
		"\n"
		"WindowGetType: Gets the type of the window.\n"
		""},
	 { (char *)"WindowGetViewState", _wrap_WindowGetViewState, METH_VARARGS, (char *)"\n"
		"WindowGetViewState(Gatan::DM::Window const & window) -> long\n"
		"\n"
		"WindowGetViewState: Gets the view state of the window. (0 normal, 1 maximized, 2 minimized\n"
		""},
	 { (char *)"WindowHide", _wrap_WindowHide, METH_VARARGS, (char *)"\n"
		"WindowHide(Gatan::DM::Window const & window)\n"
		"\n"
		"WindowHide: Hides the window.\n"
		""},
	 { (char *)"WindowIsOpen", _wrap_WindowIsOpen, METH_VARARGS, (char *)"\n"
		"WindowIsOpen(Gatan::DM::Window const & window) -> bool\n"
		"\n"
		"WindowIsOpen: Returns true if the window has not been closed.\n"
		""},
	 { (char *)"WindowIsShown", _wrap_WindowIsShown, METH_VARARGS, (char *)"\n"
		"WindowIsShown(Gatan::DM::Window const & window) -> bool\n"
		"\n"
		"WindowIsShown: Returns true if the window is shown.\n"
		""},
	 { (char *)"WindowIsValid", _wrap_WindowIsValid, METH_VARARGS, (char *)"\n"
		"WindowIsValid(Gatan::DM::Window const & window) -> bool\n"
		"\n"
		"WindowIsValid: Returns true if 'window' points to a valid object.\n"
		""},
	 { (char *)"WindowSelect", _wrap_WindowSelect, METH_VARARGS, (char *)"\n"
		"WindowSelect(Gatan::DM::Window const & window)\n"
		"\n"
		"WindowSelect: Brings 'window' to the front.\n"
		""},
	 { (char *)"WindowSendBehind", _wrap_WindowSendBehind, METH_VARARGS, (char *)"\n"
		"WindowSendBehind(Gatan::DM::Window const & window, Gatan::DM::Window const & behind_window)\n"
		"\n"
		"WindowSendBehind: Sends 'window' behind 'behind_window'.\n"
		""},
	 { (char *)"WindowSetCurrentFile", _wrap_WindowSetCurrentFile, METH_VARARGS, (char *)"\n"
		"WindowSetCurrentFile(Gatan::DM::Window const & window, Gatan::DM::String const & file_path_tok)\n"
		"\n"
		"WindowSetCurrentFile: Sets the file of the window's document to the specified file.\n"
		""},
	 { (char *)"WindowSetContentBounds", _wrap_WindowSetContentBounds, METH_VARARGS, (char *)"\n"
		"WindowSetContentBounds(Gatan::DM::Window const & window, long top, long left, long bottom, long right)\n"
		"\n"
		"WindowSetContentBounds: Sets the bounding rectangle of the content area of the 'window'.\n"
		""},
	 { (char *)"WindowSetContentPosition", _wrap_WindowSetContentPosition, METH_VARARGS, (char *)"\n"
		"WindowSetContentPosition(Gatan::DM::Window const & window, long x, long y)\n"
		"\n"
		"WindowSetContentPosition: Sets the position of the top-left corner of the content area \n"
		"of the 'window'.\n"
		""},
	 { (char *)"WindowSetContentSize", _wrap_WindowSetContentSize, METH_VARARGS, (char *)"\n"
		"WindowSetContentSize(Gatan::DM::Window const & window, long x, long y)\n"
		"\n"
		"WindowSetContentSize: Sets the size of the content area of the 'window'.\n"
		""},
	 { (char *)"WindowSetFrameBounds", _wrap_WindowSetFrameBounds, METH_VARARGS, (char *)"\n"
		"WindowSetFrameBounds(Gatan::DM::Window const & window, long top, long left, long bottom, long right)\n"
		"\n"
		"WindowSetFrameBounds: Sets the bounding rectangle of the frame area of the 'window'.\n"
		""},
	 { (char *)"WindowSetFramePosition", _wrap_WindowSetFramePosition, METH_VARARGS, (char *)"\n"
		"WindowSetFramePosition(Gatan::DM::Window const & window, long x, long y)\n"
		"\n"
		"WindowSetFramePosition: Sets the position of the top-left corner of the frame area of \n"
		"the 'window'.\n"
		""},
	 { (char *)"WindowSetFrameSize", _wrap_WindowSetFrameSize, METH_VARARGS, (char *)"\n"
		"WindowSetFrameSize(Gatan::DM::Window const & window, long x, long y)\n"
		"\n"
		"WindowSetFrameSize: Sets the size of the frame area of the 'window'.\n"
		""},
	 { (char *)"WindowSetTitle", _wrap_WindowSetTitle, METH_VARARGS, (char *)"\n"
		"WindowSetTitle(Gatan::DM::Window const & window, Gatan::DM::String const & title)\n"
		"\n"
		"WindowSetTitle: Sets the title of the window.\n"
		""},
	 { (char *)"WindowSetViewState", _wrap_WindowSetViewState, METH_VARARGS, (char *)"\n"
		"WindowSetViewState(Gatan::DM::Window const & window, long viewState)\n"
		"\n"
		"WindowSetViewState: sets the view type of the window (0 normal,1 maximized, 2 minimized.\n"
		""},
	 { (char *)"WindowShow", _wrap_WindowShow, METH_VARARGS, (char *)"\n"
		"WindowShow(Gatan::DM::Window const & window)\n"
		"\n"
		"WindowShow: Shows the window.\n"
		""},
	 { (char *)"WindowUpdate", _wrap_WindowUpdate, METH_VARARGS, (char *)"\n"
		"WindowUpdate(Gatan::DM::Window const & window)\n"
		"\n"
		"WindowUpdate: Updates 'window's display.\n"
		""},
	 { (char *)"SetFloatingWindowHeight", _wrap_SetFloatingWindowHeight, METH_VARARGS, (char *)"\n"
		"SetFloatingWindowHeight(Gatan::DM::String const & name, long height)\n"
		"\n"
		"SetFloatingWindowHeight: sets height of a named floating window (DM palette).\n"
		" If the window is docked, the adjustment causes re-computation and an update of the docking \n"
		" column layout.\n"
		""},
	 { (char *)"WriteFile", _wrap_WriteFile, METH_VARARGS, (char *)"\n"
		"WriteFile(DM_FileReference file, Gatan::DM::String const & data)\n"
		"\n"
		"WriteFile: Write the string to the file.\n"
		""},
	 { (char *)"WriteRawStream", _wrap_WriteRawStream, METH_VARARGS, (char *)"\n"
		"WriteRawStream(long rawStream, long data, long length)\n"
		"\n"
		"WriteRawStream: Write length bytes from the memory pointed to by data to rawStream.\n"
		""},
	 { (char *)"XX_GetProcessKey", _wrap_XX_GetProcessKey, METH_VARARGS, (char *)"\n"
		"XX_GetProcessKey(long pid) -> short\n"
		"\n"
		"XX_GetProcessKey: Return a keystroke associated with the background process indicated by \n"
		"pid.\n"
		""},
	 { (char *)"XX_InstallImageProcess", _wrap_XX_InstallImageProcess, METH_VARARGS, (char *)"\n"
		"XX_InstallImageProcess(Image argument_1, long pid)\n"
		"\n"
		"XX_InstallImageProcess: Associate the process indicated by pid with the image. \n"
		"Keystrokes going to the image will queue in the process after this call.\n"
		""},
	 { (char *)"Yield", _wrap_Yield, METH_VARARGS, (char *)"\n"
		"Yield()\n"
		"\n"
		"Yield: Yield to another background task.\n"
		""},
	 { (char *)"SetForbidScriptDialogFlag", _wrap_SetForbidScriptDialogFlag, METH_VARARGS, (char *)"\n"
		"SetForbidScriptDialogFlag(bool flag) -> bool\n"
		"\n"
		"SetForbidScriptDialogFlag: Sets flag that allows to disable script dialogs implemented in \n"
		"Scriptdialog.cpp\n"
		""},
	 { NULL, NULL, 0, NULL }
};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_TagGroupIterator)
static SwigPyGetSet TagGroupIterator_tg_getset = { _wrap_TagGroupIterator_tg_get, _wrap_TagGroupIterator_tg_set };
static SwigPyGetSet TagGroupIterator___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet TagGroupIterator_pos_getset = { _wrap_TagGroupIterator_pos_get, _wrap_TagGroupIterator_pos_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__TagGroupIterator_getset[] = {
    { (char*) "tg", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"TagGroupIterator.tg", (void*) &TagGroupIterator_tg_getset }
,
    { (char*) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char*)"TagGroupIterator.__dict__", (void*) &TagGroupIterator___dict___getset }
,
    { (char*) "pos", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"TagGroupIterator.pos", (void*) &TagGroupIterator_pos_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__TagGroupIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__TagGroupIterator_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__TagGroupIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "DimPy.TagGroupIterator",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_TagGroupIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__TagGroupIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__TagGroupIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__TagGroupIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__TagGroupIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::TagGroupIterator",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__TagGroupIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) self_tp_iter,               /* tp_iter */
    (iternextfunc) TagGroupIterator_tp_iternext, /* tp_iternext */
    SwigPyBuiltin__TagGroupIterator_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__TagGroupIterator_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_TagGroupIterator,    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__TagGroupIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__TagGroupIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Image)
static SwigPyGetSet Image___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Gatan__DM__Image_getset[] = {
    { (char*) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char*)"Gatan::DM::Image.__dict__", (void*) &Image___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Gatan__DM__Image_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Gatan__DM__Image_methods[] = {
  { "dims", (PyCFunction) _wrap_Image_dims, METH_VARARGS, (char*) "dims() -> int" },
  { "cheeseHashFunc", (PyCFunction) _wrap_Image_cheeseHashFunc, METH_VARARGS, (char*) "cheeseHashFunc() -> long" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Gatan__DM__Image_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "DimPy.Image",                            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Image_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Gatan__DM__Image_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__Gatan__DM__Image_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__Gatan__DM__Image_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) (hashfunc) _wrap_Image_cheeseHashFunc_closure, /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Gatan__DM__Image_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Gatan::DM::Image",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Gatan__DM__Image_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Gatan__DM__Image_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Gatan__DM__Image_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Image,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) PythonGatanDMImage_bf_getbuffer, /* bf_getbuffer */
    (releasebufferproc) PythonGatanDMImage_bf_releasebuffer, /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Gatan__DM__Image_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Gatan__DM__Image_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_TagGroup)
static SwigPyGetSet TagGroup___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Gatan__DM__TagGroup_getset[] = {
    { (char*) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char*)"Gatan::DM::TagGroup.__dict__", (void*) &TagGroup___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Gatan__DM__TagGroup_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Gatan__DM__TagGroup_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Gatan__DM__TagGroup_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "DimPy.TagGroup",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_TagGroup_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Gatan__DM__TagGroup_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__Gatan__DM__TagGroup_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__Gatan__DM__TagGroup_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Gatan__DM__TagGroup_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Gatan::DM::TagGroup",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Gatan__DM__TagGroup_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) PythonTagGroup_tp_iter,     /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Gatan__DM__TagGroup_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Gatan__DM__TagGroup_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_TagGroup,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) PythonTagGroup_mp_length,       /* mp_length */
    (binaryfunc) PythonTagGroup_mp_subscript, /* mp_subscript */
    (objobjargproc) PythonTagGroup_mp_ass_subscript, /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Gatan__DM__TagGroup_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Gatan__DM__TagGroup_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CDialog = {"_p_CDialog", "CDialog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DM_FileReference = {"_p_DM_FileReference", "DM_FileReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__Component = {"_p_Gatan__DM__Component", "Gatan::DM::Component *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__Function = {"_p_Gatan__DM__Function", "Gatan::DM::Function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__Image = {"_p_Gatan__DM__Image", "Gatan::DM::Image *", 0, 0, (void*)&SwigPyBuiltin__Gatan__DM__Image_clientdata, 0};
static swig_type_info _swigt__p_Gatan__DM__ImageDisplay = {"_p_Gatan__DM__ImageDisplay", "Gatan::DM::ImageDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__ImageDocument = {"_p_Gatan__DM__ImageDocument", "Gatan::DM::ImageDocument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__LinePlotImageDisplay = {"_p_Gatan__DM__LinePlotImageDisplay", "Gatan::DM::LinePlotImageDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__ROI = {"_p_Gatan__DM__ROI", "Gatan::DM::ROI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__RasterImageDisplay = {"_p_Gatan__DM__RasterImageDisplay", "Gatan::DM::RasterImageDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__ScriptObject = {"_p_Gatan__DM__ScriptObject", "Gatan::DM::ScriptObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__String = {"_p_Gatan__DM__String", "Gatan::DM::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__SurfacePlotImageDisplay = {"_p_Gatan__DM__SurfacePlotImageDisplay", "Gatan::DM::SurfacePlotImageDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__TagGroup = {"_p_Gatan__DM__TagGroup", "Gatan::DM::TagGroup *", 0, 0, (void*)&SwigPyBuiltin__Gatan__DM__TagGroup_clientdata, 0};
static swig_type_info _swigt__p_Gatan__DM__Throwable = {"_p_Gatan__DM__Throwable", "Gatan::DM::Throwable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__DM__Window = {"_p_Gatan__DM__Window", "Gatan::DM::Window *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gatan__PlugIn__DM_Env = {"_p_Gatan__PlugIn__DM_Env", "::Gatan::PlugIn::DM_Env *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Py_ssize_t = {"_p_Py_ssize_t", "Py_ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SSIZE_T = {"_p_SSIZE_T", "SSIZE_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SystemIdleProc = {"_p_SystemIdleProc", "SystemIdleProc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagGroupIterator = {"_p_TagGroupIterator", "TagGroupIterator *", 0, 0, (void*)&SwigPyBuiltin__TagGroupIterator_clientdata, 0};
static swig_type_info _swigt__p_ULONG_PTR = {"_p_ULONG_PTR", "ULONG_PTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_range = {"_p_char_range", "char_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex128_t = {"_p_complex128_t", "complex128_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rgba_uint8_os_t = {"_p_rgba_uint8_os_t", "rgba_uint8_os_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16 = {"_p_uint16", "uint16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32 = {"_p_uint32", "uint32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ulong = {"_p_ulong", "ulong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ulong_ptr_t = {"_p_ulong_ptr_t", "ulong_ptr_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CDialog,
  &_swigt__p_DM_FileReference,
  &_swigt__p_Gatan__DM__Component,
  &_swigt__p_Gatan__DM__Function,
  &_swigt__p_Gatan__DM__Image,
  &_swigt__p_Gatan__DM__ImageDisplay,
  &_swigt__p_Gatan__DM__ImageDocument,
  &_swigt__p_Gatan__DM__LinePlotImageDisplay,
  &_swigt__p_Gatan__DM__ROI,
  &_swigt__p_Gatan__DM__RasterImageDisplay,
  &_swigt__p_Gatan__DM__ScriptObject,
  &_swigt__p_Gatan__DM__String,
  &_swigt__p_Gatan__DM__SurfacePlotImageDisplay,
  &_swigt__p_Gatan__DM__TagGroup,
  &_swigt__p_Gatan__DM__Throwable,
  &_swigt__p_Gatan__DM__Window,
  &_swigt__p_Gatan__PlugIn__DM_Env,
  &_swigt__p_Py_ssize_t,
  &_swigt__p_SSIZE_T,
  &_swigt__p_SwigPyObject,
  &_swigt__p_SystemIdleProc,
  &_swigt__p_TagGroupIterator,
  &_swigt__p_ULONG_PTR,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_range,
  &_swigt__p_complex128_t,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_long,
  &_swigt__p_rgba_uint8_os_t,
  &_swigt__p_short,
  &_swigt__p_std__string,
  &_swigt__p_uint16,
  &_swigt__p_uint32,
  &_swigt__p_ulong,
  &_swigt__p_ulong_ptr_t,
};

static swig_cast_info _swigc__p_CDialog[] = {  {&_swigt__p_CDialog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DM_FileReference[] = {  {&_swigt__p_DM_FileReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__Component[] = {  {&_swigt__p_Gatan__DM__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__Function[] = {  {&_swigt__p_Gatan__DM__Function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__Image[] = {  {&_swigt__p_Gatan__DM__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__ImageDisplay[] = {  {&_swigt__p_Gatan__DM__ImageDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__ImageDocument[] = {  {&_swigt__p_Gatan__DM__ImageDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__LinePlotImageDisplay[] = {  {&_swigt__p_Gatan__DM__LinePlotImageDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__ROI[] = {  {&_swigt__p_Gatan__DM__ROI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__RasterImageDisplay[] = {  {&_swigt__p_Gatan__DM__RasterImageDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__ScriptObject[] = {  {&_swigt__p_Gatan__DM__ScriptObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__String[] = {  {&_swigt__p_Gatan__DM__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__SurfacePlotImageDisplay[] = {  {&_swigt__p_Gatan__DM__SurfacePlotImageDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__TagGroup[] = {  {&_swigt__p_Gatan__DM__TagGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__Throwable[] = {  {&_swigt__p_Gatan__DM__Throwable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__DM__Window[] = {  {&_swigt__p_Gatan__DM__Window, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gatan__PlugIn__DM_Env[] = {  {&_swigt__p_Gatan__PlugIn__DM_Env, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Py_ssize_t[] = {  {&_swigt__p_Py_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SSIZE_T[] = {  {&_swigt__p_SSIZE_T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SystemIdleProc[] = {  {&_swigt__p_SystemIdleProc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagGroupIterator[] = {  {&_swigt__p_TagGroupIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ULONG_PTR[] = {  {&_swigt__p_ULONG_PTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_range[] = {  {&_swigt__p_char_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex128_t[] = {  {&_swigt__p_complex128_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rgba_uint8_os_t[] = {  {&_swigt__p_rgba_uint8_os_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16[] = {  {&_swigt__p_uint16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32[] = {  {&_swigt__p_uint32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ulong[] = {  {&_swigt__p_ulong, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ulong_ptr_t[] = {  {&_swigt__p_ulong_ptr_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CDialog,
  _swigc__p_DM_FileReference,
  _swigc__p_Gatan__DM__Component,
  _swigc__p_Gatan__DM__Function,
  _swigc__p_Gatan__DM__Image,
  _swigc__p_Gatan__DM__ImageDisplay,
  _swigc__p_Gatan__DM__ImageDocument,
  _swigc__p_Gatan__DM__LinePlotImageDisplay,
  _swigc__p_Gatan__DM__ROI,
  _swigc__p_Gatan__DM__RasterImageDisplay,
  _swigc__p_Gatan__DM__ScriptObject,
  _swigc__p_Gatan__DM__String,
  _swigc__p_Gatan__DM__SurfacePlotImageDisplay,
  _swigc__p_Gatan__DM__TagGroup,
  _swigc__p_Gatan__DM__Throwable,
  _swigc__p_Gatan__DM__Window,
  _swigc__p_Gatan__PlugIn__DM_Env,
  _swigc__p_Py_ssize_t,
  _swigc__p_SSIZE_T,
  _swigc__p_SwigPyObject,
  _swigc__p_SystemIdleProc,
  _swigc__p_TagGroupIterator,
  _swigc__p_ULONG_PTR,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_range,
  _swigc__p_complex128_t,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_long,
  _swigc__p_rgba_uint8_os_t,
  _swigc__p_short,
  _swigc__p_std__string,
  _swigc__p_uint16,
  _swigc__p_uint32,
  _swigc__p_ulong,
  _swigc__p_ulong_ptr_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[2];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  /* type '::TagGroupIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__TagGroupIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'TagGroupIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "TagGroupIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "TagGroupIterator");
  d = md;
  
  /* type 'Gatan::DM::Image' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Gatan__DM__Image_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Image'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Image", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Image");
  d = md;
  
  /* type 'Gatan::DM::TagGroup' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Gatan__DM__TagGroup_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'TagGroup'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "TagGroup", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "TagGroup");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_NONE",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_NONE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_INSIDE_APPLICATION",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_INSIDE_APPLICATION)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_FRAME",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_FRAME)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_LEFT",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_LEFT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_RIGHT",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_RIGHT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_TOP",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_TOP)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_BOTTOM",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS_BOTTOM)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS",SWIG_From_int(static_cast< int >(Gatan::DM::max_win_rect_EXCLUDE_DOCKED_FLOATING_WINDOWS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeNone",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeNone)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeULL",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeULL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeLL",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeLL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeUL",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeUL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeL",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeF",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeF)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeD",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeD)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TypeChar",SWIG_From_int(static_cast< int >(Gatan::DM::DatabarElementType::TypeChar)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

