
#ifndef __DMPLUGINMAIN__
#define __DMPLUGINMAIN__

#include "GatanDefines.h"


void PlugIn_Start();
void PlugIn_End();
void PlugIn_Run();
void PlugIn_Cleanup();
void PlugIn_AboutDialog();


#ifdef _GATAN_OS_MACOS
#ifdef _GATAN_ARCHITECTURE_POWERPC // defined for powerPC plug-in

	// powerPC specific

	#include <Resources.h>
	#include <CodeFragments.h>
	
	#ifdef _GATAN_LANGUAGE_CPP
		#ifdef _GATAN_COMPILER_METROWERKS
			#if ( _GATAN_COMPILER_VERSION >= 0x1000 )
				extern "C" {
					void __sinit(void);	/*	(generated by linker)	*/
					pascal OSErr __initialize(const CFragInitBlock *theInitBlock);
					pascal void __terminate(void);
				}
			#else
				extern "C" void __sinit( void );
				extern "C" void __destroy_global_chain( void );
			#endif
		#else // _GATAN_COMPILER_?
			extern "C" void __init_lib( void );
			extern "C" void __term_lib( void );
		#endif	// _GATAN_COMPILER_*
	#endif  // _GATAN_LANGUAGE_CPP
	
	short gResRefNum = -1;
	
	#ifdef _GATAN_COMPILER_METROWERKS
		#pragma export on
	#endif // _GATAN_COMPILER_METROWERKS
	
	// when DigitalMicrograph starts PlugInInit will be called.  
	#ifdef _GATAN_LANGUAGE_CPP
		extern "C" OSErr PlugInInit( CFragInitBlockPtr initBlock )
	#else // _GATAN_LANGUAGE_C
		OSErr PlugInInit( CFragInitBlockPtr initBlock )
	#endif // _GATAN_LANGUAGE_*
		{
			OSErr err = noErr;
	
	#ifdef _GATAN_LANGUAGE_CPP
		#ifdef _GATAN_COMPILER_METROWERKS
			#if ( _GATAN_COMPILER_VERSION >= 0x1000 )
				err = __initialize( initBlock );
			#else
				__sinit();
			#endif // ( _GATAN_COMPILER_VERSION >= 0x1000 )
		#else // _GATAN_COMPILER_?
				__init_lib();
		#endif	// _GATAN_COMPILER_METROWERKS
	#endif // _GATAN_LANGUAGE_CPP

			if ( err == noErr )
			{
				gResRefNum = FSpOpenResFile( initBlock->fragLocator.u.onDisk.fileSpec, fsCurPerm );
				err = ResError();
			}
			
			if ( err == noErr )
			{
				// startup routines common to the powerPC and 68k should be in StartupPlugIn()
				PlugIn_Start();
			}
			
			return err;
		}
		
	// when DigitalMicrograph quits PlugInTerminate will be called.  
	#ifdef _GATAN_LANGUAGE_CPP
		extern "C" void PlugInTerminate( void )
	#else // _GATAN_LANGUAGE_C
		void PlugInTerminate( void )
	#endif // _GATAN_LANGUAGE_*
		{
			// shutdown routines common to the powerPC and 68k should be in ShutdownPlugIn()
			PlugIn_End();

			if ( gResRefNum != -1 )
			{
				CloseResFile( gResRefNum );
			}

	#ifdef _GATAN_LANGUAGE_CPP
	#ifdef _GATAN_COMPILER_METROWERKS
		#if ( _GATAN_COMPILER_VERSION >= 0x1000 )
			__terminate();
		#else
			__destroy_global_chain();
		#endif // ( _GATAN_COMPILER_VERSION >= 0x1000 )
	#else
			__term_lib();
	#endif // _GATAN_COMPILER_METROWERKS
	#endif // _GATAN_LANGUAGE_CPP
		}

	#ifdef _GATAN_COMPILER_METROWERKS
	#pragma export off
	#endif // _GATAN_COMPILER_METROWERKS
#else // _GATAN_ARCHITECTURE_68K
	
#endif // _GATAN_ARCHITECTURE_*

#pragma export on

extern "C"
{
	pascal void PlugInRun( void )
	{
		PlugIn_Run();
	}
	pascal void PlugInCleanup( void )
	{
		PlugIn_Cleanup();
	}
	pascal void AboutFunction(void)
	{
		PlugIn_AboutDialog();
	}
}
#pragma export off

#endif // _GATAN_OS_MACOS




#ifdef _GATAN_OS_WIN32

extern "C" __declspec( dllexport )
void PlugInStartup()
{
	PlugIn_Start();
}

extern "C" __declspec( dllexport )
void PlugInShutdown()
{
	PlugIn_End();
}

extern "C" __declspec( dllexport )
void PlugInRun()
{
	PlugIn_Run();
}

extern "C" __declspec( dllexport )
void PlugInCleanup()
{
	PlugIn_Cleanup();
}

#ifdef _GATAN_USE_MFC

	#define _GATANPLUGIN_WIN32_DONT_DEFINE_DLLMAIN

#endif // _GATAN_USE_MFC

#ifdef _AFXDLL
	Gatan::OS::PlugInEntry::PlugInEntry( ::Gatan::PlugIn::DM_Env *dm_env )
	{
		new (&state_buff[0]) AFX_MAINTAIN_STATE2( AfxGetStaticModuleState() );
	}
	Gatan::OS::PlugInEntry::~PlugInEntry()
	{
		reinterpret_cast<AFX_MAINTAIN_STATE2 *>( &state_buff[0] )->AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2();
	}

#else

	Gatan::OS::PlugInEntry::PlugInEntry( ::Gatan::PlugIn::DM_Env *dm_env )
	{
	}
	Gatan::OS::PlugInEntry::~PlugInEntry()
	{
	}

#endif // _GATAN_USE_MFC

#ifndef _GATANPLUGIN_WIN32_DONT_DEFINE_DLLMAIN

BOOL WINAPI DllMain( HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved )
{
	switch( dwReason )
	{
		case DLL_PROCESS_ATTACH:
		{
			GatanPlugIn::PlugInMain::GetPlugIn()->Init( (void *) hDllHandle );
		} break;
		
		case DLL_PROCESS_DETACH:
		{
			GatanPlugIn::PlugInMain::GetPlugIn()->Exit();
		} break;
	}
	
	return TRUE;
}

#endif // _GATANPLUGIN_WIN32_DONT_DEFINE_DLLMAIN

#endif // _GATAN_OS_WIN32

#if defined( _GATAN_LANGUAGE_CPP )

#include "DMPlugInBasic.h"

void PlugIn_Start()
{
	GatanPlugIn::PlugInMain *plugin = GatanPlugIn::PlugInMain::GetPlugIn();
	plugin->Initialize();
	PLUG_IN_ENTRY
	if ( plugin != NULL ) { plugin->DoStart(); }
	PLUG_IN_EXIT
}
void PlugIn_End()
{
	GatanPlugIn::PlugInMain *plugin = GatanPlugIn::PlugInMain::GetPlugIn();
	PLUG_IN_ENTRY
	if ( plugin != NULL ) { plugin->DoEnd(); }
	PLUG_IN_EXIT
	plugin->Uninitialize();
}
void PlugIn_Run()
{
	GatanPlugIn::PlugInMain *plugin = GatanPlugIn::PlugInMain::GetPlugIn();
	PLUG_IN_ENTRY
	if ( plugin != NULL ) { plugin->DoRun(); }
	PLUG_IN_EXIT
}
void PlugIn_Cleanup()
{
	GatanPlugIn::PlugInMain *plugin = GatanPlugIn::PlugInMain::GetPlugIn();
	PLUG_IN_ENTRY
	if ( plugin != NULL ) { plugin->DoCleanup(); }
	PLUG_IN_EXIT
}
void PlugIn_AboutDialog()
{
	GatanPlugIn::PlugInMain *plugin = GatanPlugIn::PlugInMain::GetPlugIn();
	PLUG_IN_ENTRY
	if ( plugin != NULL ) { plugin->AboutDialog(); }
	PLUG_IN_EXIT
}

#endif // defined( _GATAN_LANGUAGE_CPP )

#endif // __DMPLUGINMAIN__
