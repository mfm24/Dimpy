# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DigitalMicrograph', [dirname(__file__)])
        except ImportError:
            import _DigitalMicrograph
            return _DigitalMicrograph
        if fp is not None:
            try:
                _mod = imp.load_module('_DigitalMicrograph', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DigitalMicrograph = swig_import_helper()
    del swig_import_helper
else:
    import _DigitalMicrograph
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def StartPlugin():
  """StartPlugin()"""
  return _DigitalMicrograph.StartPlugin()
_GATANPLUGIN_USES_LIBRARY_VERSION = _DigitalMicrograph._GATANPLUGIN_USES_LIBRARY_VERSION

def AbortAcquisitionDaemon(*args):
  """AbortAcquisitionDaemon(Image argument_1)"""
  return _DigitalMicrograph.AbortAcquisitionDaemon(*args)

def AbortAllAcquisitionDaemons():
  """AbortAllAcquisitionDaemons()"""
  return _DigitalMicrograph.AbortAllAcquisitionDaemons()

def AddCustomTool(*args):
  """AddCustomTool(char icon, long toolInstance)"""
  return _DigitalMicrograph.AddCustomTool(*args)

def AddFunction(*args):
  """AddFunction(char prototype, void function)"""
  return _DigitalMicrograph.AddFunction(*args)

def AddPathToCopyToImageList(*args):
  """AddPathToCopyToImageList(char path)"""
  return _DigitalMicrograph.AddPathToCopyToImageList(*args)

def AddScriptFileToMenu(*args):
  """
    AddScriptFileToMenu(char fileName, char commandName, char menuName, char optionalSubMenuName, 
        bool isLibrary)
    """
  return _DigitalMicrograph.AddScriptFileToMenu(*args)

def AddScriptFileToPackage(*args):
  """
    AddScriptFileToPackage(char fileName, char packageName, long packageLevel, 
        char commandName, char menuName, char optionalSubMenuName, 
        bool isLibrary)
    """
  return _DigitalMicrograph.AddScriptFileToPackage(*args)

def AddScriptToMenu(*args):
  """
    AddScriptToMenu(char script, char commandName, char menuName, char optionalSubMenuName, 
        bool isLibrary)
    """
  return _DigitalMicrograph.AddScriptToMenu(*args)

def AddScriptToPackage(*args):
  """
    AddScriptToPackage(char script, char packageName, long packageLevel, char commandName, 
        char menuName, char optionalSubMenuName, 
        bool isLibrary)
    """
  return _DigitalMicrograph.AddScriptToPackage(*args)

def AddTagsToPackage(*args):
  """
    AddTagsToPackage(TagGroup tags, char packageName, long packageLevel, 
        char identifier)
    """
  return _DigitalMicrograph.AddTagsToPackage(*args)

def AdjustScriptMenuItem(*args):
  """
    AdjustScriptMenuItem(char commandName, char menuName, char optionalSubMenuName, 
        char newCommandName, bool enabled, bool checked, 
        char key, long acceleratorPos)
    """
  return _DigitalMicrograph.AdjustScriptMenuItem(*args)

def AllocString(*args):
  """AllocString(long length) -> long"""
  return _DigitalMicrograph.AllocString(*args)

def ApplicationGetBounds():
  """ApplicationGetBounds()"""
  return _DigitalMicrograph.ApplicationGetBounds()

def ApplicationGetOrigin():
  """ApplicationGetOrigin()"""
  return _DigitalMicrograph.ApplicationGetOrigin()

def ApplyDataBar(*args):
  """ApplyDataBar(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ApplyDataBar(*args)

def ApproveDisplayBuffer(*args):
  """ApproveDisplayBuffer(Image argument_1)"""
  return _DigitalMicrograph.ApproveDisplayBuffer(*args)

def ApproveSurvey(*args):
  """ApproveSurvey(Image argument_1)"""
  return _DigitalMicrograph.ApproveSurvey(*args)

def AutoCorrelate(*args):
  """AutoCorrelate(Image source) -> Image"""
  return _DigitalMicrograph.AutoCorrelate(*args)

def AutoCorrelation(*args):
  """AutoCorrelation(Image source) -> Image"""
  return _DigitalMicrograph.AutoCorrelation(*args)

def Beep():
  """Beep()"""
  return _DigitalMicrograph.Beep()

def BrowseTagFile():
  """BrowseTagFile()"""
  return _DigitalMicrograph.BrowseTagFile()

def ChooseMenuItem(*args):
  """ChooseMenuItem(char menu, char subMenu, char item) -> bool"""
  return _DigitalMicrograph.ChooseMenuItem(*args)

def ClassAddMethod(*args):
  """ClassAddMethod(String class_name, Function method) -> Function"""
  return _DigitalMicrograph.ClassAddMethod(*args)

def ClassNewObject(*args):
  """ClassNewObject(String class_name) -> ScriptObject"""
  return _DigitalMicrograph.ClassNewObject(*args)

def ClassRemoveMethod(*args):
  """ClassRemoveMethod(String class_name, Function method)"""
  return _DigitalMicrograph.ClassRemoveMethod(*args)

def CleanImage(*args):
  """CleanImage(Image argument_1)"""
  return _DigitalMicrograph.CleanImage(*args)

def ClearDisplayBuffer(*args):
  """ClearDisplayBuffer(Image argument_1)"""
  return _DigitalMicrograph.ClearDisplayBuffer(*args)

def ClearSelection(*args):
  """ClearSelection(Image argument_1)"""
  return _DigitalMicrograph.ClearSelection(*args)

def ClipboardGetAsString(*args):
  """ClipboardGetAsString(String str) -> bool"""
  return _DigitalMicrograph.ClipboardGetAsString(*args)

def ClipboardGetAsTagGroup(*args):
  """ClipboardGetAsTagGroup(TagGroup tagGroup) -> bool"""
  return _DigitalMicrograph.ClipboardGetAsTagGroup(*args)

def ClipboardSetAsString(*args):
  """ClipboardSetAsString(String argument_1)"""
  return _DigitalMicrograph.ClipboardSetAsString(*args)

def ClipboardSetAsTagGroup(*args):
  """ClipboardSetAsTagGroup(TagGroup tagGroup)"""
  return _DigitalMicrograph.ClipboardSetAsTagGroup(*args)

def CloseFile(*args):
  """CloseFile(DM_FileReference file)"""
  return _DigitalMicrograph.CloseFile(*args)

def CloseImage(*args):
  """CloseImage(Image argument_1)"""
  return _DigitalMicrograph.CloseImage(*args)

def CloseProgressWindow():
  """CloseProgressWindow()"""
  return _DigitalMicrograph.CloseProgressWindow()

def CloseTimeBar():
  """CloseTimeBar()"""
  return _DigitalMicrograph.CloseTimeBar()

def CommandDown():
  """CommandDown() -> bool"""
  return _DigitalMicrograph.CommandDown()

def ComplexToPacked(*args):
  """ComplexToPacked(Image source) -> Image"""
  return _DigitalMicrograph.ComplexToPacked(*args)

def ComplexToPacked2(*args):
  """ComplexToPacked2(Image source, long style) -> Image"""
  return _DigitalMicrograph.ComplexToPacked2(*args)

def ComponentAddChildAfter(*args):
  """ComponentAddChildAfter(Component parent, Component child, Component annot_pos)"""
  return _DigitalMicrograph.ComponentAddChildAfter(*args)

def ComponentAddChildAtBeginning(*args):
  """ComponentAddChildAtBeginning(Component parent, Component child)"""
  return _DigitalMicrograph.ComponentAddChildAtBeginning(*args)

def ComponentAddChildAtEnd(*args):
  """ComponentAddChildAtEnd(Component parent, Component child)"""
  return _DigitalMicrograph.ComponentAddChildAtEnd(*args)

def ComponentAddChildBefore(*args):
  """ComponentAddChildBefore(Component parent, Component child, Component annot_pos)"""
  return _DigitalMicrograph.ComponentAddChildBefore(*args)

def ComponentAddNewComponent(*args):
  """
    ComponentAddNewComponent(Component parent, long type, float f1, float f2, float f3, 
        float f4) -> Component
    """
  return _DigitalMicrograph.ComponentAddNewComponent(*args)

def ComponentClone(*args):
  """ComponentClone(Component comp, bool doDeepCopy) -> Component"""
  return _DigitalMicrograph.ComponentClone(*args)

def ComponentCountChildren(*args):
  """ComponentCountChildren(Component comp) -> long"""
  return _DigitalMicrograph.ComponentCountChildren(*args)

def ComponentCountChildrenOfType(*args):
  """ComponentCountChildrenOfType(Component comp, long type) -> long"""
  return _DigitalMicrograph.ComponentCountChildrenOfType(*args)

def ComponentGetBoundingRect(*args):
  """ComponentGetBoundingRect(Component comp)"""
  return _DigitalMicrograph.ComponentGetBoundingRect(*args)

def ComponentGetBoundingRectInView(*args):
  """ComponentGetBoundingRectInView(Component comp)"""
  return _DigitalMicrograph.ComponentGetBoundingRectInView(*args)

def ComponentGetChild(*args):
  """ComponentGetChild(Component comp, long index) -> Component"""
  return _DigitalMicrograph.ComponentGetChild(*args)

def ComponentGetChildByID(*args):
  """ComponentGetChildByID(Component comp, long ID) -> Component"""
  return _DigitalMicrograph.ComponentGetChildByID(*args)

def ComponentGetChildToLocalTransform(*args):
  """ComponentGetChildToLocalTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetChildToLocalTransform(*args)

def ComponentGetChildToPageTransform(*args):
  """ComponentGetChildToPageTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetChildToPageTransform(*args)

def ComponentGetChildToViewTransform(*args):
  """ComponentGetChildToViewTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetChildToViewTransform(*args)

def ComponentGetChildToWindowTransform(*args):
  """ComponentGetChildToWindowTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetChildToWindowTransform(*args)

def ComponentGetControlPoint(*args):
  """ComponentGetControlPoint(Component comp, long loc) -> bool"""
  return _DigitalMicrograph.ComponentGetControlPoint(*args)

def ComponentGetDescendentByID(*args):
  """ComponentGetDescendentByID(Component comp, long ID) -> Component"""
  return _DigitalMicrograph.ComponentGetDescendentByID(*args)

def ComponentGetDrawingMode(*args):
  """ComponentGetDrawingMode(Component comp) -> long"""
  return _DigitalMicrograph.ComponentGetDrawingMode(*args)

def ComponentGetFillMode(*args):
  """ComponentGetFillMode(Component comp) -> long"""
  return _DigitalMicrograph.ComponentGetFillMode(*args)

def ComponentGetFontAttributes(*args):
  """ComponentGetFontAttributes(Component comp) -> long"""
  return _DigitalMicrograph.ComponentGetFontAttributes(*args)

def ComponentGetFontFaceName(*args):
  """ComponentGetFontFaceName(Component comp) -> String"""
  return _DigitalMicrograph.ComponentGetFontFaceName(*args)

def ComponentGetFontInfo(*args):
  """ComponentGetFontInfo(Component comp, String faceName)"""
  return _DigitalMicrograph.ComponentGetFontInfo(*args)

def ComponentGetFontSize(*args):
  """ComponentGetFontSize(Component comp) -> long"""
  return _DigitalMicrograph.ComponentGetFontSize(*args)

def ComponentGetID(*args):
  """ComponentGetID(Component annot) -> long"""
  return _DigitalMicrograph.ComponentGetID(*args)

def ComponentGetImageDocument(*args):
  """ComponentGetImageDocument(Component annot) -> ImageDocument"""
  return _DigitalMicrograph.ComponentGetImageDocument(*args)

def ComponentGetLocalToPageTransform(*args):
  """ComponentGetLocalToPageTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetLocalToPageTransform(*args)

def ComponentGetLocalToViewTransform(*args):
  """ComponentGetLocalToViewTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetLocalToViewTransform(*args)

def ComponentGetLocalToWindowTransform(*args):
  """ComponentGetLocalToWindowTransform(Component comp)"""
  return _DigitalMicrograph.ComponentGetLocalToWindowTransform(*args)

def ComponentGetNthChildOfType(*args):
  """ComponentGetNthChildOfType(Component comp, long type, long index) -> Component"""
  return _DigitalMicrograph.ComponentGetNthChildOfType(*args)

def ComponentGetParentComponent(*args):
  """ComponentGetParentComponent(Component comp) -> Component"""
  return _DigitalMicrograph.ComponentGetParentComponent(*args)

def ComponentGetParentImageDisplay(*args):
  """ComponentGetParentImageDisplay(Component comp) -> ImageDisplay"""
  return _DigitalMicrograph.ComponentGetParentImageDisplay(*args)

def ComponentGetRect(*args):
  """ComponentGetRect(Component comp)"""
  return _DigitalMicrograph.ComponentGetRect(*args)

def ComponentGetRectInView(*args):
  """ComponentGetRectInView(Component comp)"""
  return _DigitalMicrograph.ComponentGetRectInView(*args)

def ComponentGetTagGroup(*args):
  """ComponentGetTagGroup(Component annot) -> TagGroup"""
  return _DigitalMicrograph.ComponentGetTagGroup(*args)

def ComponentGetType(*args):
  """ComponentGetType(Component annot) -> long"""
  return _DigitalMicrograph.ComponentGetType(*args)

def ComponentIsOfType(*args):
  """ComponentIsOfType(Component annot, long type) -> bool"""
  return _DigitalMicrograph.ComponentIsOfType(*args)

def ComponentIsSelected(*args):
  """ComponentIsSelected(Component comp) -> bool"""
  return _DigitalMicrograph.ComponentIsSelected(*args)

def ComponentIsValid(*args):
  """ComponentIsValid(Component annot) -> bool"""
  return _DigitalMicrograph.ComponentIsValid(*args)

def ComponentOffsetControlPoint(*args):
  """ComponentOffsetControlPoint(Component comp, long loc, float x, float y, long restrict_style)"""
  return _DigitalMicrograph.ComponentOffsetControlPoint(*args)

def ComponentPositionAroundPoint(*args):
  """
    ComponentPositionAroundPoint(Component comp, float new_x, float new_y, float rel_x, 
        float rel_y, bool horz, bool vert)
    """
  return _DigitalMicrograph.ComponentPositionAroundPoint(*args)

def ComponentRemoveFromParent(*args):
  """ComponentRemoveFromParent(Component comp)"""
  return _DigitalMicrograph.ComponentRemoveFromParent(*args)

def ComponentSetControlPoint(*args):
  """ComponentSetControlPoint(Component comp, long loc, float x, float y, long restrict_style)"""
  return _DigitalMicrograph.ComponentSetControlPoint(*args)

def ComponentSetDrawingMode(*args):
  """ComponentSetDrawingMode(Component comp, long mode)"""
  return _DigitalMicrograph.ComponentSetDrawingMode(*args)

def ComponentSetFillMode(*args):
  """ComponentSetFillMode(Component comp, long mode)"""
  return _DigitalMicrograph.ComponentSetFillMode(*args)

def ComponentSetFontAttributes(*args):
  """ComponentSetFontAttributes(Component comp, long attributes)"""
  return _DigitalMicrograph.ComponentSetFontAttributes(*args)

def ComponentSetFontFaceName(*args):
  """ComponentSetFontFaceName(Component comp, String face_name)"""
  return _DigitalMicrograph.ComponentSetFontFaceName(*args)

def ComponentSetFontInfo(*args):
  """
    ComponentSetFontInfo(Component comp, String face_name, long attributes, 
        long size)
    """
  return _DigitalMicrograph.ComponentSetFontInfo(*args)

def ComponentSetFontSize(*args):
  """ComponentSetFontSize(Component comp, long size)"""
  return _DigitalMicrograph.ComponentSetFontSize(*args)

def ComponentSetRect(*args):
  """
    ComponentSetRect(Component comp, float top, float left, float bottom, 
        float right)
    """
  return _DigitalMicrograph.ComponentSetRect(*args)

def ComponentSetSelected(*args):
  """ComponentSetSelected(Component comp, bool select)"""
  return _DigitalMicrograph.ComponentSetSelected(*args)

def ComponentTransformCoordinates(*args):
  """
    ComponentTransformCoordinates(Component comp, float off_x, float off_y, float scale_x, 
        float scale_y)
    """
  return _DigitalMicrograph.ComponentTransformCoordinates(*args)

def ConnectObject(*args):
  """
    ConnectObject(long object, char message, char ident, ScriptObject scriptObject, 
        char method)
    """
  return _DigitalMicrograph.ConnectObject(*args)

def ContinueCancelDialog(*args):
  """ContinueCancelDialog(char prompt) -> bool"""
  return _DigitalMicrograph.ContinueCancelDialog(*args)

def ControlDown():
  """ControlDown() -> bool"""
  return _DigitalMicrograph.ControlDown()

def ConvertImageData(*args):
  """ConvertImageData(Image _from, Image to)"""
  return _DigitalMicrograph.ConvertImageData(*args)

def ConvertImageDataSlice_2D(*args):
  """
    ConvertImageDataSlice_2D(Image _from, Image to, long x_l, long y_l, long f_x_0, 
        long f_y_0, long f_x_d, long f_x_s, long f_y_d, 
        long f_y_s, long t_x_0, long t_y_0, long t_x_d, 
        long t_x_s, long t_y_d, long t_y_s)
    """
  return _DigitalMicrograph.ConvertImageDataSlice_2D(*args)

def ConvertPICTToRGBImage(*args):
  """ConvertPICTToRGBImage(long picture) -> Image"""
  return _DigitalMicrograph.ConvertPICTToRGBImage(*args)

def ConvertToByte(*args):
  """ConvertToByte(Image argument_1)"""
  return _DigitalMicrograph.ConvertToByte(*args)

def ConvertToComplex(*args):
  """ConvertToComplex(Image argument_1)"""
  return _DigitalMicrograph.ConvertToComplex(*args)

def ConvertToFloat(*args):
  """ConvertToFloat(Image argument_1)"""
  return _DigitalMicrograph.ConvertToFloat(*args)

def ConvertToLong(*args):
  """ConvertToLong(Image argument_1)"""
  return _DigitalMicrograph.ConvertToLong(*args)

def ConvertToPackedComplex(*args):
  """ConvertToPackedComplex(Image argument_1)"""
  return _DigitalMicrograph.ConvertToPackedComplex(*args)

def ConvertToShort(*args):
  """ConvertToShort(Image argument_1)"""
  return _DigitalMicrograph.ConvertToShort(*args)

def Convolution(*args):
  """Convolution(Image source, Image kernel) -> Image"""
  return _DigitalMicrograph.Convolution(*args)

def CopyGWorldCTable(*args):
  """CopyGWorldCTable(Image argument_1) -> long"""
  return _DigitalMicrograph.CopyGWorldCTable(*args)

def CountAllImages():
  """CountAllImages() -> long"""
  return _DigitalMicrograph.CountAllImages()

def CountDocumentWindows():
  """CountDocumentWindows() -> long"""
  return _DigitalMicrograph.CountDocumentWindows()

def CountDocumentWindowsOfType(*args):
  """CountDocumentWindowsOfType(long type) -> long"""
  return _DigitalMicrograph.CountDocumentWindowsOfType(*args)

def CountFloatingWindows():
  """CountFloatingWindows() -> long"""
  return _DigitalMicrograph.CountFloatingWindows()

def CountImageDocuments():
  """CountImageDocuments() -> long"""
  return _DigitalMicrograph.CountImageDocuments()

def CountImages():
  """CountImages() -> long"""
  return _DigitalMicrograph.CountImages()

def CountScreens():
  """CountScreens() -> long"""
  return _DigitalMicrograph.CountScreens()

def CountScriptFunctions(*args):
  """CountScriptFunctions(char fnName) -> long"""
  return _DigitalMicrograph.CountScriptFunctions(*args)

def CreateBinary1DImage(*args):
  """CreateBinary1DImage(char title, long d0) -> Image"""
  return _DigitalMicrograph.CreateBinary1DImage(*args)

def CreateBinary2DImage(*args):
  """CreateBinary2DImage(char title, long d0, long d1) -> Image"""
  return _DigitalMicrograph.CreateBinary2DImage(*args)

def CreateBinary3DImage(*args):
  """CreateBinary3DImage(char title, long d0, long d1, long d2) -> Image"""
  return _DigitalMicrograph.CreateBinary3DImage(*args)

def CreateByteImage(*args):
  """CreateByteImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateByteImage(*args)

def CreateComplex1DImage(*args):
  """CreateComplex1DImage(char title, long bytes, long d0) -> Image"""
  return _DigitalMicrograph.CreateComplex1DImage(*args)

def CreateComplex2DImage(*args):
  """CreateComplex2DImage(char title, long bytes, long d0, long d1) -> Image"""
  return _DigitalMicrograph.CreateComplex2DImage(*args)

def CreateComplex3DImage(*args):
  """CreateComplex3DImage(char title, long bytes, long d0, long d1, long d2) -> Image"""
  return _DigitalMicrograph.CreateComplex3DImage(*args)

def CreateComplexImage(*args):
  """CreateComplexImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateComplexImage(*args)

def CreateDirectory(*args):
  """CreateDirectory(char fileName)"""
  return _DigitalMicrograph.CreateDirectory(*args)

def CreateFile(*args):
  """CreateFile(char fileName)"""
  return _DigitalMicrograph.CreateFile(*args)

def CreateFileForWriting(*args):
  """CreateFileForWriting(char fileName) -> DM_FileReference"""
  return _DigitalMicrograph.CreateFileForWriting(*args)

def CreateFloatImage(*args):
  """CreateFloatImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateFloatImage(*args)

def CreateImageFromDisplay(*args):
  """CreateImageFromDisplay(Image argument_1) -> Image"""
  return _DigitalMicrograph.CreateImageFromDisplay(*args)

def CreateInteger1DImage(*args):
  """CreateInteger1DImage(char title, long bytes, bool isSigned, long d0) -> Image"""
  return _DigitalMicrograph.CreateInteger1DImage(*args)

def CreateInteger2DImage(*args):
  """CreateInteger2DImage(char title, long bytes, bool isSigned, long d0, long d1) -> Image"""
  return _DigitalMicrograph.CreateInteger2DImage(*args)

def CreateInteger3DImage(*args):
  """
    CreateInteger3DImage(char title, long bytes, bool isSigned, long d0, long d1, 
        long d2) -> Image
    """
  return _DigitalMicrograph.CreateInteger3DImage(*args)

def CreateLongImage(*args):
  """CreateLongImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateLongImage(*args)

def CreatePackedComplexImage(*args):
  """CreatePackedComplexImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreatePackedComplexImage(*args)

def CreateReal1DImage(*args):
  """CreateReal1DImage(char title, long bytes, long d0) -> Image"""
  return _DigitalMicrograph.CreateReal1DImage(*args)

def CreateReal2DImage(*args):
  """CreateReal2DImage(char title, long bytes, long d0, long d1) -> Image"""
  return _DigitalMicrograph.CreateReal2DImage(*args)

def CreateReal3DImage(*args):
  """CreateReal3DImage(char title, long bytes, long d0, long d1, long d2) -> Image"""
  return _DigitalMicrograph.CreateReal3DImage(*args)

def CreateRGB1DImage(*args):
  """CreateRGB1DImage(char title, long bytes, long d0) -> Image"""
  return _DigitalMicrograph.CreateRGB1DImage(*args)

def CreateRGB2DImage(*args):
  """CreateRGB2DImage(char title, long bytes, long d0, long d1) -> Image"""
  return _DigitalMicrograph.CreateRGB2DImage(*args)

def CreateRGB3DImage(*args):
  """CreateRGB3DImage(char title, long bytes, long d0, long d1, long d2) -> Image"""
  return _DigitalMicrograph.CreateRGB3DImage(*args)

def CreateRGBImage(*args):
  """CreateRGBImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateRGBImage(*args)

def CreateRGBImageFromPicture(*args):
  """CreateRGBImageFromPicture(long picture) -> Image"""
  return _DigitalMicrograph.CreateRGBImageFromPicture(*args)

def CreateShortImage(*args):
  """CreateShortImage(char title, long width, long height) -> Image"""
  return _DigitalMicrograph.CreateShortImage(*args)

def CrossCorrelate(*args):
  """CrossCorrelate(Image source1, Image source2) -> Image"""
  return _DigitalMicrograph.CrossCorrelate(*args)

def CrossCorrelation(*args):
  """CrossCorrelation(Image source1, Image source2) -> Image"""
  return _DigitalMicrograph.CrossCorrelation(*args)

def CrossProduct(*args):
  """CrossProduct(Image a, Image b) -> Image"""
  return _DigitalMicrograph.CrossProduct(*args)

def CWCloseWindow(*args):
  """CWCloseWindow(long windowObject)"""
  return _DigitalMicrograph.CWCloseWindow(*args)

def CWCreateWindow(*args):
  """
    CWCreateWindow(long windowInstance, short top, short left, short bottom, 
        short right) -> long
    """
  return _DigitalMicrograph.CWCreateWindow(*args)

def CWDeleteWindow(*args):
  """CWDeleteWindow(long windowObject)"""
  return _DigitalMicrograph.CWDeleteWindow(*args)

def CWGetWindowPtr(*args):
  """CWGetWindowPtr(long windowObject) -> long"""
  return _DigitalMicrograph.CWGetWindowPtr(*args)

def CWInvalidateWindow(*args):
  """CWInvalidateWindow(long windowObject)"""
  return _DigitalMicrograph.CWInvalidateWindow(*args)

def DeallocString(*args):
  """DeallocString(long string)"""
  return _DigitalMicrograph.DeallocString(*args)

def Delay(*args):
  """Delay(long argument_1)"""
  return _DigitalMicrograph.Delay(*args)

def DeleteDirectory(*args):
  """DeleteDirectory(char dirName)"""
  return _DigitalMicrograph.DeleteDirectory(*args)

def DeleteFile(*args):
  """DeleteFile(char fileName)"""
  return _DigitalMicrograph.DeleteFile(*args)

def DeleteImage(*args):
  """DeleteImage(Image argument_1)"""
  return _DigitalMicrograph.DeleteImage(*args)

def DeleteImageFile(*args):
  """DeleteImageFile(char fileName)"""
  return _DigitalMicrograph.DeleteImageFile(*args)

def DestroyPicture(*args):
  """DestroyPicture(long picture)"""
  return _DigitalMicrograph.DestroyPicture(*args)

def DisconnectObject(*args):
  """DisconnectObject(long object, char message, char ident)"""
  return _DigitalMicrograph.DisconnectObject(*args)

def DisplayAt(*args):
  """DisplayAt(Image argument_1, long x, long y)"""
  return _DigitalMicrograph.DisplayAt(*args)

def DoesClassExist(*args):
  """DoesClassExist(char class_name) -> bool"""
  return _DigitalMicrograph.DoesClassExist(*args)

def DoesDirectoryExist(*args):
  """DoesDirectoryExist(char dirName) -> bool"""
  return _DigitalMicrograph.DoesDirectoryExist(*args)

def DoesFileExist(*args):
  """DoesFileExist(char dirName) -> bool"""
  return _DigitalMicrograph.DoesFileExist(*args)

def DoesFunctionExist(*args):
  """DoesFunctionExist(char fnName) -> bool"""
  return _DigitalMicrograph.DoesFunctionExist(*args)

def DoesImageExist(*args):
  """DoesImageExist(long imageID) -> bool"""
  return _DigitalMicrograph.DoesImageExist(*args)

def DoEvents():
  """DoEvents()"""
  return _DigitalMicrograph.DoEvents()

def EditorWindowAddText(*args):
  """EditorWindowAddText(Window window, String text)"""
  return _DigitalMicrograph.EditorWindowAddText(*args)

def EditorWindowGetFont(*args):
  """
    EditorWindowGetFont(Window window, String face_name, ulong attributes, 
        ulong size)
    """
  return _DigitalMicrograph.EditorWindowGetFont(*args)

def EditorWindowGetText(*args):
  """EditorWindowGetText(Window window) -> String"""
  return _DigitalMicrograph.EditorWindowGetText(*args)

def EditorWindowPrint(*args):
  """EditorWindowPrint(Window window) -> bool"""
  return _DigitalMicrograph.EditorWindowPrint(*args)

def EditorWindowSaveToFile(*args):
  """EditorWindowSaveToFile(Window window, String path)"""
  return _DigitalMicrograph.EditorWindowSaveToFile(*args)

def EditorWindowSetFont(*args):
  """
    EditorWindowSetFont(Window window, String face_name, ulong attributes, 
        ulong size)
    """
  return _DigitalMicrograph.EditorWindowSetFont(*args)

def EditorWindowSetText(*args):
  """EditorWindowSetText(Window window, String text)"""
  return _DigitalMicrograph.EditorWindowSetText(*args)

def EMBeamShift(*args):
  """EMBeamShift(long xAmount, long yAmount)"""
  return _DigitalMicrograph.EMBeamShift(*args)

def EMChangeFocus(*args):
  """EMChangeFocus(long amount)"""
  return _DigitalMicrograph.EMChangeFocus(*args)

def EMChangeStigmation(*args):
  """EMChangeStigmation(long xAmount, long yAmount)"""
  return _DigitalMicrograph.EMChangeStigmation(*args)

def EMChangeTilt(*args):
  """EMChangeTilt(long xAmount, long yAmount)"""
  return _DigitalMicrograph.EMChangeTilt(*args)

def EMCloseCommunication():
  """EMCloseCommunication()"""
  return _DigitalMicrograph.EMCloseCommunication()

def EMImageShift(*args):
  """EMImageShift(long xAmount, long yAmount)"""
  return _DigitalMicrograph.EMImageShift(*args)

def EMLinkControlFunctions(*args):
  """EMLinkControlFunctions(void functions)"""
  return _DigitalMicrograph.EMLinkControlFunctions(*args)

def EMPrepareImageShift():
  """EMPrepareImageShift()"""
  return _DigitalMicrograph.EMPrepareImageShift()

def EMPrepareShift():
  """EMPrepareShift()"""
  return _DigitalMicrograph.EMPrepareShift()

def EMPrepareStigmation():
  """EMPrepareStigmation()"""
  return _DigitalMicrograph.EMPrepareStigmation()

def EMPrepareTilt():
  """EMPrepareTilt()"""
  return _DigitalMicrograph.EMPrepareTilt()

def EMSetupCommunication():
  """EMSetupCommunication()"""
  return _DigitalMicrograph.EMSetupCommunication()

def EMUnlinkControlFunctions():
  """EMUnlinkControlFunctions()"""
  return _DigitalMicrograph.EMUnlinkControlFunctions()

def ErrorDialog(*args):
  """ErrorDialog(short error)"""
  return _DigitalMicrograph.ErrorDialog(*args)

def ExecuteScriptString(*args):
  """ExecuteScriptString(String text) -> double"""
  return _DigitalMicrograph.ExecuteScriptString(*args)

def Extract2D_Linear(*args):
  """
    Extract2D_Linear(Image _from, Image to, long extract_style, double x_start, 
        double y_start, double x_scale_0, double y_scale_0, 
        double x_scale_1, double y_scale_1)
    """
  return _DigitalMicrograph.Extract2D_Linear(*args)

def FFT(*args):
  """FFT(Image source) -> Image"""
  return _DigitalMicrograph.FFT(*args)

def FindFrontImage():
  """FindFrontImage() -> Image"""
  return _DigitalMicrograph.FindFrontImage()

def FindFunctionBySignature(*args):
  """FindFunctionBySignature(char signature) -> Function"""
  return _DigitalMicrograph.FindFunctionBySignature(*args)

def FindImageByID(*args):
  """FindImageByID(long id) -> Image"""
  return _DigitalMicrograph.FindImageByID(*args)

def FindImageByIndex(*args):
  """FindImageByIndex(long index) -> Image"""
  return _DigitalMicrograph.FindImageByIndex(*args)

def FindImageByLabel(*args):
  """FindImageByLabel(char label) -> Image"""
  return _DigitalMicrograph.FindImageByLabel(*args)

def FindImageByName(*args):
  """FindImageByName(char name) -> Image"""
  return _DigitalMicrograph.FindImageByName(*args)

def FindLike(*args):
  """FindLike(char name, long width, long height, short dataType) -> Image"""
  return _DigitalMicrograph.FindLike(*args)

def FindNextImage(*args):
  """FindNextImage(Image argument_1) -> Image"""
  return _DigitalMicrograph.FindNextImage(*args)

def FindReferenceImage(*args):
  """FindReferenceImage(char name, short dataType, long width, long height) -> Image"""
  return _DigitalMicrograph.FindReferenceImage(*args)

def FirstImage():
  """FirstImage() -> Image"""
  return _DigitalMicrograph.FirstImage()

def FlipHorizontal(*args):
  """FlipHorizontal(Image argument_1)"""
  return _DigitalMicrograph.FlipHorizontal(*args)

def FlipVertical(*args):
  """FlipVertical(Image argument_1)"""
  return _DigitalMicrograph.FlipVertical(*args)

def FloatingModelessDialog(*args):
  """FloatingModelessDialog(char prompt, char buttonName, long semaphore)"""
  return _DigitalMicrograph.FloatingModelessDialog(*args)

def FlushCache(*args):
  """FlushCache(Image argument_1)"""
  return _DigitalMicrograph.FlushCache(*args)

def FM_ConjMultiplyPackedByPacked(*args):
  """FM_ConjMultiplyPackedByPacked(Image a, Image b)"""
  return _DigitalMicrograph.FM_ConjMultiplyPackedByPacked(*args)

def FM_ConvertInt16ToFloat(*args):
  """FM_ConvertInt16ToFloat(Image a, Image b)"""
  return _DigitalMicrograph.FM_ConvertInt16ToFloat(*args)

def FM_ConvertUInt8ToDisplay8(*args):
  """
    FM_ConvertUInt8ToDisplay8(Image src, long top, long left, long bottom, long right, 
        long dst, long rowBytes)
    """
  return _DigitalMicrograph.FM_ConvertUInt8ToDisplay8(*args)

def FM_ConvertUInt8ToFloat(*args):
  """FM_ConvertUInt8ToFloat(Image a, Image b)"""
  return _DigitalMicrograph.FM_ConvertUInt8ToFloat(*args)

def FM_FinishDMA(*args):
  """FM_FinishDMA(Image image)"""
  return _DigitalMicrograph.FM_FinishDMA(*args)

def FM_Flush():
  """FM_Flush()"""
  return _DigitalMicrograph.FM_Flush()

def FM_GetVarianceFloat(*args):
  """FM_GetVarianceFloat(Image argument_1) -> float"""
  return _DigitalMicrograph.FM_GetVarianceFloat(*args)

def FM_ImageDataChanged(*args):
  """FM_ImageDataChanged(Image image)"""
  return _DigitalMicrograph.FM_ImageDataChanged(*args)

def FM_MultiplyFloatByFloat(*args):
  """FM_MultiplyFloatByFloat(Image a, Image b)"""
  return _DigitalMicrograph.FM_MultiplyFloatByFloat(*args)

def FM_MultiplyPackedByFloat(*args):
  """FM_MultiplyPackedByFloat(Image a, Image b)"""
  return _DigitalMicrograph.FM_MultiplyPackedByFloat(*args)

def FM_MultiplyPackedByScalar(*args):
  """FM_MultiplyPackedByScalar(Image a, float argument_2)"""
  return _DigitalMicrograph.FM_MultiplyPackedByScalar(*args)

def FM_PackedFFT(*args):
  """FM_PackedFFT(Image a)"""
  return _DigitalMicrograph.FM_PackedFFT(*args)

def FM_PackedIFFT(*args):
  """FM_PackedIFFT(Image argument_1)"""
  return _DigitalMicrograph.FM_PackedIFFT(*args)

def FM_PackedLnModulusToImage(*args):
  """
    FM_PackedLnModulusToImage(Image imageSrc, Image imageDst, float lowLimit, float highLimit, 
        float range)
    """
  return _DigitalMicrograph.FM_PackedLnModulusToImage(*args)

def FM_PrepareDMA(*args):
  """FM_PrepareDMA(Image image)"""
  return _DigitalMicrograph.FM_PrepareDMA(*args)

def FM_SetMacOnly(*args):
  """FM_SetMacOnly(bool b)"""
  return _DigitalMicrograph.FM_SetMacOnly(*args)

def FM_ShiftCenterFloat(*args):
  """FM_ShiftCenterFloat(Image a)"""
  return _DigitalMicrograph.FM_ShiftCenterFloat(*args)

def FM_SubtractMeanPacked(*args):
  """FM_SubtractMeanPacked(Image a)"""
  return _DigitalMicrograph.FM_SubtractMeanPacked(*args)

def FM_SubtractMultiply(*args):
  """FM_SubtractMultiply(Image a, Image b, Image c)"""
  return _DigitalMicrograph.FM_SubtractMultiply(*args)

def FM_SurveyNormalPackedModulus(*args):
  """FM_SurveyNormalPackedModulus(Image image)"""
  return _DigitalMicrograph.FM_SurveyNormalPackedModulus(*args)

def FM_TurboFFT(*args):
  """
    FM_TurboFFT(Image buffer, Image fft, Image dark, Image gain, long top, 
        long left, long bottom, long right, long dst, 
        long rowBytes)
    """
  return _DigitalMicrograph.FM_TurboFFT(*args)

def fngetkey():
  """fngetkey() -> short"""
  return _DigitalMicrograph.fngetkey()

def ForceSurvey(*args):
  """ForceSurvey(Image argument_1)"""
  return _DigitalMicrograph.ForceSurvey(*args)

def FreeSemaphore(*args):
  """FreeSemaphore(long argument_1)"""
  return _DigitalMicrograph.FreeSemaphore(*args)

def FunctionCountParameters(*args):
  """FunctionCountParameters(Function func) -> ulong"""
  return _DigitalMicrograph.FunctionCountParameters(*args)

def FunctionGenerateStub(*args):
  """FunctionGenerateStub(Function func, bool include_body, ulong version) -> String"""
  return _DigitalMicrograph.FunctionGenerateStub(*args)

def FunctionIsValid(*args):
  """FunctionIsValid(Function func) -> bool"""
  return _DigitalMicrograph.FunctionIsValid(*args)

def Get1DSize(*args):
  """Get1DSize(Image argument_1)"""
  return _DigitalMicrograph.Get1DSize(*args)

def Get2DSize(*args):
  """Get2DSize(Image argument_1)"""
  return _DigitalMicrograph.Get2DSize(*args)

def Get3DSize(*args):
  """Get3DSize(Image argument_1)"""
  return _DigitalMicrograph.Get3DSize(*args)

def GetApplicationInfo(*args):
  """GetApplicationInfo(long info_kind) -> bool"""
  return _DigitalMicrograph.GetApplicationInfo(*args)

def GetApplicationWindow():
  """GetApplicationWindow() -> Window"""
  return _DigitalMicrograph.GetApplicationWindow()

def GetBoolean(*args):
  """GetBoolean(char prompt, bool initalValue) -> bool"""
  return _DigitalMicrograph.GetBoolean(*args)

def GetCalibrationDialog(*args):
  """GetCalibrationDialog(float aw, float ah, char initialUnitString, char unitString) -> bool"""
  return _DigitalMicrograph.GetCalibrationDialog(*args)

def GetCLUT(*args):
  """GetCLUT(Image argument_1) -> Image"""
  return _DigitalMicrograph.GetCLUT(*args)

def GetDataPtr(*args):
  """GetDataPtr(Image argument_1) -> long"""
  return _DigitalMicrograph.GetDataPtr(*args)

def GetDataType(*args):
  """GetDataType(Image argument_1) -> short"""
  return _DigitalMicrograph.GetDataType(*args)

def GetDate(*args):
  """GetDate(long dateFormat, char buffer, long buffer_length)"""
  return _DigitalMicrograph.GetDate(*args)

def GetDepth(*args):
  """GetDepth(Image argument_1) -> long"""
  return _DigitalMicrograph.GetDepth(*args)

def GetDirectoryDialog(*args):
  """GetDirectoryDialog(char dirName, long buff_length) -> bool"""
  return _DigitalMicrograph.GetDirectoryDialog(*args)

def GetDisplayAsImage(*args):
  """GetDisplayAsImage(Image argument_1) -> Image"""
  return _DigitalMicrograph.GetDisplayAsImage(*args)

def GetDocumentWindow(*args):
  """GetDocumentWindow(long index) -> Window"""
  return _DigitalMicrograph.GetDocumentWindow(*args)

def GetDocumentWindowByTitle(*args):
  """GetDocumentWindowByTitle(String name) -> Window"""
  return _DigitalMicrograph.GetDocumentWindowByTitle(*args)

def GetEstimatedMinMax(*args):
  """GetEstimatedMinMax(Image argument_1)"""
  return _DigitalMicrograph.GetEstimatedMinMax(*args)

def GetException():
  """GetException()"""
  return _DigitalMicrograph.GetException()

def GetExceptionDescription():
  """GetExceptionDescription() -> String"""
  return _DigitalMicrograph.GetExceptionDescription()

def GetExceptionString(*args):
  """GetExceptionString(char dst)"""
  return _DigitalMicrograph.GetExceptionString(*args)

def GetFilesInDirectory(*args):
  """GetFilesInDirectory(String path, ulong search_flags) -> TagGroup"""
  return _DigitalMicrograph.GetFilesInDirectory(*args)

def GetFloatingWindow(*args):
  """GetFloatingWindow(long index) -> Window"""
  return _DigitalMicrograph.GetFloatingWindow(*args)

def GetFourImages(*args):
  """
    GetFourImages(char title, Image image1, Image image2, Image image3, 
        Image image4) -> bool
    """
  return _DigitalMicrograph.GetFourImages(*args)

def GetFourImagesWithPrompt(*args):
  """
    GetFourImagesWithPrompt(char prompt, char title, Image image1, Image image2, 
        Image image3, Image image4) -> bool
    """
  return _DigitalMicrograph.GetFourImagesWithPrompt(*args)

def GetFourLabeledImagesWithPrompt(*args):
  """
    GetFourLabeledImagesWithPrompt(char prompt, char title, char label1, Image image1, 
        char label2, Image image2, char label3, Image image3, 
        char label4, Image image4) -> bool
    """
  return _DigitalMicrograph.GetFourLabeledImagesWithPrompt(*args)

def GetFrontImageDocument():
  """GetFrontImageDocument() -> ImageDocument"""
  return _DigitalMicrograph.GetFrontImageDocument()

def GetFrontImageID():
  """GetFrontImageID() -> long"""
  return _DigitalMicrograph.GetFrontImageID()

def GetImageDataSeed(*args):
  """GetImageDataSeed(Image argument_1) -> long"""
  return _DigitalMicrograph.GetImageDataSeed(*args)

def GetImageDocument(*args):
  """GetImageDocument(long position) -> ImageDocument"""
  return _DigitalMicrograph.GetImageDocument(*args)

def GetImageDocumentByID(*args):
  """GetImageDocumentByID(long id) -> ImageDocument"""
  return _DigitalMicrograph.GetImageDocumentByID(*args)

def GetImageFromID(*args):
  """GetImageFromID(Image argument_1, long imageID) -> bool"""
  return _DigitalMicrograph.GetImageFromID(*args)

def GetImageID(*args):
  """GetImageID(Image argument_1) -> long"""
  return _DigitalMicrograph.GetImageID(*args)

def GetImageWindow(*args):
  """GetImageWindow(Image argument_1) -> long"""
  return _DigitalMicrograph.GetImageWindow(*args)

def GetInteger(*args):
  """GetInteger(char prompt, long initalValue) -> bool"""
  return _DigitalMicrograph.GetInteger(*args)

def GetInversionMode(*args):
  """GetInversionMode(Image argument_1) -> bool"""
  return _DigitalMicrograph.GetInversionMode(*args)

def GetLimits(*args):
  """GetLimits(Image argument_1)"""
  return _DigitalMicrograph.GetLimits(*args)

def GetMaximalDocumentWindowRect(*args):
  """GetMaximalDocumentWindowRect(long options)"""
  return _DigitalMicrograph.GetMaximalDocumentWindowRect(*args)

def GetNextImageID(*args):
  """GetNextImageID(long id) -> long"""
  return _DigitalMicrograph.GetNextImageID(*args)

def GetNthDocumentWindowOfType(*args):
  """GetNthDocumentWindowOfType(long type, long index) -> Window"""
  return _DigitalMicrograph.GetNthDocumentWindowOfType(*args)

def GetNthImageID(*args):
  """GetNthImageID(long n) -> long"""
  return _DigitalMicrograph.GetNthImageID(*args)

def GetNumber(*args):
  """GetNumber(char prompt, float initalValue) -> bool"""
  return _DigitalMicrograph.GetNumber(*args)

def GetOneImage(*args):
  """GetOneImage(char title, Image image1) -> bool"""
  return _DigitalMicrograph.GetOneImage(*args)

def GetOneImageWithPrompt(*args):
  """GetOneImageWithPrompt(char prompt, char title, Image image1) -> bool"""
  return _DigitalMicrograph.GetOneImageWithPrompt(*args)

def GetOneLabeledImageWithPrompt(*args):
  """GetOneLabeledImageWithPrompt(char prompt, char title, char label1, Image image1) -> bool"""
  return _DigitalMicrograph.GetOneLabeledImageWithPrompt(*args)

def GetOrigin(*args):
  """GetOrigin(Image argument_1)"""
  return _DigitalMicrograph.GetOrigin(*args)

def GetOSTickCount():
  """GetOSTickCount() -> uint32"""
  return _DigitalMicrograph.GetOSTickCount()

def GetOSTicksPerSecond():
  """GetOSTicksPerSecond() -> uint32"""
  return _DigitalMicrograph.GetOSTicksPerSecond()

def GetPackageTags(*args):
  """GetPackageTags(char identifier) -> TagGroup"""
  return _DigitalMicrograph.GetPackageTags(*args)

def GetPersistentTagGroup():
  """GetPersistentTagGroup() -> TagGroup"""
  return _DigitalMicrograph.GetPersistentTagGroup()

def GetPlatformInfo(*args):
  """GetPlatformInfo(long info) -> long"""
  return _DigitalMicrograph.GetPlatformInfo(*args)

def GetRawSize(*args):
  """GetRawSize(Image argument_1) -> long"""
  return _DigitalMicrograph.GetRawSize(*args)

def GetRawStreamPos(*args):
  """GetRawStreamPos(long rawStream)"""
  return _DigitalMicrograph.GetRawStreamPos(*args)

def GetRawStreamSize(*args):
  """GetRawStreamSize(long rawStream)"""
  return _DigitalMicrograph.GetRawStreamSize(*args)

def GetResultsWindow(*args):
  """GetResultsWindow(bool open) -> Window"""
  return _DigitalMicrograph.GetResultsWindow(*args)

def GetROIFromID(*args):
  """GetROIFromID(long id) -> ROI"""
  return _DigitalMicrograph.GetROIFromID(*args)

def GetScale(*args):
  """GetScale(Image argument_1)"""
  return _DigitalMicrograph.GetScale(*args)

def GetScreenSize():
  """GetScreenSize()"""
  return _DigitalMicrograph.GetScreenSize()

def GetScriptObjectFromID(*args):
  """GetScriptObjectFromID(long id) -> ScriptObject"""
  return _DigitalMicrograph.GetScriptObjectFromID(*args)

def GetSelection(*args):
  """GetSelection(Image argument_1) -> bool"""
  return _DigitalMicrograph.GetSelection(*args)

def GetSize(*args):
  """GetSize(Image argument_1)"""
  return _DigitalMicrograph.GetSize(*args)

def GetSpecialDirectory(*args):
  """GetSpecialDirectory(long index) -> String"""
  return _DigitalMicrograph.GetSpecialDirectory(*args)

def GetSpecialWindow(*args):
  """GetSpecialWindow(long index) -> long"""
  return _DigitalMicrograph.GetSpecialWindow(*args)

def GetString(*args):
  """GetString(char prompt, char initalValue, char result) -> bool"""
  return _DigitalMicrograph.GetString(*args)

def GetSurvey(*args):
  """GetSurvey(Image argument_1) -> bool"""
  return _DigitalMicrograph.GetSurvey(*args)

def GetThreeImages(*args):
  """GetThreeImages(char title, Image image1, Image image2, Image image3) -> bool"""
  return _DigitalMicrograph.GetThreeImages(*args)

def GetThreeImagesWithPrompt(*args):
  """
    GetThreeImagesWithPrompt(char prompt, char title, Image image1, Image image2, 
        Image image3) -> bool
    """
  return _DigitalMicrograph.GetThreeImagesWithPrompt(*args)

def GetThreeLabeledImagesWithPrompt(*args):
  """
    GetThreeLabeledImagesWithPrompt(char prompt, char title, char label1, Image image1, 
        char label2, Image image2, char label3, Image image3) -> bool
    """
  return _DigitalMicrograph.GetThreeLabeledImagesWithPrompt(*args)

def GetTicks():
  """GetTicks() -> uint32"""
  return _DigitalMicrograph.GetTicks()

def GetTicksPerSecond():
  """GetTicksPerSecond() -> uint32"""
  return _DigitalMicrograph.GetTicksPerSecond()

def GetTime(*args):
  """GetTime(bool wantSeconds, char buffer, long buffer_length)"""
  return _DigitalMicrograph.GetTime(*args)

def GetTwoImages(*args):
  """GetTwoImages(char title, Image image1, Image image2) -> bool"""
  return _DigitalMicrograph.GetTwoImages(*args)

def GetTwoImagesWithPrompt(*args):
  """GetTwoImagesWithPrompt(char prompt, char title, Image image1, Image image2) -> bool"""
  return _DigitalMicrograph.GetTwoImagesWithPrompt(*args)

def GetTwoLabeledImagesWithPrompt(*args):
  """
    GetTwoLabeledImagesWithPrompt(char prompt, char title, char label1, Image image1, 
        char label2, Image image2) -> bool
    """
  return _DigitalMicrograph.GetTwoLabeledImagesWithPrompt(*args)

def GetUnitsH(*args):
  """GetUnitsH(Image argument_1, float x) -> float"""
  return _DigitalMicrograph.GetUnitsH(*args)

def GetUnitString(*args):
  """GetUnitString(Image argument_1, char buffer)"""
  return _DigitalMicrograph.GetUnitString(*args)

def GetUnitsV(*args):
  """GetUnitsV(Image argument_1, float y) -> float"""
  return _DigitalMicrograph.GetUnitsV(*args)

def GetWindowPosition(*args):
  """GetWindowPosition(Image argument_1, long xPos, long yPos)"""
  return _DigitalMicrograph.GetWindowPosition(*args)

def GetWindowSize(*args):
  """GetWindowSize(Image argument_1)"""
  return _DigitalMicrograph.GetWindowSize(*args)

def GetZoom(*args):
  """GetZoom(Image argument_1) -> float"""
  return _DigitalMicrograph.GetZoom(*args)

def GrabSemaphore(*args):
  """GrabSemaphore(long argument_1)"""
  return _DigitalMicrograph.GrabSemaphore(*args)

def GroupAnnotationUngroup(*args):
  """GroupAnnotationUngroup(Component comp)"""
  return _DigitalMicrograph.GroupAnnotationUngroup(*args)

def HasAcquisitionDaemon(*args):
  """HasAcquisitionDaemon(Image argument_1) -> bool"""
  return _DigitalMicrograph.HasAcquisitionDaemon(*args)

def HideImage(*args):
  """HideImage(Image argument_1)"""
  return _DigitalMicrograph.HideImage(*args)

def IFFT(*args):
  """IFFT(Image source) -> Image"""
  return _DigitalMicrograph.IFFT(*args)

def ImageCalculateHistogram(*args):
  """
    ImageCalculateHistogram(Image image, Image hist_image, long complexMode, float min, 
        float max)
    """
  return _DigitalMicrograph.ImageCalculateHistogram(*args)

def ImageCalculateMinMax(*args):
  """ImageCalculateMinMax(Image image, long surveyTechnique, long complexMode)"""
  return _DigitalMicrograph.ImageCalculateMinMax(*args)

def ImageClone(*args):
  """ImageClone(Image img) -> Image"""
  return _DigitalMicrograph.ImageClone(*args)

def ImageCopyCalibrationFrom(*args):
  """ImageCopyCalibrationFrom(Image image, Image src_image)"""
  return _DigitalMicrograph.ImageCopyCalibrationFrom(*args)

def ImageCountImageDisplays(*args):
  """ImageCountImageDisplays(Image argument_1) -> long"""
  return _DigitalMicrograph.ImageCountImageDisplays(*args)

def ImageCountImageDisplaysInImageDocument(*args):
  """ImageCountImageDisplaysInImageDocument(Image argument_1, ImageDocument imgDoc) -> long"""
  return _DigitalMicrograph.ImageCountImageDisplaysInImageDocument(*args)

def ImageCreateImageDisplay(*args):
  """ImageCreateImageDisplay(Image argument_1, long displayType) -> ImageDisplay"""
  return _DigitalMicrograph.ImageCreateImageDisplay(*args)

def ImageData_CacheChanged(*args):
  """ImageData_CacheChanged(long imageDataID)"""
  return _DigitalMicrograph.ImageData_CacheChanged(*args)

def ImageData_Changed(*args):
  """ImageData_Changed(long imageDataID)"""
  return _DigitalMicrograph.ImageData_Changed(*args)

def ImageData_FlushCache(*args):
  """ImageData_FlushCache(long imageDataID)"""
  return _DigitalMicrograph.ImageData_FlushCache(*args)

def ImageData_GetSeed(*args):
  """ImageData_GetSeed(long imageDataID) -> long"""
  return _DigitalMicrograph.ImageData_GetSeed(*args)

def ImageData_IsLocalCopyValid(*args):
  """ImageData_IsLocalCopyValid(long imageDataID) -> bool"""
  return _DigitalMicrograph.ImageData_IsLocalCopyValid(*args)

def ImageData_SetLocalSeed(*args):
  """ImageData_SetLocalSeed(long imageDataID, long value)"""
  return _DigitalMicrograph.ImageData_SetLocalSeed(*args)

def ImageDataChanged(*args):
  """ImageDataChanged(Image argument_1)"""
  return _DigitalMicrograph.ImageDataChanged(*args)

def ImageDisplayAccumulateROIsToMask(*args):
  """
    ImageDisplayAccumulateROIsToMask(ImageDisplay imgDisp, Image mask, float top, float left, 
        float bottom, float right, float mask_val)
    """
  return _DigitalMicrograph.ImageDisplayAccumulateROIsToMask(*args)

def ImageDisplayAddKeyListener(*args):
  """ImageDisplayAddKeyListener(ImageDisplay imgDisp, char listener_key, char listener_script)"""
  return _DigitalMicrograph.ImageDisplayAddKeyListener(*args)

def ImageDisplayAddROI(*args):
  """ImageDisplayAddROI(ImageDisplay imgDisp, ROI roi)"""
  return _DigitalMicrograph.ImageDisplayAddROI(*args)

def ImageDisplayCountROIs(*args):
  """ImageDisplayCountROIs(ImageDisplay imgDisp) -> long"""
  return _DigitalMicrograph.ImageDisplayCountROIs(*args)

def ImageDisplayDeleteROI(*args):
  """ImageDisplayDeleteROI(ImageDisplay imgDisp, ROI roi)"""
  return _DigitalMicrograph.ImageDisplayDeleteROI(*args)

def ImageDisplayDoesROIExist(*args):
  """ImageDisplayDoesROIExist(ImageDisplay imgDisp, char name) -> bool"""
  return _DigitalMicrograph.ImageDisplayDoesROIExist(*args)

def ImageDisplayExportToFile(*args):
  """ImageDisplayExportToFile(ImageDisplay imgDisp, char format, char file_name)"""
  return _DigitalMicrograph.ImageDisplayExportToFile(*args)

def ImageDisplayGetBufferedImage(*args):
  """ImageDisplayGetBufferedImage(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetBufferedImage(*args)

def ImageDisplayGetComplexMode(*args):
  """ImageDisplayGetComplexMode(ImageDisplay imgDisp) -> long"""
  return _DigitalMicrograph.ImageDisplayGetComplexMode(*args)

def ImageDisplayGetComplexModeRange(*args):
  """ImageDisplayGetComplexModeRange(ImageDisplay imgDisp) -> float"""
  return _DigitalMicrograph.ImageDisplayGetComplexModeRange(*args)

def ImageDisplayGetContrastLimits(*args):
  """ImageDisplayGetContrastLimits(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetContrastLimits(*args)

def ImageDisplayGetContrastMode(*args):
  """ImageDisplayGetContrastMode(ImageDisplay imgDisp) -> long"""
  return _DigitalMicrograph.ImageDisplayGetContrastMode(*args)

def ImageDisplayGetContrastParameters(*args):
  """ImageDisplayGetContrastParameters(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetContrastParameters(*args)

def ImageDisplayGetDisplayedImage(*args):
  """ImageDisplayGetDisplayedImage(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetDisplayedImage(*args)

def ImageDisplayGetDisplayedLayers(*args):
  """ImageDisplayGetDisplayedLayers(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetDisplayedLayers(*args)

def ImageDisplayGetDisplayType(*args):
  """ImageDisplayGetDisplayType(ImageDisplay imgDisp) -> long"""
  return _DigitalMicrograph.ImageDisplayGetDisplayType(*args)

def ImageDisplayGetDoAutoSurvey(*args):
  """ImageDisplayGetDoAutoSurvey(ImageDisplay imgDisp) -> bool"""
  return _DigitalMicrograph.ImageDisplayGetDoAutoSurvey(*args)

def ImageDisplayGetExportImage(*args):
  """ImageDisplayGetExportImage(ImageDisplay imgDisp, ulong mode, ImageDisplay clut_display) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetExportImage(*args)

def ImageDisplayGetImage(*args):
  """ImageDisplayGetImage(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetImage(*args)

def ImageDisplayGetImageAdjustRect(*args):
  """ImageDisplayGetImageAdjustRect(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetImageAdjustRect(*args)

def ImageDisplayGetImageAdjustRectInView(*args):
  """ImageDisplayGetImageAdjustRectInView(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetImageAdjustRectInView(*args)

def ImageDisplayGetImageRect(*args):
  """ImageDisplayGetImageRect(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetImageRect(*args)

def ImageDisplayGetImageRectInView(*args):
  """ImageDisplayGetImageRectInView(ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDisplayGetImageRectInView(*args)

def ImageDisplayGetInputColorTable(*args):
  """ImageDisplayGetInputColorTable(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetInputColorTable(*args)

def ImageDisplayGetIntensityTransformation(*args):
  """ImageDisplayGetIntensityTransformation(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetIntensityTransformation(*args)

def ImageDisplayGetMinimumContrast(*args):
  """ImageDisplayGetMinimumContrast(ImageDisplay imgDisp) -> float"""
  return _DigitalMicrograph.ImageDisplayGetMinimumContrast(*args)

def ImageDisplayGetOutputColorTable(*args):
  """ImageDisplayGetOutputColorTable(ImageDisplay imgDisp) -> Image"""
  return _DigitalMicrograph.ImageDisplayGetOutputColorTable(*args)

def ImageDisplayGetROI(*args):
  """ImageDisplayGetROI(ImageDisplay imgDisp, long index) -> ROI"""
  return _DigitalMicrograph.ImageDisplayGetROI(*args)

def ImageDisplayGetROISelectionStyle(*args):
  """ImageDisplayGetROISelectionStyle(ImageDisplay imgDisp, ROI r) -> long"""
  return _DigitalMicrograph.ImageDisplayGetROISelectionStyle(*args)

def ImageDisplayGetSurveyTechnique(*args):
  """ImageDisplayGetSurveyTechnique(ImageDisplay imgDisp) -> long"""
  return _DigitalMicrograph.ImageDisplayGetSurveyTechnique(*args)

def ImageDisplayIsCaptionOn(*args):
  """ImageDisplayIsCaptionOn(ImageDisplay imgDisp) -> bool"""
  return _DigitalMicrograph.ImageDisplayIsCaptionOn(*args)

def ImageDisplayIsROISelected(*args):
  """ImageDisplayIsROISelected(ImageDisplay imgDisp, ROI roi) -> bool"""
  return _DigitalMicrograph.ImageDisplayIsROISelected(*args)

def ImageDisplayIsValid(*args):
  """ImageDisplayIsValid(ImageDisplay imgDisp) -> bool"""
  return _DigitalMicrograph.ImageDisplayIsValid(*args)

def ImageDisplayLookupROI(*args):
  """ImageDisplayLookupROI(ImageDisplay imgDisp, char name) -> ROI"""
  return _DigitalMicrograph.ImageDisplayLookupROI(*args)

def ImageDisplayLookupROIByID(*args):
  """ImageDisplayLookupROIByID(ImageDisplay imgDisp, long id) -> ROI"""
  return _DigitalMicrograph.ImageDisplayLookupROIByID(*args)

def ImageDisplayRemoveKeyListener(*args):
  """ImageDisplayRemoveKeyListener(ImageDisplay imgDisp, char listener_key)"""
  return _DigitalMicrograph.ImageDisplayRemoveKeyListener(*args)

def ImageDisplaySetCaptionOn(*args):
  """ImageDisplaySetCaptionOn(ImageDisplay imgDisp, bool on)"""
  return _DigitalMicrograph.ImageDisplaySetCaptionOn(*args)

def ImageDisplaySetComplexMode(*args):
  """ImageDisplaySetComplexMode(ImageDisplay imgDisp, long mode)"""
  return _DigitalMicrograph.ImageDisplaySetComplexMode(*args)

def ImageDisplaySetComplexModeRange(*args):
  """ImageDisplaySetComplexModeRange(ImageDisplay imgDisp, float range)"""
  return _DigitalMicrograph.ImageDisplaySetComplexModeRange(*args)

def ImageDisplaySetContrastLimits(*args):
  """ImageDisplaySetContrastLimits(ImageDisplay imgDisp, float low, float hight)"""
  return _DigitalMicrograph.ImageDisplaySetContrastLimits(*args)

def ImageDisplaySetContrastMode(*args):
  """ImageDisplaySetContrastMode(ImageDisplay imgDisp, long mode)"""
  return _DigitalMicrograph.ImageDisplaySetContrastMode(*args)

def ImageDisplaySetContrastParameters(*args):
  """ImageDisplaySetContrastParameters(ImageDisplay imgDisp, float bright, float contrast)"""
  return _DigitalMicrograph.ImageDisplaySetContrastParameters(*args)

def ImageDisplaySetDisplayedLayers(*args):
  """ImageDisplaySetDisplayedLayers(ImageDisplay imgDisp, long start, long end)"""
  return _DigitalMicrograph.ImageDisplaySetDisplayedLayers(*args)

def ImageDisplaySetDoAutoSurvey(*args):
  """ImageDisplaySetDoAutoSurvey(ImageDisplay imgDisp, bool do_survey)"""
  return _DigitalMicrograph.ImageDisplaySetDoAutoSurvey(*args)

def ImageDisplaySetImageRect(*args):
  """
    ImageDisplaySetImageRect(ImageDisplay imgDisp, float top, float left, float bottom, 
        float right)
    """
  return _DigitalMicrograph.ImageDisplaySetImageRect(*args)

def ImageDisplaySetInputColorTable(*args):
  """ImageDisplaySetInputColorTable(ImageDisplay imgDisp, Image clut)"""
  return _DigitalMicrograph.ImageDisplaySetInputColorTable(*args)

def ImageDisplaySetIntensityTransformation(*args):
  """ImageDisplaySetIntensityTransformation(ImageDisplay imgDisp, Image itt)"""
  return _DigitalMicrograph.ImageDisplaySetIntensityTransformation(*args)

def ImageDisplaySetMinimumContrast(*args):
  """ImageDisplaySetMinimumContrast(ImageDisplay imgDisp, float contrast)"""
  return _DigitalMicrograph.ImageDisplaySetMinimumContrast(*args)

def ImageDisplaySetROISelected(*args):
  """ImageDisplaySetROISelected(ImageDisplay imgDisp, ROI roi, bool select)"""
  return _DigitalMicrograph.ImageDisplaySetROISelected(*args)

def ImageDisplaySetROISelectionStyle(*args):
  """ImageDisplaySetROISelectionStyle(ImageDisplay imgDisp, ROI r, long style)"""
  return _DigitalMicrograph.ImageDisplaySetROISelectionStyle(*args)

def ImageDisplaySetSurveyTechnique(*args):
  """ImageDisplaySetSurveyTechnique(ImageDisplay imgDisp, long tech)"""
  return _DigitalMicrograph.ImageDisplaySetSurveyTechnique(*args)

def ImageDocumentAddImage(*args):
  """ImageDocumentAddImage(ImageDocument imgDoc, Image image)"""
  return _DigitalMicrograph.ImageDocumentAddImage(*args)

def ImageDocumentAddToUserInterface(*args):
  """ImageDocumentAddToUserInterface(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentAddToUserInterface(*args)

def ImageDocumentClean(*args):
  """ImageDocumentClean(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentClean(*args)

def ImageDocumentClone(*args):
  """ImageDocumentClone(ImageDocument imgDoc, bool doDeepCopy) -> ImageDocument"""
  return _DigitalMicrograph.ImageDocumentClone(*args)

def ImageDocumentClose(*args):
  """ImageDocumentClose(ImageDocument imgDoc, bool saving)"""
  return _DigitalMicrograph.ImageDocumentClose(*args)

def ImageDocumentCountImages(*args):
  """ImageDocumentCountImages(ImageDocument imgDoc) -> long"""
  return _DigitalMicrograph.ImageDocumentCountImages(*args)

def ImageDocumentCreateRGBImageFromDocument(*args):
  """
    ImageDocumentCreateRGBImageFromDocument(ImageDocument imgDoc, long width, long height, long extract_style, 
        long constraints) -> Image
    """
  return _DigitalMicrograph.ImageDocumentCreateRGBImageFromDocument(*args)

def ImageDocumentDeleteImage(*args):
  """ImageDocumentDeleteImage(ImageDocument imgDoc, Image image)"""
  return _DigitalMicrograph.ImageDocumentDeleteImage(*args)

def ImageDocumentDoesImageWithIDExist(*args):
  """ImageDocumentDoesImageWithIDExist(ImageDocument imgDoc, long id) -> bool"""
  return _DigitalMicrograph.ImageDocumentDoesImageWithIDExist(*args)

def ImageDocumentEnsurePlacedOnPage(*args):
  """ImageDocumentEnsurePlacedOnPage(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentEnsurePlacedOnPage(*args)

def ImageDocumentGetAsPICT(*args):
  """ImageDocumentGetAsPICT(ImageDocument imgDoc) -> long"""
  return _DigitalMicrograph.ImageDocumentGetAsPICT(*args)

def ImageDocumentGetComponentByID(*args):
  """ImageDocumentGetComponentByID(ImageDocument imgDoc, long id) -> Component"""
  return _DigitalMicrograph.ImageDocumentGetComponentByID(*args)

def ImageDocumentGetID(*args):
  """ImageDocumentGetID(ImageDocument imgDoc) -> long"""
  return _DigitalMicrograph.ImageDocumentGetID(*args)

def ImageDocumentGetImage(*args):
  """ImageDocumentGetImage(ImageDocument imgDoc, long position) -> Image"""
  return _DigitalMicrograph.ImageDocumentGetImage(*args)

def ImageDocumentGetImageByID(*args):
  """ImageDocumentGetImageByID(ImageDocument imgDoc, long id) -> Image"""
  return _DigitalMicrograph.ImageDocumentGetImageByID(*args)

def ImageDocumentGetImageModeDisplay(*args):
  """ImageDocumentGetImageModeDisplay(ImageDocument imgDoc) -> ImageDisplay"""
  return _DigitalMicrograph.ImageDocumentGetImageModeDisplay(*args)

def ImageDocumentGetMinimumPointSize(*args):
  """ImageDocumentGetMinimumPointSize(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetMinimumPointSize(*args)

def ImageDocumentGetName(*args):
  """ImageDocumentGetName(ImageDocument imgDoc) -> String"""
  return _DigitalMicrograph.ImageDocumentGetName(*args)

def ImageDocumentGetPageBounds(*args):
  """ImageDocumentGetPageBounds(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetPageBounds(*args)

def ImageDocumentGetPageResolution_72dpi(*args):
  """ImageDocumentGetPageResolution_72dpi(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetPageResolution_72dpi(*args)

def ImageDocumentGetPageResolution_Printer(*args):
  """ImageDocumentGetPageResolution_Printer(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetPageResolution_Printer(*args)

def ImageDocumentGetPaperBounds(*args):
  """ImageDocumentGetPaperBounds(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetPaperBounds(*args)

def ImageDocumentGetPreferredViewRect(*args):
  """ImageDocumentGetPreferredViewRect(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetPreferredViewRect(*args)

def ImageDocumentGetReferencePointSize(*args):
  """ImageDocumentGetReferencePointSize(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetReferencePointSize(*args)

def ImageDocumentGetRootComponent(*args):
  """ImageDocumentGetRootComponent(ImageDocument imgDoc) -> Component"""
  return _DigitalMicrograph.ImageDocumentGetRootComponent(*args)

def ImageDocumentGetTagGroup(*args):
  """ImageDocumentGetTagGroup(ImageDocument imgDoc) -> TagGroup"""
  return _DigitalMicrograph.ImageDocumentGetTagGroup(*args)

def ImageDocumentGetUnzoomedPointSize(*args):
  """ImageDocumentGetUnzoomedPointSize(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetUnzoomedPointSize(*args)

def ImageDocumentGetViewExtent(*args):
  """ImageDocumentGetViewExtent(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetViewExtent(*args)

def ImageDocumentGetViewToWindowTransform(*args):
  """ImageDocumentGetViewToWindowTransform(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetViewToWindowTransform(*args)

def ImageDocumentGetVisibleViewRect(*args):
  """ImageDocumentGetVisibleViewRect(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentGetVisibleViewRect(*args)

def ImageDocumentGetWindow(*args):
  """ImageDocumentGetWindow(ImageDocument imgDoc) -> Window"""
  return _DigitalMicrograph.ImageDocumentGetWindow(*args)

def ImageDocumentHasBeenPlacedOnPage(*args):
  """ImageDocumentHasBeenPlacedOnPage(ImageDocument imgDoc) -> bool"""
  return _DigitalMicrograph.ImageDocumentHasBeenPlacedOnPage(*args)

def ImageDocumentHide(*args):
  """ImageDocumentHide(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentHide(*args)

def ImageDocumentIsInImageMode(*args):
  """ImageDocumentIsInImageMode(ImageDocument imgDoc) -> bool"""
  return _DigitalMicrograph.ImageDocumentIsInImageMode(*args)

def ImageDocumentIsInPageMode(*args):
  """ImageDocumentIsInPageMode(ImageDocument imgDoc) -> bool"""
  return _DigitalMicrograph.ImageDocumentIsInPageMode(*args)

def ImageDocumentIsValid(*args):
  """ImageDocumentIsValid(ImageDocument imgDoc) -> bool"""
  return _DigitalMicrograph.ImageDocumentIsValid(*args)

def ImageDocumentMaximizeRectInView(*args):
  """
    ImageDocumentMaximizeRectInView(ImageDocument imgDoc, float top, float left, float bottom, 
        float right)
    """
  return _DigitalMicrograph.ImageDocumentMaximizeRectInView(*args)

def ImageDocumentPrint(*args):
  """ImageDocumentPrint(ImageDocument imgDoc) -> bool"""
  return _DigitalMicrograph.ImageDocumentPrint(*args)

def ImageDocumentRemoveFromUserInterface(*args):
  """ImageDocumentRemoveFromUserInterface(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentRemoveFromUserInterface(*args)

def ImageDocumentSaveToFile(*args):
  """ImageDocumentSaveToFile(ImageDocument imgDoc, char handler, char fileName)"""
  return _DigitalMicrograph.ImageDocumentSaveToFile(*args)

def ImageDocumentSetCurrentViewAsUnzoomed(*args):
  """ImageDocumentSetCurrentViewAsUnzoomed(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentSetCurrentViewAsUnzoomed(*args)

def ImageDocumentSetName(*args):
  """ImageDocumentSetName(ImageDocument imgDoc, String name)"""
  return _DigitalMicrograph.ImageDocumentSetName(*args)

def ImageDocumentSetRectInView(*args):
  """
    ImageDocumentSetRectInView(ImageDocument imgDoc, float v_t, float v_l, float v_b, 
        float v_r, float w_t, float w_l, float w_b, 
        float w_r)
    """
  return _DigitalMicrograph.ImageDocumentSetRectInView(*args)

def ImageDocumentShow(*args):
  """ImageDocumentShow(ImageDocument imgDoc) -> Window"""
  return _DigitalMicrograph.ImageDocumentShow(*args)

def ImageDocumentShowAtPosition(*args):
  """ImageDocumentShowAtPosition(ImageDocument imgDoc, long x, long y) -> Window"""
  return _DigitalMicrograph.ImageDocumentShowAtPosition(*args)

def ImageDocumentShowAtRect(*args):
  """
    ImageDocumentShowAtRect(ImageDocument imgDoc, long top, long left, long bottom, 
        long right) -> Window
    """
  return _DigitalMicrograph.ImageDocumentShowAtRect(*args)

def ImageDocumentSwitchToImageMode(*args):
  """ImageDocumentSwitchToImageMode(ImageDocument imgDoc, ImageDisplay imgDisp)"""
  return _DigitalMicrograph.ImageDocumentSwitchToImageMode(*args)

def ImageDocumentSwitchToPageMode(*args):
  """ImageDocumentSwitchToPageMode(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentSwitchToPageMode(*args)

def ImageDocumentUpdateDisplay(*args):
  """ImageDocumentUpdateDisplay(ImageDocument imgDoc)"""
  return _DigitalMicrograph.ImageDocumentUpdateDisplay(*args)

def ImageGetDataElementBitSize(*args):
  """ImageGetDataElementBitSize(Image img) -> ulong"""
  return _DigitalMicrograph.ImageGetDataElementBitSize(*args)

def ImageGetDataElementByteSize(*args):
  """ImageGetDataElementByteSize(Image img) -> ulong"""
  return _DigitalMicrograph.ImageGetDataElementByteSize(*args)

def ImageGetDataSeed(*args):
  """ImageGetDataSeed(Image img) -> ulong"""
  return _DigitalMicrograph.ImageGetDataSeed(*args)

def ImageGetDataType(*args):
  """ImageGetDataType(Image img) -> ulong"""
  return _DigitalMicrograph.ImageGetDataType(*args)

def ImageGetDescriptionText(*args):
  """ImageGetDescriptionText(Image img) -> String"""
  return _DigitalMicrograph.ImageGetDescriptionText(*args)

def ImageGetDimensionCalibration(*args):
  """ImageGetDimensionCalibration(Image argument_1, long dimension, String units, long calibrationFormat)"""
  return _DigitalMicrograph.ImageGetDimensionCalibration(*args)

def ImageGetDimensionOrigin(*args):
  """ImageGetDimensionOrigin(Image argument_1, long dimension) -> float"""
  return _DigitalMicrograph.ImageGetDimensionOrigin(*args)

def ImageGetDimensionScale(*args):
  """ImageGetDimensionScale(Image argument_1, long dimension) -> float"""
  return _DigitalMicrograph.ImageGetDimensionScale(*args)

def ImageGetDimensionSize(*args):
  """ImageGetDimensionSize(Image argument_1, ulong dimension) -> ulong"""
  return _DigitalMicrograph.ImageGetDimensionSize(*args)

def ImageGetDimensionUnitInfo(*args):
  """ImageGetDimensionUnitInfo(Image argument_1, long dimension, String canon_units)"""
  return _DigitalMicrograph.ImageGetDimensionUnitInfo(*args)

def ImageGetDimensionUnitString(*args):
  """ImageGetDimensionUnitString(Image argument_1, long dimension) -> String"""
  return _DigitalMicrograph.ImageGetDimensionUnitString(*args)

def ImageGetID(*args):
  """ImageGetID(Image argument_1) -> ulong"""
  return _DigitalMicrograph.ImageGetID(*args)

def ImageGetImageDisplay(*args):
  """ImageGetImageDisplay(Image argument_1, long index) -> ImageDisplay"""
  return _DigitalMicrograph.ImageGetImageDisplay(*args)

def ImageGetImageDisplayInImageDocument(*args):
  """ImageGetImageDisplayInImageDocument(Image argument_1, ImageDocument imgDoc, long index) -> ImageDisplay"""
  return _DigitalMicrograph.ImageGetImageDisplayInImageDocument(*args)

def ImageGetIntensityOrigin(*args):
  """ImageGetIntensityOrigin(Image argument_1) -> float"""
  return _DigitalMicrograph.ImageGetIntensityOrigin(*args)

def ImageGetIntensityScale(*args):
  """ImageGetIntensityScale(Image argument_1) -> float"""
  return _DigitalMicrograph.ImageGetIntensityScale(*args)

def ImageGetIntensityUnitInfo(*args):
  """ImageGetIntensityUnitInfo(Image argument_1, String canon_units)"""
  return _DigitalMicrograph.ImageGetIntensityUnitInfo(*args)

def ImageGetIntensityUnitString(*args):
  """ImageGetIntensityUnitString(Image argument_1) -> String"""
  return _DigitalMicrograph.ImageGetIntensityUnitString(*args)

def ImageGetLabel(*args):
  """ImageGetLabel(Image img) -> String"""
  return _DigitalMicrograph.ImageGetLabel(*args)

def ImageGetName(*args):
  """ImageGetName(Image img) -> String"""
  return _DigitalMicrograph.ImageGetName(*args)

def ImageGetNumDimensions(*args):
  """ImageGetNumDimensions(Image argument_1) -> ulong"""
  return _DigitalMicrograph.ImageGetNumDimensions(*args)

def ImageGetOrCreateImageDocument(*args):
  """ImageGetOrCreateImageDocument(Image im) -> ImageDocument"""
  return _DigitalMicrograph.ImageGetOrCreateImageDocument(*args)

def ImageGetTagGroup(*args):
  """ImageGetTagGroup(Image img) -> TagGroup"""
  return _DigitalMicrograph.ImageGetTagGroup(*args)

def ImageGetUniqueID(*args):
  """ImageGetUniqueID(Image image) -> ScriptObject"""
  return _DigitalMicrograph.ImageGetUniqueID(*args)

def ImageIsDataTypeBinary(*args):
  """ImageIsDataTypeBinary(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeBinary(*args)

def ImageIsDataTypeComplex(*args):
  """ImageIsDataTypeComplex(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeComplex(*args)

def ImageIsDataTypeFloat(*args):
  """ImageIsDataTypeFloat(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeFloat(*args)

def ImageIsDataTypeInteger(*args):
  """ImageIsDataTypeInteger(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeInteger(*args)

def ImageIsDataTypePackedComplex(*args):
  """ImageIsDataTypePackedComplex(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypePackedComplex(*args)

def ImageIsDataTypeReal(*args):
  """ImageIsDataTypeReal(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeReal(*args)

def ImageIsDataTypeRGB(*args):
  """ImageIsDataTypeRGB(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeRGB(*args)

def ImageIsDataTypeSignedInteger(*args):
  """ImageIsDataTypeSignedInteger(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeSignedInteger(*args)

def ImageIsDataTypeUnsignedInteger(*args):
  """ImageIsDataTypeUnsignedInteger(Image img) -> bool"""
  return _DigitalMicrograph.ImageIsDataTypeUnsignedInteger(*args)

def ImageIsDimensionCalibrationDisplayed(*args):
  """ImageIsDimensionCalibrationDisplayed(Image im, ulong dim) -> bool"""
  return _DigitalMicrograph.ImageIsDimensionCalibrationDisplayed(*args)

def ImageIsIntensityCalibrationDisplayed(*args):
  """ImageIsIntensityCalibrationDisplayed(Image im) -> bool"""
  return _DigitalMicrograph.ImageIsIntensityCalibrationDisplayed(*args)

def ImageIsValid(*args):
  """ImageIsValid(Image image) -> bool"""
  return _DigitalMicrograph.ImageIsValid(*args)

def ImageSetDescriptionText(*args):
  """ImageSetDescriptionText(Image img, String description)"""
  return _DigitalMicrograph.ImageSetDescriptionText(*args)

def ImageSetDimensionCalibration(*args):
  """
    ImageSetDimensionCalibration(Image argument_1, long dimenstion, float origin, float scale, 
        String unitString, long calibrationFormat)
    """
  return _DigitalMicrograph.ImageSetDimensionCalibration(*args)

def ImageSetDimensionCalibrationDisplayed(*args):
  """ImageSetDimensionCalibrationDisplayed(Image im, ulong dim, bool do_display)"""
  return _DigitalMicrograph.ImageSetDimensionCalibrationDisplayed(*args)

def ImageSetDimensionOrigin(*args):
  """ImageSetDimensionOrigin(Image argument_1, long dimension, float origin)"""
  return _DigitalMicrograph.ImageSetDimensionOrigin(*args)

def ImageSetDimensionScale(*args):
  """ImageSetDimensionScale(Image argument_1, long dimension, float scale)"""
  return _DigitalMicrograph.ImageSetDimensionScale(*args)

def ImageSetDimensionUnitInfo(*args):
  """
    ImageSetDimensionUnitInfo(Image argument_1, long dimension, String canon_units, 
        long power)
    """
  return _DigitalMicrograph.ImageSetDimensionUnitInfo(*args)

def ImageSetDimensionUnitString(*args):
  """ImageSetDimensionUnitString(Image argument_1, long dimension, String units)"""
  return _DigitalMicrograph.ImageSetDimensionUnitString(*args)

def ImageSetIntensityCalibrationDisplayed(*args):
  """ImageSetIntensityCalibrationDisplayed(Image im, bool do_display)"""
  return _DigitalMicrograph.ImageSetIntensityCalibrationDisplayed(*args)

def ImageSetIntensityOrigin(*args):
  """ImageSetIntensityOrigin(Image argument_1, float origin)"""
  return _DigitalMicrograph.ImageSetIntensityOrigin(*args)

def ImageSetIntensityScale(*args):
  """ImageSetIntensityScale(Image argument_1, float scale)"""
  return _DigitalMicrograph.ImageSetIntensityScale(*args)

def ImageSetIntensityUnitInfo(*args):
  """ImageSetIntensityUnitInfo(Image argument_1, String canon_units, long power)"""
  return _DigitalMicrograph.ImageSetIntensityUnitInfo(*args)

def ImageSetIntensityUnitString(*args):
  """ImageSetIntensityUnitString(Image argument_1, String units)"""
  return _DigitalMicrograph.ImageSetIntensityUnitString(*args)

def ImageSetName(*args):
  """ImageSetName(Image img, String name)"""
  return _DigitalMicrograph.ImageSetName(*args)

def ImageWindowGetImageDocument(*args):
  """ImageWindowGetImageDocument(Window window) -> ImageDocument"""
  return _DigitalMicrograph.ImageWindowGetImageDocument(*args)

def InstallScriptLibraryFile(*args):
  """InstallScriptLibraryFile(char fileName) -> float"""
  return _DigitalMicrograph.InstallScriptLibraryFile(*args)

def Is2DDisplay(*args):
  """Is2DDisplay(Image argument_1) -> bool"""
  return _DigitalMicrograph.Is2DDisplay(*args)

def IsBinaryDataType(*args):
  """IsBinaryDataType(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsBinaryDataType(*args)

def IsByteImage(*args):
  """IsByteImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsByteImage(*args)

def IsComplexDataType(*args):
  """IsComplexDataType(Image argument_1, long bytes) -> bool"""
  return _DigitalMicrograph.IsComplexDataType(*args)

def IsComplexImage(*args):
  """IsComplexImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsComplexImage(*args)

def IsDisplayValid(*args):
  """IsDisplayValid(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsDisplayValid(*args)

def IsExceptionUserAbort():
  """IsExceptionUserAbort() -> bool"""
  return _DigitalMicrograph.IsExceptionUserAbort()

def IsFloatImage(*args):
  """IsFloatImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsFloatImage(*args)

def IsImageComplex(*args):
  """IsImageComplex(long id) -> bool"""
  return _DigitalMicrograph.IsImageComplex(*args)

def IsImageReal(*args):
  """IsImageReal(long id) -> bool"""
  return _DigitalMicrograph.IsImageReal(*args)

def IsImageRGB(*args):
  """IsImageRGB(long id) -> bool"""
  return _DigitalMicrograph.IsImageRGB(*args)

def IsIntegerDataType(*args):
  """IsIntegerDataType(Image argument_1, long bytes, bool isSigned) -> bool"""
  return _DigitalMicrograph.IsIntegerDataType(*args)

def IsLongImage(*args):
  """IsLongImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsLongImage(*args)

def IsPackedComplexImage(*args):
  """IsPackedComplexImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsPackedComplexImage(*args)

def IsRealDataType(*args):
  """IsRealDataType(Image argument_1, long bytes) -> bool"""
  return _DigitalMicrograph.IsRealDataType(*args)

def IsRGBDataType(*args):
  """IsRGBDataType(Image argument_1, long bytes) -> bool"""
  return _DigitalMicrograph.IsRGBDataType(*args)

def IsShortImage(*args):
  """IsShortImage(Image argument_1) -> bool"""
  return _DigitalMicrograph.IsShortImage(*args)

def KeepImage(*args):
  """KeepImage(Image argument_1)"""
  return _DigitalMicrograph.KeepImage(*args)

def LinePlotImageDisplayCountSlices(*args):
  """LinePlotImageDisplayCountSlices(LinePlotImageDisplay lpid) -> long"""
  return _DigitalMicrograph.LinePlotImageDisplayCountSlices(*args)

def LinePlotImageDisplayGetBaseIntensity(*args):
  """LinePlotImageDisplayGetBaseIntensity(LinePlotImageDisplay lpid) -> double"""
  return _DigitalMicrograph.LinePlotImageDisplayGetBaseIntensity(*args)

def LinePlotImageDisplayGetContrastLimits(*args):
  """LinePlotImageDisplayGetContrastLimits(LinePlotImageDisplay lpid)"""
  return _DigitalMicrograph.LinePlotImageDisplayGetContrastLimits(*args)

def LinePlotImageDisplayGetDisplayedChannels(*args):
  """LinePlotImageDisplayGetDisplayedChannels(LinePlotImageDisplay lpid)"""
  return _DigitalMicrograph.LinePlotImageDisplayGetDisplayedChannels(*args)

def LinePlotImageDisplayGetDoAutoSurvey(*args):
  """LinePlotImageDisplayGetDoAutoSurvey(LinePlotImageDisplay lpid)"""
  return _DigitalMicrograph.LinePlotImageDisplayGetDoAutoSurvey(*args)

def LinePlotImageDisplayGetSlice(*args):
  """LinePlotImageDisplayGetSlice(LinePlotImageDisplay lpid) -> long"""
  return _DigitalMicrograph.LinePlotImageDisplayGetSlice(*args)

def LinePlotImageDisplayGetSliceComponentColor(*args):
  """LinePlotImageDisplayGetSliceComponentColor(LinePlotImageDisplay lpid, long slice_index, long comp_index)"""
  return _DigitalMicrograph.LinePlotImageDisplayGetSliceComponentColor(*args)

def LinePlotImageDisplayGetSliceDrawingStyle(*args):
  """LinePlotImageDisplayGetSliceDrawingStyle(LinePlotImageDisplay lpid, long slice_index) -> long"""
  return _DigitalMicrograph.LinePlotImageDisplayGetSliceDrawingStyle(*args)

def LinePlotImageDisplayGetTrackingStyle(*args):
  """LinePlotImageDisplayGetTrackingStyle(LinePlotImageDisplay lpid, uint16 track_style_x, uint16 track_style_y)"""
  return _DigitalMicrograph.LinePlotImageDisplayGetTrackingStyle(*args)

def LinePlotImageDisplayIsBackgroundOn(*args):
  """LinePlotImageDisplayIsBackgroundOn(LinePlotImageDisplay lpid) -> bool"""
  return _DigitalMicrograph.LinePlotImageDisplayIsBackgroundOn(*args)

def LinePlotImageDisplayIsFilled(*args):
  """LinePlotImageDisplayIsFilled(LinePlotImageDisplay lpid) -> bool"""
  return _DigitalMicrograph.LinePlotImageDisplayIsFilled(*args)

def LinePlotImageDisplayIsFrameOn(*args):
  """LinePlotImageDisplayIsFrameOn(LinePlotImageDisplay lpid) -> bool"""
  return _DigitalMicrograph.LinePlotImageDisplayIsFrameOn(*args)

def LinePlotImageDisplayIsGridOn(*args):
  """LinePlotImageDisplayIsGridOn(LinePlotImageDisplay lpid) -> bool"""
  return _DigitalMicrograph.LinePlotImageDisplayIsGridOn(*args)

def LinePlotImageDisplaySetBackgroundOn(*args):
  """LinePlotImageDisplaySetBackgroundOn(LinePlotImageDisplay lpid, bool on)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetBackgroundOn(*args)

def LinePlotImageDisplaySetBaseIntensity(*args):
  """LinePlotImageDisplaySetBaseIntensity(LinePlotImageDisplay lpid, double base_intensity)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetBaseIntensity(*args)

def LinePlotImageDisplaySetContrastLimits(*args):
  """LinePlotImageDisplaySetContrastLimits(LinePlotImageDisplay lpid, float lowLimit, float highLimit)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetContrastLimits(*args)

def LinePlotImageDisplaySetDisplayedChannels(*args):
  """LinePlotImageDisplaySetDisplayedChannels(LinePlotImageDisplay lpid, float leftChannel, float rightChannel)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetDisplayedChannels(*args)

def LinePlotImageDisplaySetDoAutoSurvey(*args):
  """LinePlotImageDisplaySetDoAutoSurvey(LinePlotImageDisplay lpid, bool doAutoSurveyLow, bool doAutoSurveyHigh)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetDoAutoSurvey(*args)

def LinePlotImageDisplaySetFilled(*args):
  """LinePlotImageDisplaySetFilled(LinePlotImageDisplay lpid, bool on)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetFilled(*args)

def LinePlotImageDisplaySetFrameOn(*args):
  """LinePlotImageDisplaySetFrameOn(LinePlotImageDisplay lpid, bool on)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetFrameOn(*args)

def LinePlotImageDisplaySetGridOn(*args):
  """LinePlotImageDisplaySetGridOn(LinePlotImageDisplay lpid, bool on)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetGridOn(*args)

def LinePlotImageDisplaySetSlice(*args):
  """LinePlotImageDisplaySetSlice(LinePlotImageDisplay lpid, long slice)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetSlice(*args)

def LinePlotImageDisplaySetSliceComponentColor(*args):
  """
    LinePlotImageDisplaySetSliceComponentColor(LinePlotImageDisplay lpid, long slice_index, long comp_index, 
        double r, double g, double b)
    """
  return _DigitalMicrograph.LinePlotImageDisplaySetSliceComponentColor(*args)

def LinePlotImageDisplaySetSliceDrawingStyle(*args):
  """LinePlotImageDisplaySetSliceDrawingStyle(LinePlotImageDisplay lpid, long slice_index, long style)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetSliceDrawingStyle(*args)

def LinePlotImageDisplaySetTrackingStyle(*args):
  """LinePlotImageDisplaySetTrackingStyle(LinePlotImageDisplay lpid, uint16 track_style_x, uint16 track_style_y)"""
  return _DigitalMicrograph.LinePlotImageDisplaySetTrackingStyle(*args)

def LUDecomposition(*args):
  """LUDecomposition(Image a, Image b) -> Image"""
  return _DigitalMicrograph.LUDecomposition(*args)

def MaintainStatus():
  """MaintainStatus()"""
  return _DigitalMicrograph.MaintainStatus()

def MatrixDeterminant(*args):
  """MatrixDeterminant(Image a) -> float"""
  return _DigitalMicrograph.MatrixDeterminant(*args)

def MatrixInverse(*args):
  """MatrixInverse(Image a) -> Image"""
  return _DigitalMicrograph.MatrixInverse(*args)

def MatrixMultiply(*args):
  """MatrixMultiply(Image a, Image b) -> Image"""
  return _DigitalMicrograph.MatrixMultiply(*args)

def MatrixPrint(*args):
  """MatrixPrint(Image a)"""
  return _DigitalMicrograph.MatrixPrint(*args)

def MatrixTranspose(*args):
  """MatrixTranspose(Image a) -> Image"""
  return _DigitalMicrograph.MatrixTranspose(*args)

def MedianFilter(*args):
  """MedianFilter(Image source, long filterType, long size) -> Image"""
  return _DigitalMicrograph.MedianFilter(*args)

def ModelessDialog(*args):
  """ModelessDialog(char prompt, char buttonName, long semaphore)"""
  return _DigitalMicrograph.ModelessDialog(*args)

def ModelessFFT(*args):
  """ModelessFFT(Image argument_1, bool reduce)"""
  return _DigitalMicrograph.ModelessFFT(*args)

def MPClose(*args):
  """MPClose(Image image, long neighbors) -> Image"""
  return _DigitalMicrograph.MPClose(*args)

def MPDilate(*args):
  """MPDilate(Image image, long neighbors) -> Image"""
  return _DigitalMicrograph.MPDilate(*args)

def MPDistanceMap(*args):
  """MPDistanceMap(Image image) -> Image"""
  return _DigitalMicrograph.MPDistanceMap(*args)

def MPErode(*args):
  """MPErode(Image image, long neighbors) -> Image"""
  return _DigitalMicrograph.MPErode(*args)

def MPEuclideanDistanceMap(*args):
  """MPEuclideanDistanceMap(Image image) -> Image"""
  return _DigitalMicrograph.MPEuclideanDistanceMap(*args)

def MPExactDistanceMap(*args):
  """MPExactDistanceMap(Image image) -> Image"""
  return _DigitalMicrograph.MPExactDistanceMap(*args)

def MPOpen(*args):
  """MPOpen(Image image, long neighbors) -> Image"""
  return _DigitalMicrograph.MPOpen(*args)

def MPOutline(*args):
  """MPOutline(Image image) -> Image"""
  return _DigitalMicrograph.MPOutline(*args)

def NewAbstractMethod(*args):
  """NewAbstractMethod(String method_name, String method_signature) -> Function"""
  return _DigitalMicrograph.NewAbstractMethod(*args)

def NewArrowAnnotation(*args):
  """NewArrowAnnotation(float top, float left, float bottom, float right) -> Component"""
  return _DigitalMicrograph.NewArrowAnnotation(*args)

def NewBoxAnnotation(*args):
  """NewBoxAnnotation(float top, float left, float bottom, float right) -> Component"""
  return _DigitalMicrograph.NewBoxAnnotation(*args)

def NewCallbackFunction(*args):
  """NewCallbackFunction(String method_signature, void callback, uint32 linkage_style) -> Function"""
  return _DigitalMicrograph.NewCallbackFunction(*args)

def NewComponent(*args):
  """NewComponent(long type, float f1, float f2, float f3, float f4) -> Component"""
  return _DigitalMicrograph.NewComponent(*args)

def NewDoubleArrowAnnotation(*args):
  """NewDoubleArrowAnnotation(float top, float left, float bottom, float right) -> Component"""
  return _DigitalMicrograph.NewDoubleArrowAnnotation(*args)

def NewFunctionFromScript(*args):
  """NewFunctionFromScript(String script, String signature) -> Function"""
  return _DigitalMicrograph.NewFunctionFromScript(*args)

def NewGroupAnnotation():
  """NewGroupAnnotation() -> Component"""
  return _DigitalMicrograph.NewGroupAnnotation()

def NewImageDocument(*args):
  """NewImageDocument(char title) -> ImageDocument"""
  return _DigitalMicrograph.NewImageDocument(*args)

def NewImageDocumentFromFile(*args):
  """NewImageDocumentFromFile(char path_name) -> ImageDocument"""
  return _DigitalMicrograph.NewImageDocumentFromFile(*args)

def NewImageFromFile(*args):
  """NewImageFromFile(char file_path) -> Image"""
  return _DigitalMicrograph.NewImageFromFile(*args)

def NewLineAnnotation(*args):
  """NewLineAnnotation(float top, float left, float bottom, float right) -> Component"""
  return _DigitalMicrograph.NewLineAnnotation(*args)

def NewLiveFFT(*args):
  """NewLiveFFT(ImageDisplay imageDisplay, ROI roi, bool reduce) -> Image"""
  return _DigitalMicrograph.NewLiveFFT(*args)

def NewLiveHistogram(*args):
  """NewLiveHistogram(ImageDisplay imageDisplay, ROI roi, long num_channels) -> Image"""
  return _DigitalMicrograph.NewLiveHistogram(*args)

def NewLiveProfile(*args):
  """
    NewLiveProfile(ImageDisplay imageDisplay, float start_x, float start_y, 
        float end_x, float end_y, float width) -> Image
    """
  return _DigitalMicrograph.NewLiveProfile(*args)

def NewOvalAnnotation(*args):
  """NewOvalAnnotation(float top, float left, float bottom, float right) -> Component"""
  return _DigitalMicrograph.NewOvalAnnotation(*args)

def NewPictureAnnotation(*args):
  """NewPictureAnnotation(float top, float left, float bottom, float right, long picture) -> Component"""
  return _DigitalMicrograph.NewPictureAnnotation(*args)

def NewROI():
  """NewROI() -> ROI"""
  return _DigitalMicrograph.NewROI()

def NewScriptWindow(*args):
  """NewScriptWindow(String title, long top, long left, long bottom, long right) -> Window"""
  return _DigitalMicrograph.NewScriptWindow(*args)

def NewSemaphore():
  """NewSemaphore() -> long"""
  return _DigitalMicrograph.NewSemaphore()

def NewTagGroup():
  """NewTagGroup() -> TagGroup"""
  return _DigitalMicrograph.NewTagGroup()

def NewTagList():
  """NewTagList() -> TagGroup"""
  return _DigitalMicrograph.NewTagList()

def NewTextAnnotation(*args):
  """NewTextAnnotation(float left, float top, String text, float size) -> Component"""
  return _DigitalMicrograph.NewTextAnnotation(*args)

def NextImage(*args):
  """NextImage(Image argument_1) -> Image"""
  return _DigitalMicrograph.NextImage(*args)

def ObjectTransformCompose(*args):
  """
    ObjectTransformCompose(double i1_o_x, double i1_o_y, double i1_s_x, double i1_s_y, 
        double i2_o_x, double i2_o_y, double i2_s_x, 
        double i2_s_y)
    """
  return _DigitalMicrograph.ObjectTransformCompose(*args)

def ObjectTransformInvert(*args):
  """ObjectTransformInvert(double i_o_x, double i_o_y, double i_s_x, double i_s_y)"""
  return _DigitalMicrograph.ObjectTransformInvert(*args)

def ObjectTransformTransformPoint(*args):
  """
    ObjectTransformTransformPoint(double i_o_x, double i_o_y, double i_s_x, double i_s_y, 
        double i_p_x, double i_p_y)
    """
  return _DigitalMicrograph.ObjectTransformTransformPoint(*args)

def ObjectTransformTransformRect(*args):
  """
    ObjectTransformTransformRect(double i_o_x, double i_o_y, double i_s_x, double i_s_y, 
        double i_r_t, double i_r_l, double i_r_b, 
        double i_r_r)
    """
  return _DigitalMicrograph.ObjectTransformTransformRect(*args)

def ObjectTransformUntransformPoint(*args):
  """
    ObjectTransformUntransformPoint(double i_o_x, double i_o_y, double i_s_x, double i_s_y, 
        double i_p_x, double i_p_y)
    """
  return _DigitalMicrograph.ObjectTransformUntransformPoint(*args)

def ObjectTransformUntransformRect(*args):
  """
    ObjectTransformUntransformRect(double i_o_x, double i_o_y, double i_s_x, double i_s_y, 
        double i_r_t, double i_r_l, double i_r_b, 
        double i_r_r)
    """
  return _DigitalMicrograph.ObjectTransformUntransformRect(*args)

def OkCancelDialog(*args):
  """OkCancelDialog(char prompt) -> bool"""
  return _DigitalMicrograph.OkCancelDialog(*args)

def OkDialog(*args):
  """OkDialog(char prompt)"""
  return _DigitalMicrograph.OkDialog(*args)

def OpenAndSetProgressWindow(*args):
  """OpenAndSetProgressWindow(char line1, char line2, char line3)"""
  return _DigitalMicrograph.OpenAndSetProgressWindow(*args)

def OpenDialog(*args):
  """OpenDialog(char pathname) -> bool"""
  return _DigitalMicrograph.OpenDialog(*args)

def OpenFileForReading(*args):
  """OpenFileForReading(char fileName) -> DM_FileReference"""
  return _DigitalMicrograph.OpenFileForReading(*args)

def OpenFileForReadingAndWriting(*args):
  """OpenFileForReadingAndWriting(char fileName) -> DM_FileReference"""
  return _DigitalMicrograph.OpenFileForReadingAndWriting(*args)

def OpenFileForWriting(*args):
  """OpenFileForWriting(char fileName) -> DM_FileReference"""
  return _DigitalMicrograph.OpenFileForWriting(*args)

def OpenImage(*args):
  """OpenImage(char fileName) -> Image"""
  return _DigitalMicrograph.OpenImage(*args)

def OpenResultsWindow():
  """OpenResultsWindow()"""
  return _DigitalMicrograph.OpenResultsWindow()

def OpenTimeBar(*args):
  """OpenTimeBar(char prompt, long total)"""
  return _DigitalMicrograph.OpenTimeBar(*args)

def OptionDown():
  """OptionDown() -> bool"""
  return _DigitalMicrograph.OptionDown()

def PackedFFT(*args):
  """PackedFFT(Image source) -> Image"""
  return _DigitalMicrograph.PackedFFT(*args)

def PackedIFFT(*args):
  """PackedIFFT(Image source) -> Image"""
  return _DigitalMicrograph.PackedIFFT(*args)

def PackedToComplex(*args):
  """PackedToComplex(Image source) -> Image"""
  return _DigitalMicrograph.PackedToComplex(*args)

def PathAddParentIndirection(*args):
  """PathAddParentIndirection(String path) -> String"""
  return _DigitalMicrograph.PathAddParentIndirection(*args)

def PathBeginRelative():
  """PathBeginRelative() -> String"""
  return _DigitalMicrograph.PathBeginRelative()

def PathConcatenate(*args):
  """PathConcatenate(String initial_path, String final_path) -> String"""
  return _DigitalMicrograph.PathConcatenate(*args)

def PathExtractBaseName(*args):
  """PathExtractBaseName(String path, ulong path_type) -> String"""
  return _DigitalMicrograph.PathExtractBaseName(*args)

def PathExtractDirectory(*args):
  """PathExtractDirectory(String path, ulong path_type) -> String"""
  return _DigitalMicrograph.PathExtractDirectory(*args)

def PathExtractExtension(*args):
  """PathExtractExtension(String path, ulong path_type) -> String"""
  return _DigitalMicrograph.PathExtractExtension(*args)

def PathExtractFileName(*args):
  """PathExtractFileName(String path, ulong path_type) -> String"""
  return _DigitalMicrograph.PathExtractFileName(*args)

def PathExtractParentDirectory(*args):
  """PathExtractParentDirectory(String path, ulong path_type) -> String"""
  return _DigitalMicrograph.PathExtractParentDirectory(*args)

def PathGetFullpath(*args):
  """PathGetFullpath(String path) -> String"""
  return _DigitalMicrograph.PathGetFullpath(*args)

def Pi():
  """Pi() -> double"""
  return _DigitalMicrograph.Pi()

def PictureAnnotationSetPicture(*args):
  """PictureAnnotationSetPicture(Component comp, long picture)"""
  return _DigitalMicrograph.PictureAnnotationSetPicture(*args)

def PIctureGetBounds(*args):
  """PIctureGetBounds(long picture)"""
  return _DigitalMicrograph.PIctureGetBounds(*args)

def PrintImage(*args):
  """PrintImage(Image argument_1)"""
  return _DigitalMicrograph.PrintImage(*args)

def RasterImageDisplayAddThresholdToMask(*args):
  """
    RasterImageDisplayAddThresholdToMask(RasterImageDisplay rid, Image mask, float top, float left, 
        float bottom, float right)
    """
  return _DigitalMicrograph.RasterImageDisplayAddThresholdToMask(*args)

def RasterImageDisplayGetThresholdLimits(*args):
  """RasterImageDisplayGetThresholdLimits(RasterImageDisplay rid)"""
  return _DigitalMicrograph.RasterImageDisplayGetThresholdLimits(*args)

def RasterImageDisplayIsThresholdOn(*args):
  """RasterImageDisplayIsThresholdOn(RasterImageDisplay rid) -> bool"""
  return _DigitalMicrograph.RasterImageDisplayIsThresholdOn(*args)

def RasterImageDisplaySetThresholdLimits(*args):
  """RasterImageDisplaySetThresholdLimits(RasterImageDisplay rid, float low, float high)"""
  return _DigitalMicrograph.RasterImageDisplaySetThresholdLimits(*args)

def RasterImageDisplaySetThresholdOn(*args):
  """RasterImageDisplaySetThresholdOn(RasterImageDisplay rid, bool on)"""
  return _DigitalMicrograph.RasterImageDisplaySetThresholdOn(*args)

def RasterizeRGB(*args):
  """RasterizeRGB(Image source, bool dither) -> Image"""
  return _DigitalMicrograph.RasterizeRGB(*args)

def RawCopyImage(*args):
  """RawCopyImage(Image src, Image dst)"""
  return _DigitalMicrograph.RawCopyImage(*args)

def ReadFile(*args):
  """ReadFile(DM_FileReference file, long count) -> String"""
  return _DigitalMicrograph.ReadFile(*args)

def ReadFileLine(*args):
  """ReadFileLine(DM_FileReference file, String string) -> bool"""
  return _DigitalMicrograph.ReadFileLine(*args)

def ReadRawStream(*args):
  """ReadRawStream(long rawStream, long data, long length)"""
  return _DigitalMicrograph.ReadRawStream(*args)

def RealFFT(*args):
  """RealFFT(Image source) -> Image"""
  return _DigitalMicrograph.RealFFT(*args)

def RealIFFT(*args):
  """RealIFFT(Image source) -> Image"""
  return _DigitalMicrograph.RealIFFT(*args)

def Reduce(*args):
  """Reduce(Image argument_1)"""
  return _DigitalMicrograph.Reduce(*args)

def ReducedFFT(*args):
  """ReducedFFT(Image source) -> Image"""
  return _DigitalMicrograph.ReducedFFT(*args)

def RegisterCustomMenu(*args):
  """RegisterCustomMenu(long menuHandler) -> long"""
  return _DigitalMicrograph.RegisterCustomMenu(*args)

def RegisterCustomTool(*args):
  """RegisterCustomTool(char icon, long toolInstance) -> long"""
  return _DigitalMicrograph.RegisterCustomTool(*args)

def RegisterMenuAdjustment(*args):
  """RegisterMenuAdjustment(char menuName, char adjustedMenuName)"""
  return _DigitalMicrograph.RegisterMenuAdjustment(*args)

def RegisterObjectListener(*args):
  """RegisterObjectListener(long object, long proc, long refCon) -> long"""
  return _DigitalMicrograph.RegisterObjectListener(*args)

def RegisterScriptPalette(*args):
  """RegisterScriptPalette(ScriptObject argument_1, char type, char name)"""
  return _DigitalMicrograph.RegisterScriptPalette(*args)

def RegisterSystemIdle(*args):
  """RegisterSystemIdle(SystemIdleProc SystemIdleProc)"""
  return _DigitalMicrograph.RegisterSystemIdle(*args)

def ReleaseDataPtr(*args):
  """ReleaseDataPtr(Image argument_1)"""
  return _DigitalMicrograph.ReleaseDataPtr(*args)

def ReleaseSemaphore(*args):
  """ReleaseSemaphore(long argument_1)"""
  return _DigitalMicrograph.ReleaseSemaphore(*args)

def RemoveCustomTool(*args):
  """RemoveCustomTool(long doStateProc)"""
  return _DigitalMicrograph.RemoveCustomTool(*args)

def RemoveFunction(*args):
  """RemoveFunction(void fnPtr)"""
  return _DigitalMicrograph.RemoveFunction(*args)

def RemovePathFromCopyToImageList(*args):
  """RemovePathFromCopyToImageList(char path)"""
  return _DigitalMicrograph.RemovePathFromCopyToImageList(*args)

def RemoveScriptFromMenu(*args):
  """RemoveScriptFromMenu(char commandName, char menuName, char optionalSubMenuName)"""
  return _DigitalMicrograph.RemoveScriptFromMenu(*args)

def ResetContrastLimitsAlways(*args):
  """ResetContrastLimitsAlways(Image argument_1)"""
  return _DigitalMicrograph.ResetContrastLimitsAlways(*args)

def Result(*args):
  """Result(String argument_1)"""
  return _DigitalMicrograph.Result(*args)

def ROIAddToMask(*args):
  """
    ROIAddToMask(ROI roi, Image mask, float top, float left, float bottom, 
        float right)
    """
  return _DigitalMicrograph.ROIAddToMask(*args)

def ROIAddVertex(*args):
  """ROIAddVertex(ROI roi, float x, float y)"""
  return _DigitalMicrograph.ROIAddVertex(*args)

def ROIClearVertices(*args):
  """ROIClearVertices(ROI roi)"""
  return _DigitalMicrograph.ROIClearVertices(*args)

def ROIClone(*args):
  """ROIClone(ROI roi) -> ROI"""
  return _DigitalMicrograph.ROIClone(*args)

def ROIContainsPoint(*args):
  """ROIContainsPoint(ROI roi, float x, float y) -> bool"""
  return _DigitalMicrograph.ROIContainsPoint(*args)

def ROICountVertices(*args):
  """ROICountVertices(ROI roi) -> long"""
  return _DigitalMicrograph.ROICountVertices(*args)

def ROIDeleteVertex(*args):
  """ROIDeleteVertex(ROI roi, long index)"""
  return _DigitalMicrograph.ROIDeleteVertex(*args)

def ROIGetColor(*args):
  """ROIGetColor(ROI roi)"""
  return _DigitalMicrograph.ROIGetColor(*args)

def ROIGetDeletable(*args):
  """ROIGetDeletable(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIGetDeletable(*args)

def ROIGetID(*args):
  """ROIGetID(ROI roi) -> long"""
  return _DigitalMicrograph.ROIGetID(*args)

def ROIGetLabel(*args):
  """ROIGetLabel(ROI roi) -> String"""
  return _DigitalMicrograph.ROIGetLabel(*args)

def ROIGetLine(*args):
  """ROIGetLine(ROI roi)"""
  return _DigitalMicrograph.ROIGetLine(*args)

def ROIGetMoveable(*args):
  """ROIGetMoveable(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIGetMoveable(*args)

def ROIGetName(*args):
  """ROIGetName(ROI roi) -> String"""
  return _DigitalMicrograph.ROIGetName(*args)

def ROIGetPoint(*args):
  """ROIGetPoint(ROI roi)"""
  return _DigitalMicrograph.ROIGetPoint(*args)

def ROIGetRange(*args):
  """ROIGetRange(ROI roi)"""
  return _DigitalMicrograph.ROIGetRange(*args)

def ROIGetRectangle(*args):
  """ROIGetRectangle(ROI roi)"""
  return _DigitalMicrograph.ROIGetRectangle(*args)

def ROIGetResizable(*args):
  """ROIGetResizable(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIGetResizable(*args)

def ROIGetVertex(*args):
  """ROIGetVertex(ROI roi, long index)"""
  return _DigitalMicrograph.ROIGetVertex(*args)

def ROIGetVolatile(*args):
  """ROIGetVolatile(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIGetVolatile(*args)

def ROIInsertVertex(*args):
  """ROIInsertVertex(ROI roi, long before, float x, float y)"""
  return _DigitalMicrograph.ROIInsertVertex(*args)

def ROIIsClosed(*args):
  """ROIIsClosed(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsClosed(*args)

def ROIIsLine(*args):
  """ROIIsLine(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsLine(*args)

def ROIIsPoint(*args):
  """ROIIsPoint(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsPoint(*args)

def ROIIsRange(*args):
  """ROIIsRange(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsRange(*args)

def ROIIsRectangle(*args):
  """ROIIsRectangle(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsRectangle(*args)

def ROIIsValid(*args):
  """ROIIsValid(ROI roi) -> bool"""
  return _DigitalMicrograph.ROIIsValid(*args)

def ROISetColor(*args):
  """ROISetColor(ROI roi, float r, float g, float b)"""
  return _DigitalMicrograph.ROISetColor(*args)

def ROISetDeletable(*args):
  """ROISetDeletable(ROI roi, bool deletable)"""
  return _DigitalMicrograph.ROISetDeletable(*args)

def ROISetIsClosed(*args):
  """ROISetIsClosed(ROI roi, bool is_closed)"""
  return _DigitalMicrograph.ROISetIsClosed(*args)

def ROISetLabel(*args):
  """ROISetLabel(ROI roi, String name)"""
  return _DigitalMicrograph.ROISetLabel(*args)

def ROISetLine(*args):
  """ROISetLine(ROI roi, float sx, float sy, float ex, float ey)"""
  return _DigitalMicrograph.ROISetLine(*args)

def ROISetMoveable(*args):
  """ROISetMoveable(ROI roi, bool moveable)"""
  return _DigitalMicrograph.ROISetMoveable(*args)

def ROISetName(*args):
  """ROISetName(ROI roi, String name)"""
  return _DigitalMicrograph.ROISetName(*args)

def ROISetPoint(*args):
  """ROISetPoint(ROI roi, float x, float y)"""
  return _DigitalMicrograph.ROISetPoint(*args)

def ROISetRange(*args):
  """ROISetRange(ROI roi, float start, float end)"""
  return _DigitalMicrograph.ROISetRange(*args)

def ROISetRectangle(*args):
  """ROISetRectangle(ROI roi, float top, float left, float bottom, float right)"""
  return _DigitalMicrograph.ROISetRectangle(*args)

def ROISetRegionToComplexValue(*args):
  """
    ROISetRegionToComplexValue(ROI roi, Image mask, complex128_t value, float top, 
        float left, float bottom, float right)
    """
  return _DigitalMicrograph.ROISetRegionToComplexValue(*args)

def ROISetRegionToRGBValue(*args):
  """
    ROISetRegionToRGBValue(ROI roi, Image mask, rgba_uint8_os_t value, float top, 
        float left, float bottom, float right)
    """
  return _DigitalMicrograph.ROISetRegionToRGBValue(*args)

def ROISetRegionToValue(*args):
  """
    ROISetRegionToValue(ROI roi, Image mask, double value, float top, float left, 
        float bottom, float right)
    """
  return _DigitalMicrograph.ROISetRegionToValue(*args)

def ROISetResizable(*args):
  """ROISetResizable(ROI roi, bool resizable)"""
  return _DigitalMicrograph.ROISetResizable(*args)

def ROISetVertex(*args):
  """ROISetVertex(ROI roi, long index, float x, float y)"""
  return _DigitalMicrograph.ROISetVertex(*args)

def ROISetVolatile(*args):
  """ROISetVolatile(ROI roi, bool is_volatile)"""
  return _DigitalMicrograph.ROISetVolatile(*args)

def Rotate(*args):
  """Rotate(Image source, float radians) -> Image"""
  return _DigitalMicrograph.Rotate(*args)

def RotateLeft(*args):
  """RotateLeft(Image argument_1)"""
  return _DigitalMicrograph.RotateLeft(*args)

def RotateRight(*args):
  """RotateRight(Image argument_1)"""
  return _DigitalMicrograph.RotateRight(*args)

def Save(*args):
  """Save(Image argument_1)"""
  return _DigitalMicrograph.Save(*args)

def SaveAsDialog(*args):
  """SaveAsDialog(char prompt, char defaultName, char saveName) -> bool"""
  return _DigitalMicrograph.SaveAsDialog(*args)

def SaveAsGatan(*args):
  """SaveAsGatan(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsGatan(*args)

def SaveAsGIF(*args):
  """SaveAsGIF(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsGIF(*args)

def SaveAsPCX(*args):
  """SaveAsPCX(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsPCX(*args)

def SaveAsPICT(*args):
  """SaveAsPICT(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsPICT(*args)

def SaveAsRawData(*args):
  """SaveAsRawData(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsRawData(*args)

def SaveAsSmallHeader(*args):
  """SaveAsSmallHeader(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsSmallHeader(*args)

def SaveAsText(*args):
  """SaveAsText(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsText(*args)

def SaveAsTIFF(*args):
  """SaveAsTIFF(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveAsTIFF(*args)

def SaveImage(*args):
  """SaveImage(Image argument_1, char fileName)"""
  return _DigitalMicrograph.SaveImage(*args)

def ScrapClear(*args):
  """ScrapClear(Image argument_1)"""
  return _DigitalMicrograph.ScrapClear(*args)

def ScrapCopy(*args):
  """ScrapCopy(Image argument_1)"""
  return _DigitalMicrograph.ScrapCopy(*args)

def ScrapGetLocation(*args):
  """ScrapGetLocation(Image argument_1)"""
  return _DigitalMicrograph.ScrapGetLocation(*args)

def ScrapGetSize(*args):
  """ScrapGetSize(Image argument_1)"""
  return _DigitalMicrograph.ScrapGetSize(*args)

def ScrapMerge(*args):
  """ScrapMerge(Image argument_1)"""
  return _DigitalMicrograph.ScrapMerge(*args)

def ScrapPaste(*args):
  """ScrapPaste(Image argument_1)"""
  return _DigitalMicrograph.ScrapPaste(*args)

def ScrapPasteNew():
  """ScrapPasteNew()"""
  return _DigitalMicrograph.ScrapPasteNew()

def ScrapSetLocation(*args):
  """ScrapSetLocation(Image argument_1, long top, long left)"""
  return _DigitalMicrograph.ScrapSetLocation(*args)

def ScreenGetBounds(*args):
  """ScreenGetBounds(long index)"""
  return _DigitalMicrograph.ScreenGetBounds(*args)

def ScreenGetWorkArea(*args):
  """ScreenGetWorkArea(long index)"""
  return _DigitalMicrograph.ScreenGetWorkArea(*args)

def ScriptInterfaceGenerateStubs(*args):
  """ScriptInterfaceGenerateStubs(char interface_name, String str_h, String str_cp)"""
  return _DigitalMicrograph.ScriptInterfaceGenerateStubs(*args)

def ScriptObjectGetClassToken(*args):
  """ScriptObjectGetClassToken(ScriptObject scriptObject, String class_name) -> ulong"""
  return _DigitalMicrograph.ScriptObjectGetClassToken(*args)

def ScriptObjectGetID(*args):
  """ScriptObjectGetID(ScriptObject scriptObject) -> long"""
  return _DigitalMicrograph.ScriptObjectGetID(*args)

def ScriptObjectIsValid(*args):
  """ScriptObjectIsValid(ScriptObject scriptObject) -> bool"""
  return _DigitalMicrograph.ScriptObjectIsValid(*args)

def ScriptWindowExecute(*args):
  """ScriptWindowExecute(Window window)"""
  return _DigitalMicrograph.ScriptWindowExecute(*args)

def SelectImage(*args):
  """SelectImage(Image argument_1)"""
  return _DigitalMicrograph.SelectImage(*args)

def SetColorMode(*args):
  """SetColorMode(Image argument_1, short mode)"""
  return _DigitalMicrograph.SetColorMode(*args)

def SetComplexMode(*args):
  """SetComplexMode(Image argument_1, short mode)"""
  return _DigitalMicrograph.SetComplexMode(*args)

def SetContrastMode(*args):
  """SetContrastMode(Image argument_1, short mode)"""
  return _DigitalMicrograph.SetContrastMode(*args)

def SetCustomCLUT(*args):
  """SetCustomCLUT(Image argument_1, Image clutImage)"""
  return _DigitalMicrograph.SetCustomCLUT(*args)

def SetDisplayType(*args):
  """SetDisplayType(Image argument_1, long displayType)"""
  return _DigitalMicrograph.SetDisplayType(*args)

def SetDoCreateCustomIcon(*args):
  """SetDoCreateCustomIcon(Image image, bool doCreateCustomIcon)"""
  return _DigitalMicrograph.SetDoCreateCustomIcon(*args)

def SetDoSavePreview(*args):
  """SetDoSavePreview(Image image, bool doSavePreview)"""
  return _DigitalMicrograph.SetDoSavePreview(*args)

def SetEstimatedMinMax(*args):
  """SetEstimatedMinMax(Image argument_1, float min, float max)"""
  return _DigitalMicrograph.SetEstimatedMinMax(*args)

def SetImagePositionWithinWindow(*args):
  """SetImagePositionWithinWindow(Image argument_1, long x, long y)"""
  return _DigitalMicrograph.SetImagePositionWithinWindow(*args)

def SetInversionMode(*args):
  """SetInversionMode(Image argument_1, bool inverted)"""
  return _DigitalMicrograph.SetInversionMode(*args)

def SetLimits(*args):
  """SetLimits(Image argument_1, float low, float high)"""
  return _DigitalMicrograph.SetLimits(*args)

def SetMinContrast(*args):
  """SetMinContrast(Image argument_1, float minContrast)"""
  return _DigitalMicrograph.SetMinContrast(*args)

def SetName(*args):
  """SetName(Image argument_1, char name)"""
  return _DigitalMicrograph.SetName(*args)

def SetOrigin(*args):
  """SetOrigin(Image argument_1, float x, float y)"""
  return _DigitalMicrograph.SetOrigin(*args)

def SetPixel(*args):
  """SetPixel(Image argument_1, long x, long y, float value)"""
  return _DigitalMicrograph.SetPixel(*args)

def SetRawStreamPos(*args):
  """SetRawStreamPos(long rawStream, long mode, long offset)"""
  return _DigitalMicrograph.SetRawStreamPos(*args)

def SetScale(*args):
  """SetScale(Image argument_1, float x, float y)"""
  return _DigitalMicrograph.SetScale(*args)

def SetSelection(*args):
  """
    SetSelection(Image argument_1, long top, long left, long bottom, 
        long right)
    """
  return _DigitalMicrograph.SetSelection(*args)

def SetSurvey(*args):
  """SetSurvey(Image argument_1, bool surveyOnOff)"""
  return _DigitalMicrograph.SetSurvey(*args)

def SetSurveyTechnique(*args):
  """SetSurveyTechnique(Image argument_1, short mode)"""
  return _DigitalMicrograph.SetSurveyTechnique(*args)

def SetToZero(*args):
  """SetToZero(Image argument_1)"""
  return _DigitalMicrograph.SetToZero(*args)

def SetUnitString(*args):
  """SetUnitString(Image argument_1, char unitString)"""
  return _DigitalMicrograph.SetUnitString(*args)

def SetUsesToZero(*args):
  """SetUsesToZero(Image argument_1)"""
  return _DigitalMicrograph.SetUsesToZero(*args)

def SetWindowBounds(*args):
  """
    SetWindowBounds(Image argument_1, long top, long left, long bottom, 
        long right)
    """
  return _DigitalMicrograph.SetWindowBounds(*args)

def SetWindowPosition(*args):
  """SetWindowPosition(Image argument_1, long xPos, long yPos)"""
  return _DigitalMicrograph.SetWindowPosition(*args)

def SetWindowSize(*args):
  """SetWindowSize(Image argument_1, long width, long height)"""
  return _DigitalMicrograph.SetWindowSize(*args)

def SetZoom(*args):
  """SetZoom(Image argument_1, float zoom)"""
  return _DigitalMicrograph.SetZoom(*args)

def ShiftCenter(*args):
  """ShiftCenter(Image image)"""
  return _DigitalMicrograph.ShiftCenter(*args)

def ShiftDown():
  """ShiftDown() -> bool"""
  return _DigitalMicrograph.ShiftDown()

def ShowAlert(*args):
  """ShowAlert(char prompt, long alertStyle)"""
  return _DigitalMicrograph.ShowAlert(*args)

def Sleep(*args):
  """Sleep(float seconds)"""
  return _DigitalMicrograph.Sleep(*args)

def SpaceDown():
  """SpaceDown() -> bool"""
  return _DigitalMicrograph.SpaceDown()

def StopAcquisitionDaemon(*args):
  """StopAcquisitionDaemon(Image argument_1)"""
  return _DigitalMicrograph.StopAcquisitionDaemon(*args)

def StopAllAcquisitionDaemons():
  """StopAllAcquisitionDaemons()"""
  return _DigitalMicrograph.StopAllAcquisitionDaemons()

def StringCompare(*args):
  """StringCompare(String s1, String s2) -> long"""
  return _DigitalMicrograph.StringCompare(*args)

def StringConvertToEncoding(*args):
  """StringConvertToEncoding(String s1, ulong encoding_id) -> String"""
  return _DigitalMicrograph.StringConvertToEncoding(*args)

def StringIsValid(*args):
  """StringIsValid(String str) -> bool"""
  return _DigitalMicrograph.StringIsValid(*args)

def SurfacePlotImageDisplayGetCubeAxes(*args):
  """SurfacePlotImageDisplayGetCubeAxes(SurfacePlotImageDisplay spid)"""
  return _DigitalMicrograph.SurfacePlotImageDisplayGetCubeAxes(*args)

def SurfacePlotImageDisplayGetCubePoint(*args):
  """SurfacePlotImageDisplayGetCubePoint(SurfacePlotImageDisplay spid, long which_point)"""
  return _DigitalMicrograph.SurfacePlotImageDisplayGetCubePoint(*args)

def SurfacePlotImageDisplayIsShadingOn(*args):
  """SurfacePlotImageDisplayIsShadingOn(SurfacePlotImageDisplay spid) -> bool"""
  return _DigitalMicrograph.SurfacePlotImageDisplayIsShadingOn(*args)

def SurfacePlotImageDisplaySetCubeAxes(*args):
  """
    SurfacePlotImageDisplaySetCubeAxes(SurfacePlotImageDisplay spid, float x_axis_x, float x_axis_y, 
        float y_axis_x, float y_axis_y, float z_axis)
    """
  return _DigitalMicrograph.SurfacePlotImageDisplaySetCubeAxes(*args)

def SurfacePlotImageDisplaySetShadingOn(*args):
  """SurfacePlotImageDisplaySetShadingOn(SurfacePlotImageDisplay spid, bool on)"""
  return _DigitalMicrograph.SurfacePlotImageDisplaySetShadingOn(*args)

def SVDecomposition(*args):
  """SVDecomposition(Image a, Image b) -> Image"""
  return _DigitalMicrograph.SVDecomposition(*args)

def SVDFit(*args):
  """SVDFit(Image a, Image b, float tolerance) -> Image"""
  return _DigitalMicrograph.SVDFit(*args)

def SwapByteOrder(*args):
  """SwapByteOrder(Image argument_1)"""
  return _DigitalMicrograph.SwapByteOrder(*args)

def SwapWordOrder(*args):
  """SwapWordOrder(Image argument_1)"""
  return _DigitalMicrograph.SwapWordOrder(*args)

def TagGroupAddLabeledTagGroup(*args):
  """TagGroupAddLabeledTagGroup(TagGroup tagGroup, char label, TagGroup newGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupAddLabeledTagGroup(*args)

def TagGroupAddTagGroupAfter(*args):
  """TagGroupAddTagGroupAfter(TagGroup tagList, long ref_index, TagGroup newGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupAddTagGroupAfter(*args)

def TagGroupAddTagGroupAtBeginning(*args):
  """TagGroupAddTagGroupAtBeginning(TagGroup tagList, TagGroup newGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupAddTagGroupAtBeginning(*args)

def TagGroupAddTagGroupAtEnd(*args):
  """TagGroupAddTagGroupAtEnd(TagGroup tagList, TagGroup newGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupAddTagGroupAtEnd(*args)

def TagGroupAddTagGroupBefore(*args):
  """TagGroupAddTagGroupBefore(TagGroup tagList, long ref_index, TagGroup newGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupAddTagGroupBefore(*args)

def TagGroupClone(*args):
  """TagGroupClone(TagGroup tagGroup) -> TagGroup"""
  return _DigitalMicrograph.TagGroupClone(*args)

def TagGroupCopyTag(*args):
  """TagGroupCopyTag(TagGroup tagGroup, TagGroup srcGroup, long srcIndex) -> long"""
  return _DigitalMicrograph.TagGroupCopyTag(*args)

def TagGroupCopyTagsFrom(*args):
  """TagGroupCopyTagsFrom(TagGroup tagGroup, TagGroup srcGroup)"""
  return _DigitalMicrograph.TagGroupCopyTagsFrom(*args)

def TagGroupCopyTagToIndex(*args):
  """
    TagGroupCopyTagToIndex(TagGroup tagGroup, long dstIndex, TagGroup srcGroup, 
        long srcIndex)
    """
  return _DigitalMicrograph.TagGroupCopyTagToIndex(*args)

def TagGroupCountTags(*args):
  """TagGroupCountTags(TagGroup tagGroup) -> long"""
  return _DigitalMicrograph.TagGroupCountTags(*args)

def TagGroupCreateGroupTagAfter(*args):
  """TagGroupCreateGroupTagAfter(TagGroup tagList, long ref_index) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateGroupTagAfter(*args)

def TagGroupCreateGroupTagAtBeginning(*args):
  """TagGroupCreateGroupTagAtBeginning(TagGroup tagList) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateGroupTagAtBeginning(*args)

def TagGroupCreateGroupTagAtEnd(*args):
  """TagGroupCreateGroupTagAtEnd(TagGroup tagList) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateGroupTagAtEnd(*args)

def TagGroupCreateGroupTagBefore(*args):
  """TagGroupCreateGroupTagBefore(TagGroup tagList, long ref_index) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateGroupTagBefore(*args)

def TagGroupCreateListTagAfter(*args):
  """TagGroupCreateListTagAfter(TagGroup tagList, long ref_index) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateListTagAfter(*args)

def TagGroupCreateListTagAtBeginning(*args):
  """TagGroupCreateListTagAtBeginning(TagGroup tagList) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateListTagAtBeginning(*args)

def TagGroupCreateListTagAtEnd(*args):
  """TagGroupCreateListTagAtEnd(TagGroup tagList) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateListTagAtEnd(*args)

def TagGroupCreateListTagBefore(*args):
  """TagGroupCreateListTagBefore(TagGroup tagList, long ref_index) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateListTagBefore(*args)

def TagGroupCreateNewLabeledGroup(*args):
  """TagGroupCreateNewLabeledGroup(TagGroup tagGroup, char label) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateNewLabeledGroup(*args)

def TagGroupCreateNewLabeledList(*args):
  """TagGroupCreateNewLabeledList(TagGroup tagGroup, char label) -> TagGroup"""
  return _DigitalMicrograph.TagGroupCreateNewLabeledList(*args)

def TagGroupCreateNewLabeledTag(*args):
  """TagGroupCreateNewLabeledTag(TagGroup tagGroup, char label) -> long"""
  return _DigitalMicrograph.TagGroupCreateNewLabeledTag(*args)

def TagGroupCreateNewTagAfter(*args):
  """TagGroupCreateNewTagAfter(TagGroup tagList, long ref_index) -> long"""
  return _DigitalMicrograph.TagGroupCreateNewTagAfter(*args)

def TagGroupCreateNewTagAtBeginning(*args):
  """TagGroupCreateNewTagAtBeginning(TagGroup tagList) -> long"""
  return _DigitalMicrograph.TagGroupCreateNewTagAtBeginning(*args)

def TagGroupCreateNewTagAtEnd(*args):
  """TagGroupCreateNewTagAtEnd(TagGroup tagList) -> long"""
  return _DigitalMicrograph.TagGroupCreateNewTagAtEnd(*args)

def TagGroupCreateNewTagBefore(*args):
  """TagGroupCreateNewTagBefore(TagGroup tagList, long ref_index) -> long"""
  return _DigitalMicrograph.TagGroupCreateNewTagBefore(*args)

def TagGroupDeleteAllTags(*args):
  """TagGroupDeleteAllTags(TagGroup tagGroup)"""
  return _DigitalMicrograph.TagGroupDeleteAllTags(*args)

def TagGroupDeleteTagWithIndex(*args):
  """TagGroupDeleteTagWithIndex(TagGroup taGroup, long index)"""
  return _DigitalMicrograph.TagGroupDeleteTagWithIndex(*args)

def TagGroupDeleteTagWithLabel(*args):
  """TagGroupDeleteTagWithLabel(TagGroup tagGroup, char tagPath)"""
  return _DigitalMicrograph.TagGroupDeleteTagWithLabel(*args)

def TagGroupDoesTagExist(*args):
  """TagGroupDoesTagExist(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupDoesTagExist(*args)

def TagGroupExecuteScriptGroup(*args):
  """TagGroupExecuteScriptGroup(TagGroup tagGroup, char form)"""
  return _DigitalMicrograph.TagGroupExecuteScriptGroup(*args)

def TagGroupGetIndexedTagAsArray(*args):
  """TagGroupGetIndexedTagAsArray(TagGroup tagGroup, ulong index, Image image) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsArray(*args)

def TagGroupGetIndexedTagAsBoolean(*args):
  """TagGroupGetIndexedTagAsBoolean(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsBoolean(*args)

def TagGroupGetIndexedTagAsDouble(*args):
  """TagGroupGetIndexedTagAsDouble(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsDouble(*args)

def TagGroupGetIndexedTagAsDoubleComplex(*args):
  """TagGroupGetIndexedTagAsDoubleComplex(TagGroup tagGroup, long index, complex128_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsDoubleComplex(*args)

def TagGroupGetIndexedTagAsEightBitColor(*args):
  """TagGroupGetIndexedTagAsEightBitColor(TagGroup tagGroup, long index, rgba_uint8_os_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsEightBitColor(*args)

def TagGroupGetIndexedTagAsFloat(*args):
  """TagGroupGetIndexedTagAsFloat(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsFloat(*args)

def TagGroupGetIndexedTagAsFloatComplex(*args):
  """TagGroupGetIndexedTagAsFloatComplex(TagGroup tagGroup, long index, complex128_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsFloatComplex(*args)

def TagGroupGetIndexedTagAsFloatPoint(*args):
  """TagGroupGetIndexedTagAsFloatPoint(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsFloatPoint(*args)

def TagGroupGetIndexedTagAsFloatRect(*args):
  """TagGroupGetIndexedTagAsFloatRect(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsFloatRect(*args)

def TagGroupGetIndexedTagAsLong(*args):
  """TagGroupGetIndexedTagAsLong(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsLong(*args)

def TagGroupGetIndexedTagAsLongPoint(*args):
  """TagGroupGetIndexedTagAsLongPoint(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsLongPoint(*args)

def TagGroupGetIndexedTagAsLongRect(*args):
  """TagGroupGetIndexedTagAsLongRect(TagGroup tagGroup, long index) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsLongRect(*args)

def TagGroupGetIndexedTagAsShort(*args):
  """TagGroupGetIndexedTagAsShort(TagGroup tagGroup, long index, short number) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsShort(*args)

def TagGroupGetIndexedTagAsShortPoint(*args):
  """TagGroupGetIndexedTagAsShortPoint(TagGroup tagGroup, long index, short x, short y) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsShortPoint(*args)

def TagGroupGetIndexedTagAsShortRect(*args):
  """
    TagGroupGetIndexedTagAsShortRect(TagGroup tagGroup, long index, short t, short l, short b, 
        short r) -> bool
    """
  return _DigitalMicrograph.TagGroupGetIndexedTagAsShortRect(*args)

def TagGroupGetIndexedTagAsString(*args):
  """TagGroupGetIndexedTagAsString(TagGroup tagGroup, long index, String str) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsString(*args)

def TagGroupGetIndexedTagAsTagGroup(*args):
  """TagGroupGetIndexedTagAsTagGroup(TagGroup tagGroup, long index, TagGroup subGroup) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsTagGroup(*args)

def TagGroupGetIndexedTagAsText(*args):
  """TagGroupGetIndexedTagAsText(TagGroup tagGroup, long index, String str) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsText(*args)

def TagGroupGetIndexedTagAsUInt16(*args):
  """TagGroupGetIndexedTagAsUInt16(TagGroup tagGroup, long index, uint16 number) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsUInt16(*args)

def TagGroupGetIndexedTagAsUInt32(*args):
  """TagGroupGetIndexedTagAsUInt32(TagGroup tagGroup, long index, ulong number) -> bool"""
  return _DigitalMicrograph.TagGroupGetIndexedTagAsUInt32(*args)

def TagGroupGetOrCreateTagGroup(*args):
  """TagGroupGetOrCreateTagGroup(TagGroup tagGroup, char tagPath) -> TagGroup"""
  return _DigitalMicrograph.TagGroupGetOrCreateTagGroup(*args)

def TagGroupGetOrCreateTagList(*args):
  """TagGroupGetOrCreateTagList(TagGroup tagGroup, char tagPath) -> TagGroup"""
  return _DigitalMicrograph.TagGroupGetOrCreateTagList(*args)

def TagGroupGetSeeds(*args):
  """TagGroupGetSeeds(TagGroup tagGroup) -> long"""
  return _DigitalMicrograph.TagGroupGetSeeds(*args)

def TagGroupGetTagAsArray(*args):
  """TagGroupGetTagAsArray(TagGroup tagGroup, char tagPath, Image image) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsArray(*args)

def TagGroupGetTagAsBoolean(*args):
  """TagGroupGetTagAsBoolean(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsBoolean(*args)

def TagGroupGetTagAsDouble(*args):
  """TagGroupGetTagAsDouble(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsDouble(*args)

def TagGroupGetTagAsDoubleComplex(*args):
  """TagGroupGetTagAsDoubleComplex(TagGroup tagGroup, char tagPath, complex128_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsDoubleComplex(*args)

def TagGroupGetTagAsEightBitColor(*args):
  """TagGroupGetTagAsEightBitColor(TagGroup tagGroup, char tagPath, rgba_uint8_os_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsEightBitColor(*args)

def TagGroupGetTagAsFloat(*args):
  """TagGroupGetTagAsFloat(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsFloat(*args)

def TagGroupGetTagAsFloatComplex(*args):
  """TagGroupGetTagAsFloatComplex(TagGroup tagGroup, char tagPath, complex128_t c) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsFloatComplex(*args)

def TagGroupGetTagAsFloatPoint(*args):
  """TagGroupGetTagAsFloatPoint(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsFloatPoint(*args)

def TagGroupGetTagAsFloatRect(*args):
  """TagGroupGetTagAsFloatRect(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsFloatRect(*args)

def TagGroupGetTagAsLong(*args):
  """TagGroupGetTagAsLong(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsLong(*args)

def TagGroupGetTagAsLongPoint(*args):
  """TagGroupGetTagAsLongPoint(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsLongPoint(*args)

def TagGroupGetTagAsLongRect(*args):
  """TagGroupGetTagAsLongRect(TagGroup tagGroup, char tagPath) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsLongRect(*args)

def TagGroupGetTagAsShort(*args):
  """TagGroupGetTagAsShort(TagGroup tagGroup, char tagPath, short number) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsShort(*args)

def TagGroupGetTagAsShortPoint(*args):
  """TagGroupGetTagAsShortPoint(TagGroup tagGroup, char tagPath, short x, short y) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsShortPoint(*args)

def TagGroupGetTagAsShortRect(*args):
  """
    TagGroupGetTagAsShortRect(TagGroup tagGroup, char tagPath, short t, short l, 
        short b, short r) -> bool
    """
  return _DigitalMicrograph.TagGroupGetTagAsShortRect(*args)

def TagGroupGetTagAsString(*args):
  """TagGroupGetTagAsString(TagGroup tagGroup, char tagPath, String str) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsString(*args)

def TagGroupGetTagAsTagGroup(*args):
  """TagGroupGetTagAsTagGroup(TagGroup tagGroup, char tagPath, TagGroup subGroup) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsTagGroup(*args)

def TagGroupGetTagAsText(*args):
  """TagGroupGetTagAsText(TagGroup tagGroup, char tagPath, String str) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsText(*args)

def TagGroupGetTagAsUInt16(*args):
  """TagGroupGetTagAsUInt16(TagGroup tagGroup, char tagPath, uint16 number) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsUInt16(*args)

def TagGroupGetTagAsUInt32(*args):
  """TagGroupGetTagAsUInt32(TagGroup tagGroup, char tagPath, ulong number) -> bool"""
  return _DigitalMicrograph.TagGroupGetTagAsUInt32(*args)

def TagGroupGetTagLabel(*args):
  """TagGroupGetTagLabel(TagGroup tagGroup, long index) -> String"""
  return _DigitalMicrograph.TagGroupGetTagLabel(*args)

def TagGroupGetTagSize(*args):
  """TagGroupGetTagSize(TagGroup tagGroup, long index) -> long"""
  return _DigitalMicrograph.TagGroupGetTagSize(*args)

def TagGroupGetTagType(*args):
  """TagGroupGetTagType(TagGroup tagGroup, long index, long type_index) -> long"""
  return _DigitalMicrograph.TagGroupGetTagType(*args)

def TagGroupGetTagTypeLength(*args):
  """TagGroupGetTagTypeLength(TagGroup tagGroup, long index) -> long"""
  return _DigitalMicrograph.TagGroupGetTagTypeLength(*args)

def TagGroupHasChangedSince(*args):
  """TagGroupHasChangedSince(TagGroup tagGroup, long seeds) -> bool"""
  return _DigitalMicrograph.TagGroupHasChangedSince(*args)

def TagGroupInsertTagAsArray(*args):
  """TagGroupInsertTagAsArray(TagGroup tagGroup, ulong ref_index, Image image)"""
  return _DigitalMicrograph.TagGroupInsertTagAsArray(*args)

def TagGroupInsertTagAsBoolean(*args):
  """TagGroupInsertTagAsBoolean(TagGroup tagGroup, long ref_index, bool val)"""
  return _DigitalMicrograph.TagGroupInsertTagAsBoolean(*args)

def TagGroupInsertTagAsDouble(*args):
  """TagGroupInsertTagAsDouble(TagGroup tagGroup, long ref_index, double number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsDouble(*args)

def TagGroupInsertTagAsDoubleComplex(*args):
  """TagGroupInsertTagAsDoubleComplex(TagGroup tagGroup, long ref_index, complex128_t c)"""
  return _DigitalMicrograph.TagGroupInsertTagAsDoubleComplex(*args)

def TagGroupInsertTagAsEightBitColor(*args):
  """TagGroupInsertTagAsEightBitColor(TagGroup tagGroup, long ref_index, rgba_uint8_os_t c)"""
  return _DigitalMicrograph.TagGroupInsertTagAsEightBitColor(*args)

def TagGroupInsertTagAsFloat(*args):
  """TagGroupInsertTagAsFloat(TagGroup tagGroup, long ref_index, float number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsFloat(*args)

def TagGroupInsertTagAsFloatComplex(*args):
  """TagGroupInsertTagAsFloatComplex(TagGroup tagGroup, long ref_index, complex128_t c)"""
  return _DigitalMicrograph.TagGroupInsertTagAsFloatComplex(*args)

def TagGroupInsertTagAsFloatPoint(*args):
  """TagGroupInsertTagAsFloatPoint(TagGroup tagGroup, long ref_index, float x, float y)"""
  return _DigitalMicrograph.TagGroupInsertTagAsFloatPoint(*args)

def TagGroupInsertTagAsFloatRect(*args):
  """
    TagGroupInsertTagAsFloatRect(TagGroup tagGroup, long ref_index, float t, float l, 
        float b, float r)
    """
  return _DigitalMicrograph.TagGroupInsertTagAsFloatRect(*args)

def TagGroupInsertTagAsLong(*args):
  """TagGroupInsertTagAsLong(TagGroup tagGroup, long ref_index, long number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsLong(*args)

def TagGroupInsertTagAsLongPoint(*args):
  """TagGroupInsertTagAsLongPoint(TagGroup tagGroup, long ref_index, long x, long y)"""
  return _DigitalMicrograph.TagGroupInsertTagAsLongPoint(*args)

def TagGroupInsertTagAsLongRect(*args):
  """
    TagGroupInsertTagAsLongRect(TagGroup tagGroup, long ref_index, long t, long l, 
        long b, long r)
    """
  return _DigitalMicrograph.TagGroupInsertTagAsLongRect(*args)

def TagGroupInsertTagAsRGBUInt16(*args):
  """
    TagGroupInsertTagAsRGBUInt16(TagGroup tagGroup, long ref_index, uint16 r, uint16 g, 
        uint16 b)
    """
  return _DigitalMicrograph.TagGroupInsertTagAsRGBUInt16(*args)

def TagGroupInsertTagAsShort(*args):
  """TagGroupInsertTagAsShort(TagGroup tagGroup, long ref_index, short number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsShort(*args)

def TagGroupInsertTagAsShortPoint(*args):
  """TagGroupInsertTagAsShortPoint(TagGroup tagGroup, long ref_index, short x, short y)"""
  return _DigitalMicrograph.TagGroupInsertTagAsShortPoint(*args)

def TagGroupInsertTagAsShortRect(*args):
  """
    TagGroupInsertTagAsShortRect(TagGroup tagGroup, long ref_index, short t, short l, 
        short b, short r)
    """
  return _DigitalMicrograph.TagGroupInsertTagAsShortRect(*args)

def TagGroupInsertTagAsString(*args):
  """TagGroupInsertTagAsString(TagGroup tagGroup, long ref_index, String s)"""
  return _DigitalMicrograph.TagGroupInsertTagAsString(*args)

def TagGroupInsertTagAsTagGroup(*args):
  """TagGroupInsertTagAsTagGroup(TagGroup tagGroup, long ref_index, TagGroup subGroup)"""
  return _DigitalMicrograph.TagGroupInsertTagAsTagGroup(*args)

def TagGroupInsertTagAsText(*args):
  """TagGroupInsertTagAsText(TagGroup tagGroup, long ref_index, String s)"""
  return _DigitalMicrograph.TagGroupInsertTagAsText(*args)

def TagGroupInsertTagAsUInt16(*args):
  """TagGroupInsertTagAsUInt16(TagGroup tagGroup, long ref_index, uint16 number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsUInt16(*args)

def TagGroupInsertTagAsUInt32(*args):
  """TagGroupInsertTagAsUInt32(TagGroup tagGroup, long ref_index, ulong number)"""
  return _DigitalMicrograph.TagGroupInsertTagAsUInt32(*args)

def TagGroupIsList(*args):
  """TagGroupIsList(TagGroup tagGroup) -> bool"""
  return _DigitalMicrograph.TagGroupIsList(*args)

def TagGroupIsOpen(*args):
  """TagGroupIsOpen(TagGroup tagGroup) -> bool"""
  return _DigitalMicrograph.TagGroupIsOpen(*args)

def TagGroupIsValid(*args):
  """TagGroupIsValid(TagGroup tagGroup) -> bool"""
  return _DigitalMicrograph.TagGroupIsValid(*args)

def TagGroupLoadFromFile(*args):
  """TagGroupLoadFromFile(TagGroup tagGroup, String path) -> bool"""
  return _DigitalMicrograph.TagGroupLoadFromFile(*args)

def TagGroupLoadFromFileWithLabel(*args):
  """TagGroupLoadFromFileWithLabel(TagGroup tagGroup, String path, String label) -> bool"""
  return _DigitalMicrograph.TagGroupLoadFromFileWithLabel(*args)

def TagGroupMarkAsChanged(*args):
  """TagGroupMarkAsChanged(TagGroup tagGroup)"""
  return _DigitalMicrograph.TagGroupMarkAsChanged(*args)

def TagGroupOpenBrowserWindow(*args):
  """TagGroupOpenBrowserWindow(TagGroup tagGroup, bool isFileBased) -> Window"""
  return _DigitalMicrograph.TagGroupOpenBrowserWindow(*args)

def TagGroupParseAndCreateTagPath(*args):
  """
    TagGroupParseAndCreateTagPath(TagGroup tagGroup, String tagPath, TagGroup parentGroup, 
        String label) -> long
    """
  return _DigitalMicrograph.TagGroupParseAndCreateTagPath(*args)

def TagGroupParseTagPath(*args):
  """
    TagGroupParseTagPath(TagGroup tagGroup, String tagPath, TagGroup parentGroup, 
        String label) -> long
    """
  return _DigitalMicrograph.TagGroupParseTagPath(*args)

def TagGroupReleaseSeeds(*args):
  """TagGroupReleaseSeeds(TagGroup tagGroup, long seeds)"""
  return _DigitalMicrograph.TagGroupReleaseSeeds(*args)

def TagGroupReplaceTagsWithCopy(*args):
  """TagGroupReplaceTagsWithCopy(TagGroup tagGroup, TagGroup srcGroup)"""
  return _DigitalMicrograph.TagGroupReplaceTagsWithCopy(*args)

def TagGroupSaveToFile(*args):
  """TagGroupSaveToFile(TagGroup tagGroup, String path)"""
  return _DigitalMicrograph.TagGroupSaveToFile(*args)

def TagGroupSaveToFileWithLabel(*args):
  """TagGroupSaveToFileWithLabel(TagGroup tagGroup, String path, String label)"""
  return _DigitalMicrograph.TagGroupSaveToFileWithLabel(*args)

def TagGroupSetIndexedTagAsArray(*args):
  """TagGroupSetIndexedTagAsArray(TagGroup tagGroup, ulong index, Image image)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsArray(*args)

def TagGroupSetIndexedTagAsBoolean(*args):
  """TagGroupSetIndexedTagAsBoolean(TagGroup tagGroup, long index, bool val)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsBoolean(*args)

def TagGroupSetIndexedTagAsDouble(*args):
  """TagGroupSetIndexedTagAsDouble(TagGroup tagGroup, long index, double number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsDouble(*args)

def TagGroupSetIndexedTagAsDoubleComplex(*args):
  """TagGroupSetIndexedTagAsDoubleComplex(TagGroup tagGroup, long index, complex128_t c)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsDoubleComplex(*args)

def TagGroupSetIndexedTagAsEightBitColor(*args):
  """TagGroupSetIndexedTagAsEightBitColor(TagGroup tagGroup, long index, rgba_uint8_os_t c)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsEightBitColor(*args)

def TagGroupSetIndexedTagAsFloat(*args):
  """TagGroupSetIndexedTagAsFloat(TagGroup tagGroup, long index, float number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsFloat(*args)

def TagGroupSetIndexedTagAsFloatComplex(*args):
  """TagGroupSetIndexedTagAsFloatComplex(TagGroup tagGroup, long index, complex128_t c)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsFloatComplex(*args)

def TagGroupSetIndexedTagAsFloatPoint(*args):
  """TagGroupSetIndexedTagAsFloatPoint(TagGroup tagGroup, long index, float x, float y)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsFloatPoint(*args)

def TagGroupSetIndexedTagAsFloatRect(*args):
  """
    TagGroupSetIndexedTagAsFloatRect(TagGroup tagGroup, long index, float t, float l, float b, 
        float r)
    """
  return _DigitalMicrograph.TagGroupSetIndexedTagAsFloatRect(*args)

def TagGroupSetIndexedTagAsLong(*args):
  """TagGroupSetIndexedTagAsLong(TagGroup tagGroup, long index, long number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsLong(*args)

def TagGroupSetIndexedTagAsLongPoint(*args):
  """TagGroupSetIndexedTagAsLongPoint(TagGroup tagGroup, long index, long x, long y)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsLongPoint(*args)

def TagGroupSetIndexedTagAsLongRect(*args):
  """
    TagGroupSetIndexedTagAsLongRect(TagGroup tagGroup, long index, long t, long l, long b, 
        long r)
    """
  return _DigitalMicrograph.TagGroupSetIndexedTagAsLongRect(*args)

def TagGroupSetIndexedTagAsRGBUInt16(*args):
  """
    TagGroupSetIndexedTagAsRGBUInt16(TagGroup tagGroup, long index, uint16 r, uint16 g, 
        uint16 b)
    """
  return _DigitalMicrograph.TagGroupSetIndexedTagAsRGBUInt16(*args)

def TagGroupSetIndexedTagAsShort(*args):
  """TagGroupSetIndexedTagAsShort(TagGroup tagGroup, long index, short number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsShort(*args)

def TagGroupSetIndexedTagAsShortPoint(*args):
  """TagGroupSetIndexedTagAsShortPoint(TagGroup tagGroup, long index, short x, short y)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsShortPoint(*args)

def TagGroupSetIndexedTagAsShortRect(*args):
  """
    TagGroupSetIndexedTagAsShortRect(TagGroup tagGroup, long index, short t, short l, short b, 
        short r)
    """
  return _DigitalMicrograph.TagGroupSetIndexedTagAsShortRect(*args)

def TagGroupSetIndexedTagAsString(*args):
  """TagGroupSetIndexedTagAsString(TagGroup tagGroup, long index, String s)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsString(*args)

def TagGroupSetIndexedTagAsTagGroup(*args):
  """TagGroupSetIndexedTagAsTagGroup(TagGroup tagGroup, long index, TagGroup subGroup)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsTagGroup(*args)

def TagGroupSetIndexedTagAsText(*args):
  """TagGroupSetIndexedTagAsText(TagGroup tagGroup, long index, String s)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsText(*args)

def TagGroupSetIndexedTagAsUInt16(*args):
  """TagGroupSetIndexedTagAsUInt16(TagGroup tagGroup, long index, uint16 number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsUInt16(*args)

def TagGroupSetIndexedTagAsUInt32(*args):
  """TagGroupSetIndexedTagAsUInt32(TagGroup tagGroup, long index, ulong number)"""
  return _DigitalMicrograph.TagGroupSetIndexedTagAsUInt32(*args)

def TagGroupSetIsOpen(*args):
  """TagGroupSetIsOpen(TagGroup tagGroup, bool is_open)"""
  return _DigitalMicrograph.TagGroupSetIsOpen(*args)

def TagGroupSetTagAsArray(*args):
  """TagGroupSetTagAsArray(TagGroup tagGroup, char tagPath, Image image)"""
  return _DigitalMicrograph.TagGroupSetTagAsArray(*args)

def TagGroupSetTagAsBoolean(*args):
  """TagGroupSetTagAsBoolean(TagGroup tagGroup, char tagPath, bool val)"""
  return _DigitalMicrograph.TagGroupSetTagAsBoolean(*args)

def TagGroupSetTagAsDouble(*args):
  """TagGroupSetTagAsDouble(TagGroup tagGroup, char tagPath, double number)"""
  return _DigitalMicrograph.TagGroupSetTagAsDouble(*args)

def TagGroupSetTagAsDoubleComplex(*args):
  """TagGroupSetTagAsDoubleComplex(TagGroup tagGroup, char tagPath, complex128_t c)"""
  return _DigitalMicrograph.TagGroupSetTagAsDoubleComplex(*args)

def TagGroupSetTagAsEightBitColor(*args):
  """TagGroupSetTagAsEightBitColor(TagGroup tagGroup, char tagPath, rgba_uint8_os_t c)"""
  return _DigitalMicrograph.TagGroupSetTagAsEightBitColor(*args)

def TagGroupSetTagAsFloat(*args):
  """TagGroupSetTagAsFloat(TagGroup tagGroup, char tagPath, float number)"""
  return _DigitalMicrograph.TagGroupSetTagAsFloat(*args)

def TagGroupSetTagAsFloatComplex(*args):
  """TagGroupSetTagAsFloatComplex(TagGroup tagGroup, char tagPath, complex128_t c)"""
  return _DigitalMicrograph.TagGroupSetTagAsFloatComplex(*args)

def TagGroupSetTagAsFloatPoint(*args):
  """TagGroupSetTagAsFloatPoint(TagGroup tagGroup, char tagPath, float x, float y)"""
  return _DigitalMicrograph.TagGroupSetTagAsFloatPoint(*args)

def TagGroupSetTagAsFloatRect(*args):
  """
    TagGroupSetTagAsFloatRect(TagGroup tagGroup, char tagPath, float t, float l, 
        float b, float r)
    """
  return _DigitalMicrograph.TagGroupSetTagAsFloatRect(*args)

def TagGroupSetTagAsLong(*args):
  """TagGroupSetTagAsLong(TagGroup tagGroup, char tagPath, long number)"""
  return _DigitalMicrograph.TagGroupSetTagAsLong(*args)

def TagGroupSetTagAsLongPoint(*args):
  """TagGroupSetTagAsLongPoint(TagGroup tagGroup, char tagPath, long x, long y)"""
  return _DigitalMicrograph.TagGroupSetTagAsLongPoint(*args)

def TagGroupSetTagAsLongRect(*args):
  """
    TagGroupSetTagAsLongRect(TagGroup tagGroup, char tagPath, long t, long l, long b, 
        long r)
    """
  return _DigitalMicrograph.TagGroupSetTagAsLongRect(*args)

def TagGroupSetTagAsRGBUInt16(*args):
  """
    TagGroupSetTagAsRGBUInt16(TagGroup tagGroup, char tagPath, uint16 r, uint16 g, 
        uint16 b)
    """
  return _DigitalMicrograph.TagGroupSetTagAsRGBUInt16(*args)

def TagGroupSetTagAsShort(*args):
  """TagGroupSetTagAsShort(TagGroup tagGroup, char tagPath, short number)"""
  return _DigitalMicrograph.TagGroupSetTagAsShort(*args)

def TagGroupSetTagAsShortPoint(*args):
  """TagGroupSetTagAsShortPoint(TagGroup tagGroup, char tagPath, short x, short y)"""
  return _DigitalMicrograph.TagGroupSetTagAsShortPoint(*args)

def TagGroupSetTagAsShortRect(*args):
  """
    TagGroupSetTagAsShortRect(TagGroup tagGroup, char tagPath, short t, short l, 
        short b, short r)
    """
  return _DigitalMicrograph.TagGroupSetTagAsShortRect(*args)

def TagGroupSetTagAsString(*args):
  """TagGroupSetTagAsString(TagGroup tagGroup, char tagPath, String s)"""
  return _DigitalMicrograph.TagGroupSetTagAsString(*args)

def TagGroupSetTagAsTagGroup(*args):
  """TagGroupSetTagAsTagGroup(TagGroup tagGroup, char tagPath, TagGroup subGroup)"""
  return _DigitalMicrograph.TagGroupSetTagAsTagGroup(*args)

def TagGroupSetTagAsText(*args):
  """TagGroupSetTagAsText(TagGroup tagGroup, char tagPath, String s)"""
  return _DigitalMicrograph.TagGroupSetTagAsText(*args)

def TagGroupSetTagAsUInt16(*args):
  """TagGroupSetTagAsUInt16(TagGroup tagGroup, char tagPath, uint16 number)"""
  return _DigitalMicrograph.TagGroupSetTagAsUInt16(*args)

def TagGroupSetTagAsUInt32(*args):
  """TagGroupSetTagAsUInt32(TagGroup tagGroup, char tagPath, ulong number)"""
  return _DigitalMicrograph.TagGroupSetTagAsUInt32(*args)

def TagGroupSetTagRGBBitmap(*args):
  """TagGroupSetTagRGBBitmap(TagGroup tagGroup, char tagPath, Image image)"""
  return _DigitalMicrograph.TagGroupSetTagRGBBitmap(*args)

def TextAnnotationGetAlignment(*args):
  """TextAnnotationGetAlignment(Component comp) -> long"""
  return _DigitalMicrograph.TextAnnotationGetAlignment(*args)

def TextAnnotationGetFixedPoint(*args):
  """TextAnnotationGetFixedPoint(Component comp)"""
  return _DigitalMicrograph.TextAnnotationGetFixedPoint(*args)

def TextAnnotationGetResizeStyle(*args):
  """TextAnnotationGetResizeStyle(Component comp) -> long"""
  return _DigitalMicrograph.TextAnnotationGetResizeStyle(*args)

def TextAnnotationGetText(*args):
  """TextAnnotationGetText(Component comp) -> String"""
  return _DigitalMicrograph.TextAnnotationGetText(*args)

def TextAnnotationSetAlignment(*args):
  """TextAnnotationSetAlignment(Component comp, long alignment)"""
  return _DigitalMicrograph.TextAnnotationSetAlignment(*args)

def TextAnnotationSetFixedPoint(*args):
  """TextAnnotationSetFixedPoint(Component comp, float x, float y)"""
  return _DigitalMicrograph.TextAnnotationSetFixedPoint(*args)

def TextAnnotationSetResizeStyle(*args):
  """TextAnnotationSetResizeStyle(Component comp, long style)"""
  return _DigitalMicrograph.TextAnnotationSetResizeStyle(*args)

def TextAnnotationSetText(*args):
  """TextAnnotationSetText(Component comp, String text)"""
  return _DigitalMicrograph.TextAnnotationSetText(*args)

def ThrowableIsValid(*args):
  """ThrowableIsValid(Throwable throw_) -> bool"""
  return _DigitalMicrograph.ThrowableIsValid(*args)

def TickCount():
  """TickCount() -> uint32"""
  return _DigitalMicrograph.TickCount()

def TransferTagsAndApplyDataBar(*args):
  """TransferTagsAndApplyDataBar(Image argument_1)"""
  return _DigitalMicrograph.TransferTagsAndApplyDataBar(*args)

def TransformPointFromImageToWindow(*args):
  """TransformPointFromImageToWindow(Image image, float x_image, float y_image)"""
  return _DigitalMicrograph.TransformPointFromImageToWindow(*args)

def TrapException(*args):
  """TrapException(short error, long context)"""
  return _DigitalMicrograph.TrapException(*args)

def TryToUse(*args):
  """
    TryToUse(char name, long width, long height, short dataType, 
        short h, short v) -> Image
    """
  return _DigitalMicrograph.TryToUse(*args)

def TwoButtonDialog(*args):
  """TwoButtonDialog(char prompt, char acceptLabel, char rejectLabel) -> bool"""
  return _DigitalMicrograph.TwoButtonDialog(*args)

def UnregisterCustomMenu(*args):
  """UnregisterCustomMenu(long menuHandlerToken)"""
  return _DigitalMicrograph.UnregisterCustomMenu(*args)

def UnregisterCustomTool(*args):
  """UnregisterCustomTool(long toolToken)"""
  return _DigitalMicrograph.UnregisterCustomTool(*args)

def UnregisterObjectListener(*args):
  """UnregisterObjectListener(long object, long id)"""
  return _DigitalMicrograph.UnregisterObjectListener(*args)

def UnregisterSystemIdle(*args):
  """UnregisterSystemIdle(SystemIdleProc SystemIdleProc)"""
  return _DigitalMicrograph.UnregisterSystemIdle(*args)

def UpdateDisplay(*args):
  """UpdateDisplay(Image argument_1, long startRow, long endRow)"""
  return _DigitalMicrograph.UpdateDisplay(*args)

def UpdateImage(*args):
  """UpdateImage(Image argument_1)"""
  return _DigitalMicrograph.UpdateImage(*args)

def UpdateTimeBarPercentage(*args):
  """UpdateTimeBarPercentage(float percentage)"""
  return _DigitalMicrograph.UpdateTimeBarPercentage(*args)

def ValidateSurvey(*args):
  """ValidateSurvey(Image argument_1)"""
  return _DigitalMicrograph.ValidateSurvey(*args)

def variance(*args):
  """variance(Image argument_1) -> float"""
  return _DigitalMicrograph.variance(*args)

def WindowClose(*args):
  """WindowClose(Window window, bool verify)"""
  return _DigitalMicrograph.WindowClose(*args)

def WindowGetContentBounds(*args):
  """WindowGetContentBounds(Window window)"""
  return _DigitalMicrograph.WindowGetContentBounds(*args)

def WindowGetContentPosition(*args):
  """WindowGetContentPosition(Window window)"""
  return _DigitalMicrograph.WindowGetContentPosition(*args)

def WindowGetContentSize(*args):
  """WindowGetContentSize(Window window)"""
  return _DigitalMicrograph.WindowGetContentSize(*args)

def WindowGetFrameBounds(*args):
  """WindowGetFrameBounds(Window window)"""
  return _DigitalMicrograph.WindowGetFrameBounds(*args)

def WindowGetFramePosition(*args):
  """WindowGetFramePosition(Window window)"""
  return _DigitalMicrograph.WindowGetFramePosition(*args)

def WindowGetFrameSize(*args):
  """WindowGetFrameSize(Window window)"""
  return _DigitalMicrograph.WindowGetFrameSize(*args)

def WindowGetMousePosition(*args):
  """WindowGetMousePosition(Window window)"""
  return _DigitalMicrograph.WindowGetMousePosition(*args)

def WindowGetTitle(*args):
  """WindowGetTitle(Window window) -> String"""
  return _DigitalMicrograph.WindowGetTitle(*args)

def WindowGetType(*args):
  """WindowGetType(Window window) -> long"""
  return _DigitalMicrograph.WindowGetType(*args)

def WindowHide(*args):
  """WindowHide(Window window)"""
  return _DigitalMicrograph.WindowHide(*args)

def WindowIsOpen(*args):
  """WindowIsOpen(Window window) -> bool"""
  return _DigitalMicrograph.WindowIsOpen(*args)

def WindowIsShown(*args):
  """WindowIsShown(Window window) -> bool"""
  return _DigitalMicrograph.WindowIsShown(*args)

def WindowIsValid(*args):
  """WindowIsValid(Window window) -> bool"""
  return _DigitalMicrograph.WindowIsValid(*args)

def WindowSelect(*args):
  """WindowSelect(Window window)"""
  return _DigitalMicrograph.WindowSelect(*args)

def WindowSendBehind(*args):
  """WindowSendBehind(Window window, Window behind_window)"""
  return _DigitalMicrograph.WindowSendBehind(*args)

def WindowSetContentBounds(*args):
  """WindowSetContentBounds(Window window, long top, long left, long bottom, long right)"""
  return _DigitalMicrograph.WindowSetContentBounds(*args)

def WindowSetContentPosition(*args):
  """WindowSetContentPosition(Window window, long x, long y)"""
  return _DigitalMicrograph.WindowSetContentPosition(*args)

def WindowSetContentSize(*args):
  """WindowSetContentSize(Window window, long x, long y)"""
  return _DigitalMicrograph.WindowSetContentSize(*args)

def WindowSetFrameBounds(*args):
  """WindowSetFrameBounds(Window window, long top, long left, long bottom, long right)"""
  return _DigitalMicrograph.WindowSetFrameBounds(*args)

def WindowSetFramePosition(*args):
  """WindowSetFramePosition(Window window, long x, long y)"""
  return _DigitalMicrograph.WindowSetFramePosition(*args)

def WindowSetFrameSize(*args):
  """WindowSetFrameSize(Window window, long x, long y)"""
  return _DigitalMicrograph.WindowSetFrameSize(*args)

def WindowSetTitle(*args):
  """WindowSetTitle(Window window, String title)"""
  return _DigitalMicrograph.WindowSetTitle(*args)

def WindowShow(*args):
  """WindowShow(Window window)"""
  return _DigitalMicrograph.WindowShow(*args)

def WindowUpdate(*args):
  """WindowUpdate(Window window)"""
  return _DigitalMicrograph.WindowUpdate(*args)

def WriteFile(*args):
  """WriteFile(DM_FileReference file, String data)"""
  return _DigitalMicrograph.WriteFile(*args)

def WriteRawStream(*args):
  """WriteRawStream(long rawStream, long data, long length)"""
  return _DigitalMicrograph.WriteRawStream(*args)

def XX_GetProcessKey(*args):
  """XX_GetProcessKey(long pid) -> short"""
  return _DigitalMicrograph.XX_GetProcessKey(*args)

def XX_InstallImageProcess(*args):
  """XX_InstallImageProcess(Image argument_1, long pid)"""
  return _DigitalMicrograph.XX_InstallImageProcess(*args)

def Yield():
  """Yield()"""
  return _DigitalMicrograph.Yield()
class Image(_object):
    """Proxy of C++ Gatan::DM::Image class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Image"""
        this = _DigitalMicrograph.new_Image()
        try: self.this.append(this)
        except: self.this = this
    def CalculateHistogram(self, *args):
        """CalculateHistogram(self, Image hist_image, long complexMode, float min, float max)"""
        return _DigitalMicrograph.Image_CalculateHistogram(self, *args)

    def CalculateMinMax(self, *args):
        """CalculateMinMax(self, long surveyTechnique, long complexMode)"""
        return _DigitalMicrograph.Image_CalculateMinMax(self, *args)

    def ChangeDataType(self, *args):
        """ChangeDataType(self, uint32 dataType)"""
        return _DigitalMicrograph.Image_ChangeDataType(self, *args)

    def Clone(self):
        """Clone(self) -> Image"""
        return _DigitalMicrograph.Image_Clone(self)

    def CopyCalibrationFrom(self, *args):
        """CopyCalibrationFrom(self, Image src_image)"""
        return _DigitalMicrograph.Image_CopyCalibrationFrom(self, *args)

    def CountImageDisplays(self):
        """CountImageDisplays(self) -> long"""
        return _DigitalMicrograph.Image_CountImageDisplays(self)

    def CountImageDisplaysInImageDocument(self, *args):
        """CountImageDisplaysInImageDocument(self, ImageDocument imgDoc) -> long"""
        return _DigitalMicrograph.Image_CountImageDisplaysInImageDocument(self, *args)

    def CreateImageDisplay(self, *args):
        """CreateImageDisplay(self, long displayType) -> ImageDisplay"""
        return _DigitalMicrograph.Image_CreateImageDisplay(self, *args)

    def DataChanged(self):
        """DataChanged(self)"""
        return _DigitalMicrograph.Image_DataChanged(self)

    def GetDataElementBitSize(self):
        """GetDataElementBitSize(self) -> ulong"""
        return _DigitalMicrograph.Image_GetDataElementBitSize(self)

    def GetDataElementByteSize(self):
        """GetDataElementByteSize(self) -> ulong"""
        return _DigitalMicrograph.Image_GetDataElementByteSize(self)

    def GetDataSeed(self):
        """GetDataSeed(self) -> ulong"""
        return _DigitalMicrograph.Image_GetDataSeed(self)

    def GetDataType(self):
        """GetDataType(self) -> ulong"""
        return _DigitalMicrograph.Image_GetDataType(self)

    def GetDescriptionText(self):
        """GetDescriptionText(self) -> String"""
        return _DigitalMicrograph.Image_GetDescriptionText(self)

    def GetDimensionCalibration(self, *args):
        """GetDimensionCalibration(self, long dimension, String units, long calibrationFormat)"""
        return _DigitalMicrograph.Image_GetDimensionCalibration(self, *args)

    def GetDimensionOrigin(self, *args):
        """GetDimensionOrigin(self, long dimension) -> float"""
        return _DigitalMicrograph.Image_GetDimensionOrigin(self, *args)

    def GetDimensionScale(self, *args):
        """GetDimensionScale(self, long dimension) -> float"""
        return _DigitalMicrograph.Image_GetDimensionScale(self, *args)

    def GetDimensionSize(self, *args):
        """GetDimensionSize(self, ulong dimension) -> ulong"""
        return _DigitalMicrograph.Image_GetDimensionSize(self, *args)

    def GetDimensionUnitInfo(self, *args):
        """GetDimensionUnitInfo(self, long dimension, String canon_units)"""
        return _DigitalMicrograph.Image_GetDimensionUnitInfo(self, *args)

    def GetDimensionUnitString(self, *args):
        """GetDimensionUnitString(self, long dimension) -> String"""
        return _DigitalMicrograph.Image_GetDimensionUnitString(self, *args)

    def GetID(self):
        """GetID(self) -> ulong"""
        return _DigitalMicrograph.Image_GetID(self)

    def GetImageDisplay(self, *args):
        """GetImageDisplay(self, long index) -> ImageDisplay"""
        return _DigitalMicrograph.Image_GetImageDisplay(self, *args)

    def GetImageDisplayInImageDocument(self, *args):
        """GetImageDisplayInImageDocument(self, ImageDocument imgDoc, long index) -> ImageDisplay"""
        return _DigitalMicrograph.Image_GetImageDisplayInImageDocument(self, *args)

    def GetIntensityOrigin(self):
        """GetIntensityOrigin(self) -> float"""
        return _DigitalMicrograph.Image_GetIntensityOrigin(self)

    def GetIntensityScale(self):
        """GetIntensityScale(self) -> float"""
        return _DigitalMicrograph.Image_GetIntensityScale(self)

    def GetIntensityUnitInfo(self, *args):
        """GetIntensityUnitInfo(self, String canon_units)"""
        return _DigitalMicrograph.Image_GetIntensityUnitInfo(self, *args)

    def GetIntensityUnitString(self):
        """GetIntensityUnitString(self) -> String"""
        return _DigitalMicrograph.Image_GetIntensityUnitString(self)

    def GetLabel(self):
        """GetLabel(self) -> String"""
        return _DigitalMicrograph.Image_GetLabel(self)

    def GetName(self):
        """GetName(self) -> String"""
        return _DigitalMicrograph.Image_GetName(self)

    def GetNumDimensions(self):
        """GetNumDimensions(self) -> ulong"""
        return _DigitalMicrograph.Image_GetNumDimensions(self)

    def GetOrCreateImageDocument(self):
        """GetOrCreateImageDocument(self) -> ImageDocument"""
        return _DigitalMicrograph.Image_GetOrCreateImageDocument(self)

    def GetTagGroup(self):
        """GetTagGroup(self) -> TagGroup"""
        return _DigitalMicrograph.Image_GetTagGroup(self)

    def GetUniqueID(self):
        """GetUniqueID(self) -> ScriptObject"""
        return _DigitalMicrograph.Image_GetUniqueID(self)

    def IsDataTypeBinary(self):
        """IsDataTypeBinary(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeBinary(self)

    def IsDataTypeComplex(self):
        """IsDataTypeComplex(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeComplex(self)

    def IsDataTypeFloat(self):
        """IsDataTypeFloat(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeFloat(self)

    def IsDataTypeInteger(self):
        """IsDataTypeInteger(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeInteger(self)

    def IsDataTypePackedComplex(self):
        """IsDataTypePackedComplex(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypePackedComplex(self)

    def IsDataTypeReal(self):
        """IsDataTypeReal(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeReal(self)

    def IsDataTypeRGB(self):
        """IsDataTypeRGB(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeRGB(self)

    def IsDataTypeSignedInteger(self):
        """IsDataTypeSignedInteger(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeSignedInteger(self)

    def IsDataTypeUnsignedInteger(self):
        """IsDataTypeUnsignedInteger(self) -> bool"""
        return _DigitalMicrograph.Image_IsDataTypeUnsignedInteger(self)

    def IsDimensionCalibrationDisplayed(self, *args):
        """IsDimensionCalibrationDisplayed(self, ulong dim) -> bool"""
        return _DigitalMicrograph.Image_IsDimensionCalibrationDisplayed(self, *args)

    def IsIntensityCalibrationDisplayed(self):
        """IsIntensityCalibrationDisplayed(self) -> bool"""
        return _DigitalMicrograph.Image_IsIntensityCalibrationDisplayed(self)

    def SetDescriptionText(self, *args):
        """SetDescriptionText(self, String description)"""
        return _DigitalMicrograph.Image_SetDescriptionText(self, *args)

    def SetDimensionCalibration(self, *args):
        """
        SetDimensionCalibration(self, long dimension, float origin, float scale, String unitString, 
            long calibrationFormat)
        """
        return _DigitalMicrograph.Image_SetDimensionCalibration(self, *args)

    def SetDimensionCalibrationDisplayed(self, *args):
        """SetDimensionCalibrationDisplayed(self, ulong dim, bool do_display)"""
        return _DigitalMicrograph.Image_SetDimensionCalibrationDisplayed(self, *args)

    def SetDimensionOrigin(self, *args):
        """SetDimensionOrigin(self, long dimension, float origin)"""
        return _DigitalMicrograph.Image_SetDimensionOrigin(self, *args)

    def SetDimensionScale(self, *args):
        """SetDimensionScale(self, long dimension, float scale)"""
        return _DigitalMicrograph.Image_SetDimensionScale(self, *args)

    def SetDimensionUnitInfo(self, *args):
        """SetDimensionUnitInfo(self, long dimension, String canon_units, long power)"""
        return _DigitalMicrograph.Image_SetDimensionUnitInfo(self, *args)

    def SetDimensionUnitString(self, *args):
        """SetDimensionUnitString(self, long dimension, String units)"""
        return _DigitalMicrograph.Image_SetDimensionUnitString(self, *args)

    def SetIntensityCalibrationDisplayed(self, *args):
        """SetIntensityCalibrationDisplayed(self, bool do_display)"""
        return _DigitalMicrograph.Image_SetIntensityCalibrationDisplayed(self, *args)

    def SetIntensityOrigin(self, *args):
        """SetIntensityOrigin(self, float origin)"""
        return _DigitalMicrograph.Image_SetIntensityOrigin(self, *args)

    def SetIntensityScale(self, *args):
        """SetIntensityScale(self, float scale)"""
        return _DigitalMicrograph.Image_SetIntensityScale(self, *args)

    def SetIntensityUnitInfo(self, *args):
        """SetIntensityUnitInfo(self, String canon_units, long power)"""
        return _DigitalMicrograph.Image_SetIntensityUnitInfo(self, *args)

    def SetIntensityUnitString(self, *args):
        """SetIntensityUnitString(self, String units)"""
        return _DigitalMicrograph.Image_SetIntensityUnitString(self, *args)

    def SetName(self, *args):
        """SetName(self, String name)"""
        return _DigitalMicrograph.Image_SetName(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_Image
    __del__ = lambda self : None;
Image_swigregister = _DigitalMicrograph.Image_swigregister
Image_swigregister(Image)

def BinaryImage(*args):
  """
    BinaryImage(char title, long d0, long d1, long d2) -> Image
    BinaryImage(char title, long d0) -> Image
    BinaryImage(char title, long d0, long d1) -> Image
    """
  return _DigitalMicrograph.BinaryImage(*args)

def ComplexImage(*args):
  """
    ComplexImage(char title, long bytes, long d0, long d1, long d2) -> Image
    ComplexImage(char title, long bytes, long d0, long d1) -> Image
    ComplexImage(char title, long bytes, long d0) -> Image
    """
  return _DigitalMicrograph.ComplexImage(*args)

def ExecuteScriptFile(*args):
  """
    ExecuteScriptFile(char fileName, ulong script_index) -> double
    ExecuteScriptFile(char fileName) -> double
    """
  return _DigitalMicrograph.ExecuteScriptFile(*args)

def GetFrontImage(*args):
  """
    GetFrontImage() -> Image
    GetFrontImage(Image argument_1) -> bool
    """
  return _DigitalMicrograph.GetFrontImage(*args)

def GetLabel(*args):
  """
    GetLabel(Image argument_1) -> String
    GetLabel(Image argument_1, char buffer)
    """
  return _DigitalMicrograph.GetLabel(*args)

def GetName(*args):
  """
    GetName(Image argument_1) -> String
    GetName(Image argument_1, char buffer)
    """
  return _DigitalMicrograph.GetName(*args)

def GetNamedImage(*args):
  """
    GetNamedImage(char name) -> Image
    GetNamedImage(Image argument_1, char name) -> bool
    """
  return _DigitalMicrograph.GetNamedImage(*args)

def IntegerImage(*args):
  """
    IntegerImage(char title, long bytes, bool isSigned, long d0, long d1, 
        long d2) -> Image
    IntegerImage(char title, long bytes, bool isSigned, long d0, long d1) -> Image
    IntegerImage(char title, long bytes, bool isSigned, long d0) -> Image
    """
  return _DigitalMicrograph.IntegerImage(*args)

def NewImage(*args):
  """
    NewImage(char title, long type, long d0) -> Image
    NewImage(char title, long type, long d0, long d1) -> Image
    NewImage(char title, long type, long d0, long d1, long d2) -> Image
    NewImage(char title, long type, long d0, long d1, long d2, long d3) -> Image
    """
  return _DigitalMicrograph.NewImage(*args)

def NewScriptWindowFromFile(*args):
  """
    NewScriptWindowFromFile(String file_name, long top, long left, long bottom, 
        long right) -> Window
    NewScriptWindowFromFile(String file_name) -> Window
    NewScriptWindowFromFile(String file_name, String font_name, ulong attributes, 
        ulong size) -> Window
    NewScriptWindowFromFile(String file_name, String font_name, ulong attributes, 
        ulong size, long top, long left, long bottom, 
        long right) -> Window
    """
  return _DigitalMicrograph.NewScriptWindowFromFile(*args)

def RealImage(*args):
  """
    RealImage(char title, long bytes, long d0, long d1, long d2) -> Image
    RealImage(char title, long bytes, long d0, long d1) -> Image
    RealImage(char title, long bytes, long d0) -> Image
    """
  return _DigitalMicrograph.RealImage(*args)

def RGBImage(*args):
  """
    RGBImage(char title, long bytes, long d0, long d1, long d2) -> Image
    RGBImage(char title, long bytes, long d0, long d1) -> Image
    RGBImage(char title, long bytes, long d0) -> Image
    """
  return _DigitalMicrograph.RGBImage(*args)

def ScriptObjectLookupMethod(*args):
  """
    ScriptObjectLookupMethod(ScriptObject scriptObject, Function meth_abs, char class_name) -> Function
    ScriptObjectLookupMethod(ScriptObject scriptObject, Function meth_abs) -> Function
    """
  return _DigitalMicrograph.ScriptObjectLookupMethod(*args)

def StringAppend(*args):
  """
    StringAppend(String s1, String s2) -> String
    StringAppend(String s1, ulong ch, ulong encoding_id) -> String
    """
  return _DigitalMicrograph.StringAppend(*args)

def TagGroupGetTagAsRGBUInt16(*args):
  """
    TagGroupGetTagAsRGBUInt16(TagGroup tagGroup, long index, uint16 r, uint16 g, 
        uint16 b) -> bool
    TagGroupGetTagAsRGBUInt16(TagGroup tagGroup, char tagPath, uint16 r, uint16 g, 
        uint16 b) -> bool
    """
  return _DigitalMicrograph.TagGroupGetTagAsRGBUInt16(*args)

class ROI(_object):
    """Proxy of C++ Gatan::DM::ROI class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ROI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ROI, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ROI"""
        this = _DigitalMicrograph.new_ROI()
        try: self.this.append(this)
        except: self.this = this
    def AddToMask(self, *args):
        """AddToMask(self, Image mask, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.ROI_AddToMask(self, *args)

    def AddVertex(self, *args):
        """AddVertex(self, float x, float y)"""
        return _DigitalMicrograph.ROI_AddVertex(self, *args)

    def ClearVertices(self):
        """ClearVertices(self)"""
        return _DigitalMicrograph.ROI_ClearVertices(self)

    def Clone(self):
        """Clone(self) -> ROI"""
        return _DigitalMicrograph.ROI_Clone(self)

    def ContainsPoint(self, *args):
        """ContainsPoint(self, float x, float y) -> bool"""
        return _DigitalMicrograph.ROI_ContainsPoint(self, *args)

    def CountVertices(self):
        """CountVertices(self) -> long"""
        return _DigitalMicrograph.ROI_CountVertices(self)

    def DeleteVertex(self, *args):
        """DeleteVertex(self, long index)"""
        return _DigitalMicrograph.ROI_DeleteVertex(self, *args)

    def GetColor(self):
        """GetColor(self)"""
        return _DigitalMicrograph.ROI_GetColor(self)

    def GetDeletable(self):
        """GetDeletable(self) -> bool"""
        return _DigitalMicrograph.ROI_GetDeletable(self)

    def GetID(self):
        """GetID(self) -> long"""
        return _DigitalMicrograph.ROI_GetID(self)

    def GetLabel(self):
        """GetLabel(self) -> String"""
        return _DigitalMicrograph.ROI_GetLabel(self)

    def GetLine(self):
        """GetLine(self)"""
        return _DigitalMicrograph.ROI_GetLine(self)

    def GetMoveable(self):
        """GetMoveable(self) -> bool"""
        return _DigitalMicrograph.ROI_GetMoveable(self)

    def GetName(self):
        """GetName(self) -> String"""
        return _DigitalMicrograph.ROI_GetName(self)

    def GetPoint(self):
        """GetPoint(self)"""
        return _DigitalMicrograph.ROI_GetPoint(self)

    def GetRange(self):
        """GetRange(self)"""
        return _DigitalMicrograph.ROI_GetRange(self)

    def GetRectangle(self):
        """GetRectangle(self)"""
        return _DigitalMicrograph.ROI_GetRectangle(self)

    def GetResizable(self):
        """GetResizable(self) -> bool"""
        return _DigitalMicrograph.ROI_GetResizable(self)

    def GetVertex(self, *args):
        """GetVertex(self, long index)"""
        return _DigitalMicrograph.ROI_GetVertex(self, *args)

    def GetVolatile(self):
        """GetVolatile(self) -> bool"""
        return _DigitalMicrograph.ROI_GetVolatile(self)

    def InsertVertex(self, *args):
        """InsertVertex(self, long before, float x, float y)"""
        return _DigitalMicrograph.ROI_InsertVertex(self, *args)

    def IsClosed(self):
        """IsClosed(self) -> bool"""
        return _DigitalMicrograph.ROI_IsClosed(self)

    def IsLine(self):
        """IsLine(self) -> bool"""
        return _DigitalMicrograph.ROI_IsLine(self)

    def IsPoint(self):
        """IsPoint(self) -> bool"""
        return _DigitalMicrograph.ROI_IsPoint(self)

    def IsRange(self):
        """IsRange(self) -> bool"""
        return _DigitalMicrograph.ROI_IsRange(self)

    def IsRectangle(self):
        """IsRectangle(self) -> bool"""
        return _DigitalMicrograph.ROI_IsRectangle(self)

    def SetColor(self, *args):
        """SetColor(self, float r, float g, float b)"""
        return _DigitalMicrograph.ROI_SetColor(self, *args)

    def SetDeletable(self, *args):
        """SetDeletable(self, bool deletable)"""
        return _DigitalMicrograph.ROI_SetDeletable(self, *args)

    def SetIsClosed(self, *args):
        """SetIsClosed(self, bool is_closed)"""
        return _DigitalMicrograph.ROI_SetIsClosed(self, *args)

    def SetLabel(self, *args):
        """SetLabel(self, String name)"""
        return _DigitalMicrograph.ROI_SetLabel(self, *args)

    def SetLine(self, *args):
        """SetLine(self, float sx, float sy, float ex, float ey)"""
        return _DigitalMicrograph.ROI_SetLine(self, *args)

    def SetMoveable(self, *args):
        """SetMoveable(self, bool moveable)"""
        return _DigitalMicrograph.ROI_SetMoveable(self, *args)

    def SetName(self, *args):
        """SetName(self, String name)"""
        return _DigitalMicrograph.ROI_SetName(self, *args)

    def SetPoint(self, *args):
        """SetPoint(self, float x, float y)"""
        return _DigitalMicrograph.ROI_SetPoint(self, *args)

    def SetRange(self, *args):
        """SetRange(self, float start, float end)"""
        return _DigitalMicrograph.ROI_SetRange(self, *args)

    def SetRectangle(self, *args):
        """SetRectangle(self, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.ROI_SetRectangle(self, *args)

    def SetRegionToComplexValue(self, *args):
        """
        SetRegionToComplexValue(self, Image mask, complex128_t value, float top, float left, 
            float bottom, float right)
        """
        return _DigitalMicrograph.ROI_SetRegionToComplexValue(self, *args)

    def SetRegionToRGBValue(self, *args):
        """
        SetRegionToRGBValue(self, Image mask, rgba_uint8_os_t value, float top, float left, 
            float bottom, float right)
        """
        return _DigitalMicrograph.ROI_SetRegionToRGBValue(self, *args)

    def SetRegionToValue(self, *args):
        """
        SetRegionToValue(self, Image mask, double value, float top, float left, float bottom, 
            float right)
        """
        return _DigitalMicrograph.ROI_SetRegionToValue(self, *args)

    def SetResizable(self, *args):
        """SetResizable(self, bool resizable)"""
        return _DigitalMicrograph.ROI_SetResizable(self, *args)

    def SetVertex(self, *args):
        """SetVertex(self, long index, float x, float y)"""
        return _DigitalMicrograph.ROI_SetVertex(self, *args)

    def SetVolatile(self, *args):
        """SetVolatile(self, bool is_volatile)"""
        return _DigitalMicrograph.ROI_SetVolatile(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_ROI
    __del__ = lambda self : None;
ROI_swigregister = _DigitalMicrograph.ROI_swigregister
ROI_swigregister(ROI)
cvar = _DigitalMicrograph.cvar

class Component(_object):
    """Proxy of C++ Gatan::DM::Component class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Component"""
        this = _DigitalMicrograph.new_Component()
        try: self.this.append(this)
        except: self.this = this
    def AddChildAfter(self, *args):
        """AddChildAfter(self, Component child, Component annot_pos)"""
        return _DigitalMicrograph.Component_AddChildAfter(self, *args)

    def AddChildAtBeginning(self, *args):
        """AddChildAtBeginning(self, Component child)"""
        return _DigitalMicrograph.Component_AddChildAtBeginning(self, *args)

    def AddChildAtEnd(self, *args):
        """AddChildAtEnd(self, Component child)"""
        return _DigitalMicrograph.Component_AddChildAtEnd(self, *args)

    def AddChildBefore(self, *args):
        """AddChildBefore(self, Component child, Component annot_pos)"""
        return _DigitalMicrograph.Component_AddChildBefore(self, *args)

    def AddNewComponent(self, *args):
        """AddNewComponent(self, long type, float f1, float f2, float f3, float f4) -> Component"""
        return _DigitalMicrograph.Component_AddNewComponent(self, *args)

    def Clone(self, *args):
        """Clone(self, bool doDeepCopy) -> Component"""
        return _DigitalMicrograph.Component_Clone(self, *args)

    def CountChildren(self):
        """CountChildren(self) -> long"""
        return _DigitalMicrograph.Component_CountChildren(self)

    def CountChildrenOfType(self, *args):
        """CountChildrenOfType(self, long type) -> long"""
        return _DigitalMicrograph.Component_CountChildrenOfType(self, *args)

    def GetBoundingRect(self):
        """GetBoundingRect(self)"""
        return _DigitalMicrograph.Component_GetBoundingRect(self)

    def GetBoundingRectInView(self):
        """GetBoundingRectInView(self)"""
        return _DigitalMicrograph.Component_GetBoundingRectInView(self)

    def GetChild(self, *args):
        """GetChild(self, long index) -> Component"""
        return _DigitalMicrograph.Component_GetChild(self, *args)

    def GetChildByID(self, *args):
        """GetChildByID(self, long ID) -> Component"""
        return _DigitalMicrograph.Component_GetChildByID(self, *args)

    def GetChildToLocalTransform(self):
        """GetChildToLocalTransform(self)"""
        return _DigitalMicrograph.Component_GetChildToLocalTransform(self)

    def GetChildToPageTransform(self):
        """GetChildToPageTransform(self)"""
        return _DigitalMicrograph.Component_GetChildToPageTransform(self)

    def GetChildToViewTransform(self):
        """GetChildToViewTransform(self)"""
        return _DigitalMicrograph.Component_GetChildToViewTransform(self)

    def GetChildToWindowTransform(self):
        """GetChildToWindowTransform(self)"""
        return _DigitalMicrograph.Component_GetChildToWindowTransform(self)

    def GetControlPoint(self, *args):
        """GetControlPoint(self, long loc) -> bool"""
        return _DigitalMicrograph.Component_GetControlPoint(self, *args)

    def GetDescendentByID(self, *args):
        """GetDescendentByID(self, long ID) -> Component"""
        return _DigitalMicrograph.Component_GetDescendentByID(self, *args)

    def GetDrawingMode(self):
        """GetDrawingMode(self) -> long"""
        return _DigitalMicrograph.Component_GetDrawingMode(self)

    def GetFillMode(self):
        """GetFillMode(self) -> long"""
        return _DigitalMicrograph.Component_GetFillMode(self)

    def GetFontAttributes(self):
        """GetFontAttributes(self) -> long"""
        return _DigitalMicrograph.Component_GetFontAttributes(self)

    def GetFontFaceName(self):
        """GetFontFaceName(self) -> String"""
        return _DigitalMicrograph.Component_GetFontFaceName(self)

    def GetFontInfo(self, *args):
        """GetFontInfo(self, String faceName)"""
        return _DigitalMicrograph.Component_GetFontInfo(self, *args)

    def GetFontSize(self):
        """GetFontSize(self) -> long"""
        return _DigitalMicrograph.Component_GetFontSize(self)

    def GetID(self):
        """GetID(self) -> long"""
        return _DigitalMicrograph.Component_GetID(self)

    def GetImageDocument(self):
        """GetImageDocument(self) -> ImageDocument"""
        return _DigitalMicrograph.Component_GetImageDocument(self)

    def GetLocalToPageTransform(self):
        """GetLocalToPageTransform(self)"""
        return _DigitalMicrograph.Component_GetLocalToPageTransform(self)

    def GetLocalToViewTransform(self):
        """GetLocalToViewTransform(self)"""
        return _DigitalMicrograph.Component_GetLocalToViewTransform(self)

    def GetLocalToWindowTransform(self):
        """GetLocalToWindowTransform(self)"""
        return _DigitalMicrograph.Component_GetLocalToWindowTransform(self)

    def GetNthChildOfType(self, *args):
        """GetNthChildOfType(self, long type, long index) -> Component"""
        return _DigitalMicrograph.Component_GetNthChildOfType(self, *args)

    def GetParentComponent(self):
        """GetParentComponent(self) -> Component"""
        return _DigitalMicrograph.Component_GetParentComponent(self)

    def GetParentImageDisplay(self):
        """GetParentImageDisplay(self) -> ImageDisplay"""
        return _DigitalMicrograph.Component_GetParentImageDisplay(self)

    def GetRect(self):
        """GetRect(self)"""
        return _DigitalMicrograph.Component_GetRect(self)

    def GetRectInView(self):
        """GetRectInView(self)"""
        return _DigitalMicrograph.Component_GetRectInView(self)

    def GetTagGroup(self):
        """GetTagGroup(self) -> TagGroup"""
        return _DigitalMicrograph.Component_GetTagGroup(self)

    def GetType(self):
        """GetType(self) -> long"""
        return _DigitalMicrograph.Component_GetType(self)

    def IsOfType(self, *args):
        """IsOfType(self, long type) -> bool"""
        return _DigitalMicrograph.Component_IsOfType(self, *args)

    def IsSelected(self):
        """IsSelected(self) -> bool"""
        return _DigitalMicrograph.Component_IsSelected(self)

    def OffsetControlPoint(self, *args):
        """OffsetControlPoint(self, long loc, float x, float y, long restrict_style)"""
        return _DigitalMicrograph.Component_OffsetControlPoint(self, *args)

    def PositionAroundPoint(self, *args):
        """
        PositionAroundPoint(self, float new_x, float new_y, float rel_x, float rel_y, 
            bool horz, bool vert)
        """
        return _DigitalMicrograph.Component_PositionAroundPoint(self, *args)

    def RemoveFromParent(self):
        """RemoveFromParent(self)"""
        return _DigitalMicrograph.Component_RemoveFromParent(self)

    def SetControlPoint(self, *args):
        """SetControlPoint(self, long loc, float x, float y, long restrict_style)"""
        return _DigitalMicrograph.Component_SetControlPoint(self, *args)

    def SetDrawingMode(self, *args):
        """SetDrawingMode(self, long mode)"""
        return _DigitalMicrograph.Component_SetDrawingMode(self, *args)

    def SetFillMode(self, *args):
        """SetFillMode(self, long mode)"""
        return _DigitalMicrograph.Component_SetFillMode(self, *args)

    def SetFontAttributes(self, *args):
        """SetFontAttributes(self, long attributes)"""
        return _DigitalMicrograph.Component_SetFontAttributes(self, *args)

    def SetFontFaceName(self, *args):
        """SetFontFaceName(self, String face_name)"""
        return _DigitalMicrograph.Component_SetFontFaceName(self, *args)

    def SetFontInfo(self, *args):
        """SetFontInfo(self, String face_name, long attributes, long size)"""
        return _DigitalMicrograph.Component_SetFontInfo(self, *args)

    def SetFontSize(self, *args):
        """SetFontSize(self, long size)"""
        return _DigitalMicrograph.Component_SetFontSize(self, *args)

    def SetRect(self, *args):
        """SetRect(self, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.Component_SetRect(self, *args)

    def SetSelected(self, *args):
        """SetSelected(self, bool select)"""
        return _DigitalMicrograph.Component_SetSelected(self, *args)

    def TransformCoordinates(self, *args):
        """TransformCoordinates(self, float off_x, float off_y, float scale_x, float scale_y)"""
        return _DigitalMicrograph.Component_TransformCoordinates(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_Component
    __del__ = lambda self : None;
Component_swigregister = _DigitalMicrograph.Component_swigregister
Component_swigregister(Component)

class ImageDisplay(_object):
    """Proxy of C++ Gatan::DM::ImageDisplay class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageDisplay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ImageDisplay"""
        this = _DigitalMicrograph.new_ImageDisplay()
        try: self.this.append(this)
        except: self.this = this
    def AccumulateROIsToMask(self, *args):
        """
        AccumulateROIsToMask(self, Image mask, float top, float left, float bottom, float right, 
            float mask_val)
        """
        return _DigitalMicrograph.ImageDisplay_AccumulateROIsToMask(self, *args)

    def AddKeyListener(self, *args):
        """AddKeyListener(self, char listener_key, char listener_script)"""
        return _DigitalMicrograph.ImageDisplay_AddKeyListener(self, *args)

    def AddROI(self, *args):
        """AddROI(self, ROI roi)"""
        return _DigitalMicrograph.ImageDisplay_AddROI(self, *args)

    def ChangeDisplayType(self, *args):
        """ChangeDisplayType(self, long new_type)"""
        return _DigitalMicrograph.ImageDisplay_ChangeDisplayType(self, *args)

    def CountROIs(self):
        """CountROIs(self) -> long"""
        return _DigitalMicrograph.ImageDisplay_CountROIs(self)

    def DeleteROI(self, *args):
        """DeleteROI(self, ROI roi)"""
        return _DigitalMicrograph.ImageDisplay_DeleteROI(self, *args)

    def DoesROIExist(self, *args):
        """DoesROIExist(self, char name) -> bool"""
        return _DigitalMicrograph.ImageDisplay_DoesROIExist(self, *args)

    def ExportToFile(self, *args):
        """ExportToFile(self, char format, char file_name)"""
        return _DigitalMicrograph.ImageDisplay_ExportToFile(self, *args)

    def GetBufferedImage(self):
        """GetBufferedImage(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetBufferedImage(self)

    def GetComplexMode(self):
        """GetComplexMode(self) -> long"""
        return _DigitalMicrograph.ImageDisplay_GetComplexMode(self)

    def GetComplexModeRange(self):
        """GetComplexModeRange(self) -> float"""
        return _DigitalMicrograph.ImageDisplay_GetComplexModeRange(self)

    def GetContrastLimits(self):
        """GetContrastLimits(self)"""
        return _DigitalMicrograph.ImageDisplay_GetContrastLimits(self)

    def GetContrastMode(self):
        """GetContrastMode(self) -> long"""
        return _DigitalMicrograph.ImageDisplay_GetContrastMode(self)

    def GetContrastParameters(self):
        """GetContrastParameters(self)"""
        return _DigitalMicrograph.ImageDisplay_GetContrastParameters(self)

    def GetDisplayedImage(self):
        """GetDisplayedImage(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetDisplayedImage(self)

    def GetDisplayedLayers(self):
        """GetDisplayedLayers(self)"""
        return _DigitalMicrograph.ImageDisplay_GetDisplayedLayers(self)

    def GetDisplayType(self):
        """GetDisplayType(self) -> long"""
        return _DigitalMicrograph.ImageDisplay_GetDisplayType(self)

    def GetDoAutoSurvey(self):
        """GetDoAutoSurvey(self) -> bool"""
        return _DigitalMicrograph.ImageDisplay_GetDoAutoSurvey(self)

    def GetExportImage(self, *args):
        """GetExportImage(self, ulong mode, ImageDisplay clut_display) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetExportImage(self, *args)

    def GetImage(self):
        """GetImage(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetImage(self)

    def GetImageAdjustRect(self):
        """GetImageAdjustRect(self)"""
        return _DigitalMicrograph.ImageDisplay_GetImageAdjustRect(self)

    def GetImageAdjustRectInView(self):
        """GetImageAdjustRectInView(self)"""
        return _DigitalMicrograph.ImageDisplay_GetImageAdjustRectInView(self)

    def GetImageRect(self):
        """GetImageRect(self)"""
        return _DigitalMicrograph.ImageDisplay_GetImageRect(self)

    def GetImageRectInView(self):
        """GetImageRectInView(self)"""
        return _DigitalMicrograph.ImageDisplay_GetImageRectInView(self)

    def GetInputColorTable(self):
        """GetInputColorTable(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetInputColorTable(self)

    def GetIntensityTransformation(self):
        """GetIntensityTransformation(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetIntensityTransformation(self)

    def GetMinimumContrast(self):
        """GetMinimumContrast(self) -> float"""
        return _DigitalMicrograph.ImageDisplay_GetMinimumContrast(self)

    def GetOutputColorTable(self):
        """GetOutputColorTable(self) -> Image"""
        return _DigitalMicrograph.ImageDisplay_GetOutputColorTable(self)

    def GetROI(self, *args):
        """GetROI(self, long index) -> ROI"""
        return _DigitalMicrograph.ImageDisplay_GetROI(self, *args)

    def GetROISelectionStyle(self, *args):
        """GetROISelectionStyle(self, ROI r) -> long"""
        return _DigitalMicrograph.ImageDisplay_GetROISelectionStyle(self, *args)

    def GetSurveyTechnique(self):
        """GetSurveyTechnique(self) -> long"""
        return _DigitalMicrograph.ImageDisplay_GetSurveyTechnique(self)

    def IsCaptionOn(self):
        """IsCaptionOn(self) -> bool"""
        return _DigitalMicrograph.ImageDisplay_IsCaptionOn(self)

    def IsROISelected(self, *args):
        """IsROISelected(self, ROI roi) -> bool"""
        return _DigitalMicrograph.ImageDisplay_IsROISelected(self, *args)

    def LookupROI(self, *args):
        """LookupROI(self, char name) -> ROI"""
        return _DigitalMicrograph.ImageDisplay_LookupROI(self, *args)

    def LookupROIByID(self, *args):
        """LookupROIByID(self, long id) -> ROI"""
        return _DigitalMicrograph.ImageDisplay_LookupROIByID(self, *args)

    def RemoveKeyListener(self, *args):
        """RemoveKeyListener(self, char listener_key)"""
        return _DigitalMicrograph.ImageDisplay_RemoveKeyListener(self, *args)

    def SetCaptionOn(self, *args):
        """SetCaptionOn(self, bool on)"""
        return _DigitalMicrograph.ImageDisplay_SetCaptionOn(self, *args)

    def SetComplexMode(self, *args):
        """SetComplexMode(self, long mode)"""
        return _DigitalMicrograph.ImageDisplay_SetComplexMode(self, *args)

    def SetComplexModeRange(self, *args):
        """SetComplexModeRange(self, float range)"""
        return _DigitalMicrograph.ImageDisplay_SetComplexModeRange(self, *args)

    def SetContrastLimits(self, *args):
        """SetContrastLimits(self, float low, float hight)"""
        return _DigitalMicrograph.ImageDisplay_SetContrastLimits(self, *args)

    def SetContrastMode(self, *args):
        """SetContrastMode(self, long mode)"""
        return _DigitalMicrograph.ImageDisplay_SetContrastMode(self, *args)

    def SetContrastParameters(self, *args):
        """SetContrastParameters(self, float bright, float contrast)"""
        return _DigitalMicrograph.ImageDisplay_SetContrastParameters(self, *args)

    def SetDisplayedLayers(self, *args):
        """SetDisplayedLayers(self, long start, long end)"""
        return _DigitalMicrograph.ImageDisplay_SetDisplayedLayers(self, *args)

    def SetDoAutoSurvey(self, *args):
        """SetDoAutoSurvey(self, bool do_survey)"""
        return _DigitalMicrograph.ImageDisplay_SetDoAutoSurvey(self, *args)

    def SetImageRect(self, *args):
        """SetImageRect(self, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.ImageDisplay_SetImageRect(self, *args)

    def SetInputColorTable(self, *args):
        """SetInputColorTable(self, Image clut)"""
        return _DigitalMicrograph.ImageDisplay_SetInputColorTable(self, *args)

    def SetIntensityTransformation(self, *args):
        """SetIntensityTransformation(self, Image itt)"""
        return _DigitalMicrograph.ImageDisplay_SetIntensityTransformation(self, *args)

    def SetMinimumContrast(self, *args):
        """SetMinimumContrast(self, float contrast)"""
        return _DigitalMicrograph.ImageDisplay_SetMinimumContrast(self, *args)

    def SetROISelected(self, *args):
        """SetROISelected(self, ROI roi, bool select)"""
        return _DigitalMicrograph.ImageDisplay_SetROISelected(self, *args)

    def SetROISelectionStyle(self, *args):
        """SetROISelectionStyle(self, ROI r, long style)"""
        return _DigitalMicrograph.ImageDisplay_SetROISelectionStyle(self, *args)

    def SetSurveyTechnique(self, *args):
        """SetSurveyTechnique(self, long tech)"""
        return _DigitalMicrograph.ImageDisplay_SetSurveyTechnique(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_ImageDisplay
    __del__ = lambda self : None;
ImageDisplay_swigregister = _DigitalMicrograph.ImageDisplay_swigregister
ImageDisplay_swigregister(ImageDisplay)

class LinePlotImageDisplay(_object):
    """Proxy of C++ Gatan::DM::LinePlotImageDisplay class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinePlotImageDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinePlotImageDisplay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LinePlotImageDisplay"""
        this = _DigitalMicrograph.new_LinePlotImageDisplay()
        try: self.this.append(this)
        except: self.this = this
    def CountSlices(self):
        """CountSlices(self) -> long"""
        return _DigitalMicrograph.LinePlotImageDisplay_CountSlices(self)

    def GetBaseIntensity(self):
        """GetBaseIntensity(self) -> double"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetBaseIntensity(self)

    def GetContrastLimits(self):
        """GetContrastLimits(self)"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetContrastLimits(self)

    def GetDisplayedChannels(self):
        """GetDisplayedChannels(self)"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetDisplayedChannels(self)

    def GetDoAutoSurvey(self):
        """GetDoAutoSurvey(self)"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetDoAutoSurvey(self)

    def GetSlice(self):
        """GetSlice(self) -> long"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetSlice(self)

    def GetSliceComponentColor(self, *args):
        """GetSliceComponentColor(self, long slice_index, long comp_index)"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetSliceComponentColor(self, *args)

    def GetSliceDrawingStyle(self, *args):
        """GetSliceDrawingStyle(self, long slice_index) -> long"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetSliceDrawingStyle(self, *args)

    def GetTrackingStyle(self, *args):
        """GetTrackingStyle(self, uint16 track_style_x, uint16 track_style_y)"""
        return _DigitalMicrograph.LinePlotImageDisplay_GetTrackingStyle(self, *args)

    def IsBackgroundOn(self):
        """IsBackgroundOn(self) -> bool"""
        return _DigitalMicrograph.LinePlotImageDisplay_IsBackgroundOn(self)

    def IsFilled(self):
        """IsFilled(self) -> bool"""
        return _DigitalMicrograph.LinePlotImageDisplay_IsFilled(self)

    def IsFrameOn(self):
        """IsFrameOn(self) -> bool"""
        return _DigitalMicrograph.LinePlotImageDisplay_IsFrameOn(self)

    def IsGridOn(self):
        """IsGridOn(self) -> bool"""
        return _DigitalMicrograph.LinePlotImageDisplay_IsGridOn(self)

    def SetBackgroundOn(self, *args):
        """SetBackgroundOn(self, bool on)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetBackgroundOn(self, *args)

    def SetBaseIntensity(self, *args):
        """SetBaseIntensity(self, double base_intensity)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetBaseIntensity(self, *args)

    def SetContrastLimits(self, *args):
        """SetContrastLimits(self, float lowLimit, float highLimit)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetContrastLimits(self, *args)

    def SetDisplayedChannels(self, *args):
        """SetDisplayedChannels(self, float leftChannel, float rightChannel)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetDisplayedChannels(self, *args)

    def SetDoAutoSurvey(self, *args):
        """SetDoAutoSurvey(self, bool doAutoSurveyLow, bool doAutoSurveyHigh)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetDoAutoSurvey(self, *args)

    def SetFilled(self, *args):
        """SetFilled(self, bool on)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetFilled(self, *args)

    def SetFrameOn(self, *args):
        """SetFrameOn(self, bool on)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetFrameOn(self, *args)

    def SetGridOn(self, *args):
        """SetGridOn(self, bool on)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetGridOn(self, *args)

    def SetSlice(self, *args):
        """SetSlice(self, long slice)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetSlice(self, *args)

    def SetSliceComponentColor(self, *args):
        """
        SetSliceComponentColor(self, long slice_index, long comp_index, double r, double g, 
            double b)
        """
        return _DigitalMicrograph.LinePlotImageDisplay_SetSliceComponentColor(self, *args)

    def SetSliceDrawingStyle(self, *args):
        """SetSliceDrawingStyle(self, long slice_index, long style)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetSliceDrawingStyle(self, *args)

    def SetTrackingStyle(self, *args):
        """SetTrackingStyle(self, uint16 track_style_x, uint16 track_style_y)"""
        return _DigitalMicrograph.LinePlotImageDisplay_SetTrackingStyle(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_LinePlotImageDisplay
    __del__ = lambda self : None;
LinePlotImageDisplay_swigregister = _DigitalMicrograph.LinePlotImageDisplay_swigregister
LinePlotImageDisplay_swigregister(LinePlotImageDisplay)

class RasterImageDisplay(_object):
    """Proxy of C++ Gatan::DM::RasterImageDisplay class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasterImageDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RasterImageDisplay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> RasterImageDisplay"""
        this = _DigitalMicrograph.new_RasterImageDisplay()
        try: self.this.append(this)
        except: self.this = this
    def AddThresholdToMask(self, *args):
        """AddThresholdToMask(self, Image mask, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.RasterImageDisplay_AddThresholdToMask(self, *args)

    def GetThresholdLimits(self):
        """GetThresholdLimits(self)"""
        return _DigitalMicrograph.RasterImageDisplay_GetThresholdLimits(self)

    def IsThresholdOn(self):
        """IsThresholdOn(self) -> bool"""
        return _DigitalMicrograph.RasterImageDisplay_IsThresholdOn(self)

    def SetThresholdLimits(self, *args):
        """SetThresholdLimits(self, float low, float high)"""
        return _DigitalMicrograph.RasterImageDisplay_SetThresholdLimits(self, *args)

    def SetThresholdOn(self, *args):
        """SetThresholdOn(self, bool on)"""
        return _DigitalMicrograph.RasterImageDisplay_SetThresholdOn(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_RasterImageDisplay
    __del__ = lambda self : None;
RasterImageDisplay_swigregister = _DigitalMicrograph.RasterImageDisplay_swigregister
RasterImageDisplay_swigregister(RasterImageDisplay)

class SurfacePlotImageDisplay(_object):
    """Proxy of C++ Gatan::DM::SurfacePlotImageDisplay class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfacePlotImageDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfacePlotImageDisplay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SurfacePlotImageDisplay"""
        this = _DigitalMicrograph.new_SurfacePlotImageDisplay()
        try: self.this.append(this)
        except: self.this = this
    def GetCubeAxes(self):
        """GetCubeAxes(self)"""
        return _DigitalMicrograph.SurfacePlotImageDisplay_GetCubeAxes(self)

    def GetCubePoint(self, *args):
        """GetCubePoint(self, long which_point)"""
        return _DigitalMicrograph.SurfacePlotImageDisplay_GetCubePoint(self, *args)

    def IsShadingOn(self):
        """IsShadingOn(self) -> bool"""
        return _DigitalMicrograph.SurfacePlotImageDisplay_IsShadingOn(self)

    def SetCubeAxes(self, *args):
        """
        SetCubeAxes(self, float x_axis_x, float x_axis_y, float y_axis_x, float y_axis_y, 
            float z_axis)
        """
        return _DigitalMicrograph.SurfacePlotImageDisplay_SetCubeAxes(self, *args)

    def SetShadingOn(self, *args):
        """SetShadingOn(self, bool on)"""
        return _DigitalMicrograph.SurfacePlotImageDisplay_SetShadingOn(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_SurfacePlotImageDisplay
    __del__ = lambda self : None;
SurfacePlotImageDisplay_swigregister = _DigitalMicrograph.SurfacePlotImageDisplay_swigregister
SurfacePlotImageDisplay_swigregister(SurfacePlotImageDisplay)

class ImageDocument(_object):
    """Proxy of C++ Gatan::DM::ImageDocument class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageDocument, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ImageDocument"""
        this = _DigitalMicrograph.new_ImageDocument()
        try: self.this.append(this)
        except: self.this = this
    def AddImage(self, *args):
        """AddImage(self, Image image)"""
        return _DigitalMicrograph.ImageDocument_AddImage(self, *args)

    def AddImageDisplay(self, *args):
        """AddImageDisplay(self, Image image, long displayType) -> ImageDisplay"""
        return _DigitalMicrograph.ImageDocument_AddImageDisplay(self, *args)

    def AddToUserInterface(self):
        """AddToUserInterface(self)"""
        return _DigitalMicrograph.ImageDocument_AddToUserInterface(self)

    def Clean(self):
        """Clean(self)"""
        return _DigitalMicrograph.ImageDocument_Clean(self)

    def Clone(self, *args):
        """Clone(self, bool doDeepCopy) -> ImageDocument"""
        return _DigitalMicrograph.ImageDocument_Clone(self, *args)

    def Close(self, *args):
        """Close(self, bool saving)"""
        return _DigitalMicrograph.ImageDocument_Close(self, *args)

    def CountImages(self):
        """CountImages(self) -> long"""
        return _DigitalMicrograph.ImageDocument_CountImages(self)

    def CreateRGBImageFromDocument(self, *args):
        """CreateRGBImageFromDocument(self, long width, long height, long extract_style, long constraints) -> Image"""
        return _DigitalMicrograph.ImageDocument_CreateRGBImageFromDocument(self, *args)

    def DeleteImage(self, *args):
        """DeleteImage(self, Image image)"""
        return _DigitalMicrograph.ImageDocument_DeleteImage(self, *args)

    def DoesImageWithIDExist(self, *args):
        """DoesImageWithIDExist(self, long id) -> bool"""
        return _DigitalMicrograph.ImageDocument_DoesImageWithIDExist(self, *args)

    def EnsurePlacedOnPage(self):
        """EnsurePlacedOnPage(self)"""
        return _DigitalMicrograph.ImageDocument_EnsurePlacedOnPage(self)

    def GetAsPICT(self):
        """GetAsPICT(self) -> long"""
        return _DigitalMicrograph.ImageDocument_GetAsPICT(self)

    def GetComponentByID(self, *args):
        """GetComponentByID(self, long id) -> Component"""
        return _DigitalMicrograph.ImageDocument_GetComponentByID(self, *args)

    def GetID(self):
        """GetID(self) -> long"""
        return _DigitalMicrograph.ImageDocument_GetID(self)

    def GetImage(self, *args):
        """GetImage(self, long position) -> Image"""
        return _DigitalMicrograph.ImageDocument_GetImage(self, *args)

    def GetImageByID(self, *args):
        """GetImageByID(self, long id) -> Image"""
        return _DigitalMicrograph.ImageDocument_GetImageByID(self, *args)

    def GetImageModeDisplay(self):
        """GetImageModeDisplay(self) -> ImageDisplay"""
        return _DigitalMicrograph.ImageDocument_GetImageModeDisplay(self)

    def GetMinimumPointSize(self):
        """GetMinimumPointSize(self)"""
        return _DigitalMicrograph.ImageDocument_GetMinimumPointSize(self)

    def GetName(self):
        """GetName(self) -> String"""
        return _DigitalMicrograph.ImageDocument_GetName(self)

    def GetPageBounds(self):
        """GetPageBounds(self)"""
        return _DigitalMicrograph.ImageDocument_GetPageBounds(self)

    def GetPageResolution_72dpi(self):
        """GetPageResolution_72dpi(self)"""
        return _DigitalMicrograph.ImageDocument_GetPageResolution_72dpi(self)

    def GetPageResolution_Printer(self):
        """GetPageResolution_Printer(self)"""
        return _DigitalMicrograph.ImageDocument_GetPageResolution_Printer(self)

    def GetPaperBounds(self):
        """GetPaperBounds(self)"""
        return _DigitalMicrograph.ImageDocument_GetPaperBounds(self)

    def GetPreferredViewRect(self):
        """GetPreferredViewRect(self)"""
        return _DigitalMicrograph.ImageDocument_GetPreferredViewRect(self)

    def GetReferencePointSize(self):
        """GetReferencePointSize(self)"""
        return _DigitalMicrograph.ImageDocument_GetReferencePointSize(self)

    def GetRootComponent(self):
        """GetRootComponent(self) -> Component"""
        return _DigitalMicrograph.ImageDocument_GetRootComponent(self)

    def GetTagGroup(self):
        """GetTagGroup(self) -> TagGroup"""
        return _DigitalMicrograph.ImageDocument_GetTagGroup(self)

    def GetUnzoomedPointSize(self):
        """GetUnzoomedPointSize(self)"""
        return _DigitalMicrograph.ImageDocument_GetUnzoomedPointSize(self)

    def GetViewExtent(self):
        """GetViewExtent(self)"""
        return _DigitalMicrograph.ImageDocument_GetViewExtent(self)

    def GetViewToWindowTransform(self):
        """GetViewToWindowTransform(self)"""
        return _DigitalMicrograph.ImageDocument_GetViewToWindowTransform(self)

    def GetVisibleViewRect(self):
        """GetVisibleViewRect(self)"""
        return _DigitalMicrograph.ImageDocument_GetVisibleViewRect(self)

    def GetWindow(self):
        """GetWindow(self) -> Window"""
        return _DigitalMicrograph.ImageDocument_GetWindow(self)

    def HasBeenPlacedOnPage(self):
        """HasBeenPlacedOnPage(self) -> bool"""
        return _DigitalMicrograph.ImageDocument_HasBeenPlacedOnPage(self)

    def Hide(self):
        """Hide(self)"""
        return _DigitalMicrograph.ImageDocument_Hide(self)

    def IsInImageMode(self):
        """IsInImageMode(self) -> bool"""
        return _DigitalMicrograph.ImageDocument_IsInImageMode(self)

    def IsInPageMode(self):
        """IsInPageMode(self) -> bool"""
        return _DigitalMicrograph.ImageDocument_IsInPageMode(self)

    def MaximizeRectInView(self, *args):
        """MaximizeRectInView(self, float top, float left, float bottom, float right)"""
        return _DigitalMicrograph.ImageDocument_MaximizeRectInView(self, *args)

    def Print(self):
        """Print(self) -> bool"""
        return _DigitalMicrograph.ImageDocument_Print(self)

    def RemoveFromUserInterface(self):
        """RemoveFromUserInterface(self)"""
        return _DigitalMicrograph.ImageDocument_RemoveFromUserInterface(self)

    def SaveToFile(self, *args):
        """SaveToFile(self, char handler, char fileName)"""
        return _DigitalMicrograph.ImageDocument_SaveToFile(self, *args)

    def SetCurrentViewAsUnzoomed(self):
        """SetCurrentViewAsUnzoomed(self)"""
        return _DigitalMicrograph.ImageDocument_SetCurrentViewAsUnzoomed(self)

    def SetName(self, *args):
        """SetName(self, String name)"""
        return _DigitalMicrograph.ImageDocument_SetName(self, *args)

    def SetRectInView(self, *args):
        """
        SetRectInView(self, float v_t, float v_l, float v_b, float v_r, float w_t, 
            float w_l, float w_b, float w_r)
        """
        return _DigitalMicrograph.ImageDocument_SetRectInView(self, *args)

    def Show(self):
        """Show(self) -> Window"""
        return _DigitalMicrograph.ImageDocument_Show(self)

    def ShowAtPosition(self, *args):
        """ShowAtPosition(self, long x, long y) -> Window"""
        return _DigitalMicrograph.ImageDocument_ShowAtPosition(self, *args)

    def ShowAtRect(self, *args):
        """ShowAtRect(self, long top, long left, long bottom, long right) -> Window"""
        return _DigitalMicrograph.ImageDocument_ShowAtRect(self, *args)

    def SwitchToImageMode(self, *args):
        """SwitchToImageMode(self, ImageDisplay imgDisp)"""
        return _DigitalMicrograph.ImageDocument_SwitchToImageMode(self, *args)

    def SwitchToPageMode(self):
        """SwitchToPageMode(self)"""
        return _DigitalMicrograph.ImageDocument_SwitchToPageMode(self)

    def UpdateDisplay(self):
        """UpdateDisplay(self)"""
        return _DigitalMicrograph.ImageDocument_UpdateDisplay(self)

    __swig_destroy__ = _DigitalMicrograph.delete_ImageDocument
    __del__ = lambda self : None;
ImageDocument_swigregister = _DigitalMicrograph.ImageDocument_swigregister
ImageDocument_swigregister(ImageDocument)

class TagGroup(_object):
    """Proxy of C++ Gatan::DM::TagGroup class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TagGroup"""
        this = _DigitalMicrograph.new_TagGroup()
        try: self.this.append(this)
        except: self.this = this
    def AddLabeledTagGroup(self, *args):
        """AddLabeledTagGroup(self, char label, TagGroup newGroup) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_AddLabeledTagGroup(self, *args)

    def AddTagGroupAfter(self, *args):
        """AddTagGroupAfter(self, long ref_index, TagGroup newGroup) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_AddTagGroupAfter(self, *args)

    def AddTagGroupAtBeginning(self, *args):
        """AddTagGroupAtBeginning(self, TagGroup newGroup) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_AddTagGroupAtBeginning(self, *args)

    def AddTagGroupAtEnd(self, *args):
        """AddTagGroupAtEnd(self, TagGroup newGroup) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_AddTagGroupAtEnd(self, *args)

    def AddTagGroupBefore(self, *args):
        """AddTagGroupBefore(self, long ref_index, TagGroup newGroup) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_AddTagGroupBefore(self, *args)

    def Clone(self):
        """Clone(self) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_Clone(self)

    def CopyTag(self, *args):
        """CopyTag(self, TagGroup srcGroup, long srcIndex) -> long"""
        return _DigitalMicrograph.TagGroup_CopyTag(self, *args)

    def CopyTagsFrom(self, *args):
        """CopyTagsFrom(self, TagGroup srcGroup)"""
        return _DigitalMicrograph.TagGroup_CopyTagsFrom(self, *args)

    def CopyTagToIndex(self, *args):
        """CopyTagToIndex(self, long dstIndex, TagGroup srcGroup, long srcIndex)"""
        return _DigitalMicrograph.TagGroup_CopyTagToIndex(self, *args)

    def CountTags(self):
        """CountTags(self) -> long"""
        return _DigitalMicrograph.TagGroup_CountTags(self)

    def CreateGroupTagAfter(self, *args):
        """CreateGroupTagAfter(self, long ref_index) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateGroupTagAfter(self, *args)

    def CreateGroupTagAtBeginning(self):
        """CreateGroupTagAtBeginning(self) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateGroupTagAtBeginning(self)

    def CreateGroupTagAtEnd(self):
        """CreateGroupTagAtEnd(self) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateGroupTagAtEnd(self)

    def CreateGroupTagBefore(self, *args):
        """CreateGroupTagBefore(self, long ref_index) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateGroupTagBefore(self, *args)

    def CreateListTagAfter(self, *args):
        """CreateListTagAfter(self, long ref_index) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateListTagAfter(self, *args)

    def CreateListTagAtBeginning(self):
        """CreateListTagAtBeginning(self) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateListTagAtBeginning(self)

    def CreateListTagAtEnd(self):
        """CreateListTagAtEnd(self) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateListTagAtEnd(self)

    def CreateListTagBefore(self, *args):
        """CreateListTagBefore(self, long ref_index) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateListTagBefore(self, *args)

    def CreateNewLabeledGroup(self, *args):
        """CreateNewLabeledGroup(self, char label) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateNewLabeledGroup(self, *args)

    def CreateNewLabeledList(self, *args):
        """CreateNewLabeledList(self, char label) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_CreateNewLabeledList(self, *args)

    def CreateNewLabeledTag(self, *args):
        """CreateNewLabeledTag(self, char label) -> long"""
        return _DigitalMicrograph.TagGroup_CreateNewLabeledTag(self, *args)

    def CreateNewTagAfter(self, *args):
        """CreateNewTagAfter(self, long ref_index) -> long"""
        return _DigitalMicrograph.TagGroup_CreateNewTagAfter(self, *args)

    def CreateNewTagAtBeginning(self):
        """CreateNewTagAtBeginning(self) -> long"""
        return _DigitalMicrograph.TagGroup_CreateNewTagAtBeginning(self)

    def CreateNewTagAtEnd(self):
        """CreateNewTagAtEnd(self) -> long"""
        return _DigitalMicrograph.TagGroup_CreateNewTagAtEnd(self)

    def CreateNewTagBefore(self, *args):
        """CreateNewTagBefore(self, long ref_index) -> long"""
        return _DigitalMicrograph.TagGroup_CreateNewTagBefore(self, *args)

    def DeleteAllTags(self):
        """DeleteAllTags(self)"""
        return _DigitalMicrograph.TagGroup_DeleteAllTags(self)

    def DeleteTagWithIndex(self, *args):
        """DeleteTagWithIndex(self, long index)"""
        return _DigitalMicrograph.TagGroup_DeleteTagWithIndex(self, *args)

    def DeleteTagWithLabel(self, *args):
        """DeleteTagWithLabel(self, char tagPath)"""
        return _DigitalMicrograph.TagGroup_DeleteTagWithLabel(self, *args)

    def DoesTagExist(self, *args):
        """DoesTagExist(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_DoesTagExist(self, *args)

    def ExecuteScriptGroup(self, *args):
        """ExecuteScriptGroup(self, char form)"""
        return _DigitalMicrograph.TagGroup_ExecuteScriptGroup(self, *args)

    def GetIndexedTagAsArray(self, *args):
        """GetIndexedTagAsArray(self, ulong index, Image image) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsArray(self, *args)

    def GetIndexedTagAsBoolean(self, *args):
        """GetIndexedTagAsBoolean(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsBoolean(self, *args)

    def GetIndexedTagAsDouble(self, *args):
        """GetIndexedTagAsDouble(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsDouble(self, *args)

    def GetIndexedTagAsDoubleComplex(self, *args):
        """GetIndexedTagAsDoubleComplex(self, long index, complex128_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsDoubleComplex(self, *args)

    def GetIndexedTagAsEightBitColor(self, *args):
        """GetIndexedTagAsEightBitColor(self, long index, rgba_uint8_os_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsEightBitColor(self, *args)

    def GetIndexedTagAsFloat(self, *args):
        """GetIndexedTagAsFloat(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsFloat(self, *args)

    def GetIndexedTagAsFloatComplex(self, *args):
        """GetIndexedTagAsFloatComplex(self, long index, complex128_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsFloatComplex(self, *args)

    def GetIndexedTagAsFloatPoint(self, *args):
        """GetIndexedTagAsFloatPoint(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsFloatPoint(self, *args)

    def GetIndexedTagAsFloatRect(self, *args):
        """GetIndexedTagAsFloatRect(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsFloatRect(self, *args)

    def GetIndexedTagAsLong(self, *args):
        """GetIndexedTagAsLong(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsLong(self, *args)

    def GetIndexedTagAsLongPoint(self, *args):
        """GetIndexedTagAsLongPoint(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsLongPoint(self, *args)

    def GetIndexedTagAsLongRect(self, *args):
        """GetIndexedTagAsLongRect(self, long index) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsLongRect(self, *args)

    def GetIndexedTagAsShort(self, *args):
        """GetIndexedTagAsShort(self, long index, short number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsShort(self, *args)

    def GetIndexedTagAsShortPoint(self, *args):
        """GetIndexedTagAsShortPoint(self, long index, short x, short y) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsShortPoint(self, *args)

    def GetIndexedTagAsShortRect(self, *args):
        """GetIndexedTagAsShortRect(self, long index, short t, short l, short b, short r) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsShortRect(self, *args)

    def GetIndexedTagAsTagGroup(self, *args):
        """GetIndexedTagAsTagGroup(self, long index, TagGroup subGroup) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsTagGroup(self, *args)

    def GetIndexedTagAsText(self, *args):
        """GetIndexedTagAsText(self, long index, String str) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsText(self, *args)

    def GetIndexedTagAsUInt16(self, *args):
        """GetIndexedTagAsUInt16(self, long index, uint16 number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsUInt16(self, *args)

    def GetIndexedTagAsUInt32(self, *args):
        """GetIndexedTagAsUInt32(self, long index, ulong number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetIndexedTagAsUInt32(self, *args)

    def GetOrCreateTagGroup(self, *args):
        """GetOrCreateTagGroup(self, char tagPath) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_GetOrCreateTagGroup(self, *args)

    def GetOrCreateTagList(self, *args):
        """GetOrCreateTagList(self, char tagPath) -> TagGroup"""
        return _DigitalMicrograph.TagGroup_GetOrCreateTagList(self, *args)

    def GetSeeds(self):
        """GetSeeds(self) -> long"""
        return _DigitalMicrograph.TagGroup_GetSeeds(self)

    def GetTagAsArray(self, *args):
        """GetTagAsArray(self, char tagPath, Image image) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsArray(self, *args)

    def GetTagAsBoolean(self, *args):
        """GetTagAsBoolean(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsBoolean(self, *args)

    def GetTagAsDouble(self, *args):
        """GetTagAsDouble(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsDouble(self, *args)

    def GetTagAsDoubleComplex(self, *args):
        """GetTagAsDoubleComplex(self, char tagPath, complex128_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsDoubleComplex(self, *args)

    def GetTagAsEightBitColor(self, *args):
        """GetTagAsEightBitColor(self, char tagPath, rgba_uint8_os_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsEightBitColor(self, *args)

    def GetTagAsFloat(self, *args):
        """GetTagAsFloat(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsFloat(self, *args)

    def GetTagAsFloatComplex(self, *args):
        """GetTagAsFloatComplex(self, char tagPath, complex128_t c) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsFloatComplex(self, *args)

    def GetTagAsFloatPoint(self, *args):
        """GetTagAsFloatPoint(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsFloatPoint(self, *args)

    def GetTagAsFloatRect(self, *args):
        """GetTagAsFloatRect(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsFloatRect(self, *args)

    def GetTagAsLong(self, *args):
        """GetTagAsLong(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsLong(self, *args)

    def GetTagAsLongPoint(self, *args):
        """GetTagAsLongPoint(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsLongPoint(self, *args)

    def GetTagAsLongRect(self, *args):
        """GetTagAsLongRect(self, char tagPath) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsLongRect(self, *args)

    def GetTagAsRGBUInt16(self, *args):
        """
        GetTagAsRGBUInt16(self, long index, uint16 r, uint16 g, uint16 b) -> bool
        GetTagAsRGBUInt16(self, char tagPath, uint16 r, uint16 g, uint16 b) -> bool
        """
        return _DigitalMicrograph.TagGroup_GetTagAsRGBUInt16(self, *args)

    def GetTagAsShort(self, *args):
        """GetTagAsShort(self, char tagPath, short number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsShort(self, *args)

    def GetTagAsShortPoint(self, *args):
        """GetTagAsShortPoint(self, char tagPath, short x, short y) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsShortPoint(self, *args)

    def GetTagAsShortRect(self, *args):
        """GetTagAsShortRect(self, char tagPath, short t, short l, short b, short r) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsShortRect(self, *args)

    def GetTagAsTagGroup(self, *args):
        """GetTagAsTagGroup(self, char tagPath, TagGroup subGroup) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsTagGroup(self, *args)

    def GetTagAsText(self, *args):
        """GetTagAsText(self, char tagPath, String str) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsText(self, *args)

    def GetTagAsUInt16(self, *args):
        """GetTagAsUInt16(self, char tagPath, uint16 number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsUInt16(self, *args)

    def GetTagAsUInt32(self, *args):
        """GetTagAsUInt32(self, char tagPath, ulong number) -> bool"""
        return _DigitalMicrograph.TagGroup_GetTagAsUInt32(self, *args)

    def GetTagLabel(self, *args):
        """GetTagLabel(self, long index) -> String"""
        return _DigitalMicrograph.TagGroup_GetTagLabel(self, *args)

    def GetTagSize(self, *args):
        """GetTagSize(self, long index) -> long"""
        return _DigitalMicrograph.TagGroup_GetTagSize(self, *args)

    def GetTagType(self, *args):
        """GetTagType(self, long index, long type_index) -> long"""
        return _DigitalMicrograph.TagGroup_GetTagType(self, *args)

    def GetTagTypeLength(self, *args):
        """GetTagTypeLength(self, long index) -> long"""
        return _DigitalMicrograph.TagGroup_GetTagTypeLength(self, *args)

    def HasChangedSince(self, *args):
        """HasChangedSince(self, long seeds) -> bool"""
        return _DigitalMicrograph.TagGroup_HasChangedSince(self, *args)

    def InsertTagAsArray(self, *args):
        """InsertTagAsArray(self, ulong ref_index, Image image)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsArray(self, *args)

    def InsertTagAsBoolean(self, *args):
        """InsertTagAsBoolean(self, long ref_index, bool val)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsBoolean(self, *args)

    def InsertTagAsDouble(self, *args):
        """InsertTagAsDouble(self, long ref_index, double number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsDouble(self, *args)

    def InsertTagAsDoubleComplex(self, *args):
        """InsertTagAsDoubleComplex(self, long ref_index, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsDoubleComplex(self, *args)

    def InsertTagAsEightBitColor(self, *args):
        """InsertTagAsEightBitColor(self, long ref_index, rgba_uint8_os_t c)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsEightBitColor(self, *args)

    def InsertTagAsFloat(self, *args):
        """InsertTagAsFloat(self, long ref_index, float number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsFloat(self, *args)

    def InsertTagAsFloatComplex(self, *args):
        """InsertTagAsFloatComplex(self, long ref_index, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsFloatComplex(self, *args)

    def InsertTagAsFloatPoint(self, *args):
        """InsertTagAsFloatPoint(self, long ref_index, float x, float y)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsFloatPoint(self, *args)

    def InsertTagAsFloatRect(self, *args):
        """InsertTagAsFloatRect(self, long ref_index, float t, float l, float b, float r)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsFloatRect(self, *args)

    def InsertTagAsLong(self, *args):
        """InsertTagAsLong(self, long ref_index, long number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsLong(self, *args)

    def InsertTagAsLongPoint(self, *args):
        """InsertTagAsLongPoint(self, long ref_index, long x, long y)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsLongPoint(self, *args)

    def InsertTagAsLongRect(self, *args):
        """InsertTagAsLongRect(self, long ref_index, long t, long l, long b, long r)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsLongRect(self, *args)

    def InsertTagAsRGBUInt16(self, *args):
        """InsertTagAsRGBUInt16(self, long ref_index, uint16 r, uint16 g, uint16 b)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsRGBUInt16(self, *args)

    def InsertTagAsShort(self, *args):
        """InsertTagAsShort(self, long ref_index, short number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsShort(self, *args)

    def InsertTagAsShortPoint(self, *args):
        """InsertTagAsShortPoint(self, long ref_index, short x, short y)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsShortPoint(self, *args)

    def InsertTagAsShortRect(self, *args):
        """InsertTagAsShortRect(self, long ref_index, short t, short l, short b, short r)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsShortRect(self, *args)

    def InsertTagAsString(self, *args):
        """InsertTagAsString(self, long ref_index, String s)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsString(self, *args)

    def InsertTagAsTagGroup(self, *args):
        """InsertTagAsTagGroup(self, long ref_index, TagGroup subGroup)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsTagGroup(self, *args)

    def InsertTagAsText(self, *args):
        """InsertTagAsText(self, long ref_index, String s)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsText(self, *args)

    def InsertTagAsUInt16(self, *args):
        """InsertTagAsUInt16(self, long ref_index, uint16 number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsUInt16(self, *args)

    def InsertTagAsUInt32(self, *args):
        """InsertTagAsUInt32(self, long ref_index, ulong number)"""
        return _DigitalMicrograph.TagGroup_InsertTagAsUInt32(self, *args)

    def IsList(self):
        """IsList(self) -> bool"""
        return _DigitalMicrograph.TagGroup_IsList(self)

    def IsOpen(self):
        """IsOpen(self) -> bool"""
        return _DigitalMicrograph.TagGroup_IsOpen(self)

    def LoadFromFile(self, *args):
        """LoadFromFile(self, String path) -> bool"""
        return _DigitalMicrograph.TagGroup_LoadFromFile(self, *args)

    def LoadFromFileWithLabel(self, *args):
        """LoadFromFileWithLabel(self, String path, String label) -> bool"""
        return _DigitalMicrograph.TagGroup_LoadFromFileWithLabel(self, *args)

    def MarkAsChanged(self):
        """MarkAsChanged(self)"""
        return _DigitalMicrograph.TagGroup_MarkAsChanged(self)

    def OpenBrowserWindow(self, *args):
        """OpenBrowserWindow(self, bool isFileBased) -> Window"""
        return _DigitalMicrograph.TagGroup_OpenBrowserWindow(self, *args)

    def ParseAndCreateTagPath(self, *args):
        """ParseAndCreateTagPath(self, String tagPath, TagGroup parentGroup, String label) -> long"""
        return _DigitalMicrograph.TagGroup_ParseAndCreateTagPath(self, *args)

    def ParseTagPath(self, *args):
        """ParseTagPath(self, String tagPath, TagGroup parentGroup, String label) -> long"""
        return _DigitalMicrograph.TagGroup_ParseTagPath(self, *args)

    def ReleaseSeeds(self, *args):
        """ReleaseSeeds(self, long seeds)"""
        return _DigitalMicrograph.TagGroup_ReleaseSeeds(self, *args)

    def ReplaceTagsWithCopy(self, *args):
        """ReplaceTagsWithCopy(self, TagGroup srcGroup)"""
        return _DigitalMicrograph.TagGroup_ReplaceTagsWithCopy(self, *args)

    def SaveToFile(self, *args):
        """SaveToFile(self, String path)"""
        return _DigitalMicrograph.TagGroup_SaveToFile(self, *args)

    def SaveToFileWithLabel(self, *args):
        """SaveToFileWithLabel(self, String path, String label)"""
        return _DigitalMicrograph.TagGroup_SaveToFileWithLabel(self, *args)

    def SetIndexedTagAsArray(self, *args):
        """SetIndexedTagAsArray(self, ulong index, Image image)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsArray(self, *args)

    def SetIndexedTagAsBoolean(self, *args):
        """SetIndexedTagAsBoolean(self, long index, bool val)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsBoolean(self, *args)

    def SetIndexedTagAsDouble(self, *args):
        """SetIndexedTagAsDouble(self, long index, double number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsDouble(self, *args)

    def SetIndexedTagAsDoubleComplex(self, *args):
        """SetIndexedTagAsDoubleComplex(self, long index, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsDoubleComplex(self, *args)

    def SetIndexedTagAsEightBitColor(self, *args):
        """SetIndexedTagAsEightBitColor(self, long index, rgba_uint8_os_t c)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsEightBitColor(self, *args)

    def SetIndexedTagAsFloat(self, *args):
        """SetIndexedTagAsFloat(self, long index, float number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsFloat(self, *args)

    def SetIndexedTagAsFloatComplex(self, *args):
        """SetIndexedTagAsFloatComplex(self, long index, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsFloatComplex(self, *args)

    def SetIndexedTagAsFloatPoint(self, *args):
        """SetIndexedTagAsFloatPoint(self, long index, float x, float y)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsFloatPoint(self, *args)

    def SetIndexedTagAsFloatRect(self, *args):
        """SetIndexedTagAsFloatRect(self, long index, float t, float l, float b, float r)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsFloatRect(self, *args)

    def SetIndexedTagAsLong(self, *args):
        """SetIndexedTagAsLong(self, long index, long number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsLong(self, *args)

    def SetIndexedTagAsLongPoint(self, *args):
        """SetIndexedTagAsLongPoint(self, long index, long x, long y)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsLongPoint(self, *args)

    def SetIndexedTagAsLongRect(self, *args):
        """SetIndexedTagAsLongRect(self, long index, long t, long l, long b, long r)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsLongRect(self, *args)

    def SetIndexedTagAsRGBUInt16(self, *args):
        """SetIndexedTagAsRGBUInt16(self, long index, uint16 r, uint16 g, uint16 b)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsRGBUInt16(self, *args)

    def SetIndexedTagAsShort(self, *args):
        """SetIndexedTagAsShort(self, long index, short number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsShort(self, *args)

    def SetIndexedTagAsShortPoint(self, *args):
        """SetIndexedTagAsShortPoint(self, long index, short x, short y)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsShortPoint(self, *args)

    def SetIndexedTagAsShortRect(self, *args):
        """SetIndexedTagAsShortRect(self, long index, short t, short l, short b, short r)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsShortRect(self, *args)

    def SetIndexedTagAsString(self, *args):
        """SetIndexedTagAsString(self, long index, String s)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsString(self, *args)

    def SetIndexedTagAsTagGroup(self, *args):
        """SetIndexedTagAsTagGroup(self, long index, TagGroup subGroup)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsTagGroup(self, *args)

    def SetIndexedTagAsText(self, *args):
        """SetIndexedTagAsText(self, long index, String s)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsText(self, *args)

    def SetIndexedTagAsUInt16(self, *args):
        """SetIndexedTagAsUInt16(self, long index, uint16 number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsUInt16(self, *args)

    def SetIndexedTagAsUInt32(self, *args):
        """SetIndexedTagAsUInt32(self, long index, ulong number)"""
        return _DigitalMicrograph.TagGroup_SetIndexedTagAsUInt32(self, *args)

    def SetIsOpen(self, *args):
        """SetIsOpen(self, bool is_open)"""
        return _DigitalMicrograph.TagGroup_SetIsOpen(self, *args)

    def SetTagAsArray(self, *args):
        """SetTagAsArray(self, char tagPath, Image image)"""
        return _DigitalMicrograph.TagGroup_SetTagAsArray(self, *args)

    def SetTagAsBoolean(self, *args):
        """SetTagAsBoolean(self, char tagPath, bool val)"""
        return _DigitalMicrograph.TagGroup_SetTagAsBoolean(self, *args)

    def SetTagAsDouble(self, *args):
        """SetTagAsDouble(self, char tagPath, double number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsDouble(self, *args)

    def SetTagAsDoubleComplex(self, *args):
        """SetTagAsDoubleComplex(self, char tagPath, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_SetTagAsDoubleComplex(self, *args)

    def SetTagAsEightBitColor(self, *args):
        """SetTagAsEightBitColor(self, char tagPath, rgba_uint8_os_t c)"""
        return _DigitalMicrograph.TagGroup_SetTagAsEightBitColor(self, *args)

    def SetTagAsFloat(self, *args):
        """SetTagAsFloat(self, char tagPath, float number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsFloat(self, *args)

    def SetTagAsFloatComplex(self, *args):
        """SetTagAsFloatComplex(self, char tagPath, complex128_t c)"""
        return _DigitalMicrograph.TagGroup_SetTagAsFloatComplex(self, *args)

    def SetTagAsFloatPoint(self, *args):
        """SetTagAsFloatPoint(self, char tagPath, float x, float y)"""
        return _DigitalMicrograph.TagGroup_SetTagAsFloatPoint(self, *args)

    def SetTagAsFloatRect(self, *args):
        """SetTagAsFloatRect(self, char tagPath, float t, float l, float b, float r)"""
        return _DigitalMicrograph.TagGroup_SetTagAsFloatRect(self, *args)

    def SetTagAsLong(self, *args):
        """SetTagAsLong(self, char tagPath, long number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsLong(self, *args)

    def SetTagAsLongPoint(self, *args):
        """SetTagAsLongPoint(self, char tagPath, long x, long y)"""
        return _DigitalMicrograph.TagGroup_SetTagAsLongPoint(self, *args)

    def SetTagAsLongRect(self, *args):
        """SetTagAsLongRect(self, char tagPath, long t, long l, long b, long r)"""
        return _DigitalMicrograph.TagGroup_SetTagAsLongRect(self, *args)

    def SetTagAsRGBUInt16(self, *args):
        """SetTagAsRGBUInt16(self, char tagPath, uint16 r, uint16 g, uint16 b)"""
        return _DigitalMicrograph.TagGroup_SetTagAsRGBUInt16(self, *args)

    def SetTagAsShort(self, *args):
        """SetTagAsShort(self, char tagPath, short number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsShort(self, *args)

    def SetTagAsShortPoint(self, *args):
        """SetTagAsShortPoint(self, char tagPath, short x, short y)"""
        return _DigitalMicrograph.TagGroup_SetTagAsShortPoint(self, *args)

    def SetTagAsShortRect(self, *args):
        """SetTagAsShortRect(self, char tagPath, short t, short l, short b, short r)"""
        return _DigitalMicrograph.TagGroup_SetTagAsShortRect(self, *args)

    def SetTagAsString(self, *args):
        """SetTagAsString(self, char tagPath, String s)"""
        return _DigitalMicrograph.TagGroup_SetTagAsString(self, *args)

    def SetTagAsTagGroup(self, *args):
        """SetTagAsTagGroup(self, char tagPath, TagGroup subGroup)"""
        return _DigitalMicrograph.TagGroup_SetTagAsTagGroup(self, *args)

    def SetTagAsText(self, *args):
        """SetTagAsText(self, char tagPath, String s)"""
        return _DigitalMicrograph.TagGroup_SetTagAsText(self, *args)

    def SetTagAsUInt16(self, *args):
        """SetTagAsUInt16(self, char tagPath, uint16 number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsUInt16(self, *args)

    def SetTagAsUInt32(self, *args):
        """SetTagAsUInt32(self, char tagPath, ulong number)"""
        return _DigitalMicrograph.TagGroup_SetTagAsUInt32(self, *args)

    def SetTagRGBBitmap(self, *args):
        """SetTagRGBBitmap(self, char tagPath, Image image)"""
        return _DigitalMicrograph.TagGroup_SetTagRGBBitmap(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_TagGroup
    __del__ = lambda self : None;
TagGroup_swigregister = _DigitalMicrograph.TagGroup_swigregister
TagGroup_swigregister(TagGroup)

class Window(_object):
    """Proxy of C++ Gatan::DM::Window class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Window, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Window"""
        this = _DigitalMicrograph.new_Window()
        try: self.this.append(this)
        except: self.this = this
    def Close(self, *args):
        """Close(self, bool verify)"""
        return _DigitalMicrograph.Window_Close(self, *args)

    def GetContentBounds(self):
        """GetContentBounds(self)"""
        return _DigitalMicrograph.Window_GetContentBounds(self)

    def GetContentPosition(self):
        """GetContentPosition(self)"""
        return _DigitalMicrograph.Window_GetContentPosition(self)

    def GetContentSize(self):
        """GetContentSize(self)"""
        return _DigitalMicrograph.Window_GetContentSize(self)

    def GetFrameBounds(self):
        """GetFrameBounds(self)"""
        return _DigitalMicrograph.Window_GetFrameBounds(self)

    def GetFramePosition(self):
        """GetFramePosition(self)"""
        return _DigitalMicrograph.Window_GetFramePosition(self)

    def GetFrameSize(self):
        """GetFrameSize(self)"""
        return _DigitalMicrograph.Window_GetFrameSize(self)

    def GetMousePosition(self):
        """GetMousePosition(self)"""
        return _DigitalMicrograph.Window_GetMousePosition(self)

    def GetTitle(self):
        """GetTitle(self) -> String"""
        return _DigitalMicrograph.Window_GetTitle(self)

    def GetType(self):
        """GetType(self) -> long"""
        return _DigitalMicrograph.Window_GetType(self)

    def Hide(self):
        """Hide(self)"""
        return _DigitalMicrograph.Window_Hide(self)

    def IsOpen(self):
        """IsOpen(self) -> bool"""
        return _DigitalMicrograph.Window_IsOpen(self)

    def IsShown(self):
        """IsShown(self) -> bool"""
        return _DigitalMicrograph.Window_IsShown(self)

    def Select(self):
        """Select(self)"""
        return _DigitalMicrograph.Window_Select(self)

    def SendBehind(self, *args):
        """SendBehind(self, Window behind_window)"""
        return _DigitalMicrograph.Window_SendBehind(self, *args)

    def SetContentBounds(self, *args):
        """SetContentBounds(self, long top, long left, long bottom, long right)"""
        return _DigitalMicrograph.Window_SetContentBounds(self, *args)

    def SetContentPosition(self, *args):
        """SetContentPosition(self, long x, long y)"""
        return _DigitalMicrograph.Window_SetContentPosition(self, *args)

    def SetContentSize(self, *args):
        """SetContentSize(self, long x, long y)"""
        return _DigitalMicrograph.Window_SetContentSize(self, *args)

    def SetFrameBounds(self, *args):
        """SetFrameBounds(self, long top, long left, long bottom, long right)"""
        return _DigitalMicrograph.Window_SetFrameBounds(self, *args)

    def SetFramePosition(self, *args):
        """SetFramePosition(self, long x, long y)"""
        return _DigitalMicrograph.Window_SetFramePosition(self, *args)

    def SetFrameSize(self, *args):
        """SetFrameSize(self, long x, long y)"""
        return _DigitalMicrograph.Window_SetFrameSize(self, *args)

    def SetTitle(self, *args):
        """SetTitle(self, String title)"""
        return _DigitalMicrograph.Window_SetTitle(self, *args)

    def Show(self):
        """Show(self)"""
        return _DigitalMicrograph.Window_Show(self)

    def Update(self):
        """Update(self)"""
        return _DigitalMicrograph.Window_Update(self)

    __swig_destroy__ = _DigitalMicrograph.delete_Window
    __del__ = lambda self : None;
Window_swigregister = _DigitalMicrograph.Window_swigregister
Window_swigregister(Window)

class String(_object):
    """Proxy of C++ Gatan::DM::String class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, String, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> String
        __init__(self, String str_2) -> String
        __init__(self, char str, ulong length) -> String
        __init__(self, char str) -> String
        __init__(self, ulong encoding, char str, ulong length) -> String
        __init__(self, ulong encoding, Gatan::char_range str) -> String
        __init__(self, uncchar str, ulong length) -> String
        """
        this = _DigitalMicrograph.new_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def construct(self, *args):
        """
        construct(self, Gatan::char_range str)
        construct(self, ulong encoding, Gatan::char_range str)
        construct(self, Gatan::uncchar_range str)
        """
        return _DigitalMicrograph.String_construct(self, *args)

    def copy_proxy(self, *args):
        """
        copy_proxy(self, ulong encoding, Gatan::char_string_proxy str) -> ulong
        copy_proxy(self, ulong encoding, Gatan::uncchar_string_proxy str) -> ulong
        """
        return _DigitalMicrograph.String_copy_proxy(self, *args)

    def copy(self, *args):
        """
        copy(self, uncchar buffer, ulong buffer_length) -> ulong
        copy(self, char buffer, ulong buffer_length) -> ulong
        copy(self, ulong encoding, char buffer, ulong buffer_length) -> ulong
        """
        return _DigitalMicrograph.String_copy(self, *args)

    def Append(self, *args):
        """
        Append(self, String s2) -> String
        Append(self, ulong ch, ulong encoding_id) -> String
        """
        return _DigitalMicrograph.String_Append(self, *args)

    def Compare(self, *args):
        """Compare(self, String s2) -> long"""
        return _DigitalMicrograph.String_Compare(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_String
    __del__ = lambda self : None;
String_swigregister = _DigitalMicrograph.String_swigregister
String_swigregister(String)


def construct_dm_string(*args):
  """construct_dm_string(String src_str, String dm_str)"""
  return _DigitalMicrograph.construct_dm_string(*args)

def copy_dm_string(*args):
  """copy_dm_string(String src_str, String dst_str)"""
  return _DigitalMicrograph.copy_dm_string(*args)
class ScriptObject(_object):
    """Proxy of C++ Gatan::DM::ScriptObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ScriptObject"""
        this = _DigitalMicrograph.new_ScriptObject()
        try: self.this.append(this)
        except: self.this = this
    def Dispatch(self, *args):
        """
        Dispatch(self, Function method, ulong num_args, Gatan::PlugIn::DM_Variant args, 
            ulong obj_index)
        """
        return _DigitalMicrograph.ScriptObject_Dispatch(self, *args)

    def GetClassToken(self, *args):
        """GetClassToken(self, String class_name) -> ulong"""
        return _DigitalMicrograph.ScriptObject_GetClassToken(self, *args)

    def GetID(self):
        """GetID(self) -> long"""
        return _DigitalMicrograph.ScriptObject_GetID(self)

    def LookupMethod(self, *args):
        """
        LookupMethod(self, Function meth_abs, char class_name) -> Function
        LookupMethod(self, Function meth_abs) -> Function
        """
        return _DigitalMicrograph.ScriptObject_LookupMethod(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_ScriptObject
    __del__ = lambda self : None;
ScriptObject_swigregister = _DigitalMicrograph.ScriptObject_swigregister
ScriptObject_swigregister(ScriptObject)

class Throwable(_object):
    """Proxy of C++ Gatan::DM::Throwable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Throwable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Throwable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Throwable"""
        this = _DigitalMicrograph.new_Throwable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Throwable
    __del__ = lambda self : None;
Throwable_swigregister = _DigitalMicrograph.Throwable_swigregister
Throwable_swigregister(Throwable)

class Function(_object):
    """Proxy of C++ Gatan::DM::Function class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Function"""
        this = _DigitalMicrograph.new_Function()
        try: self.this.append(this)
        except: self.this = this
    def Call(self, *args):
        """Call(self, ulong num_args, Gatan::PlugIn::DM_Variant args)"""
        return _DigitalMicrograph.Function_Call(self, *args)

    def CountParameters(self):
        """CountParameters(self) -> ulong"""
        return _DigitalMicrograph.Function_CountParameters(self)

    def GenerateStub(self, *args):
        """GenerateStub(self, bool include_body, ulong version) -> String"""
        return _DigitalMicrograph.Function_GenerateStub(self, *args)

    __swig_destroy__ = _DigitalMicrograph.delete_Function
    __del__ = lambda self : None;
Function_swigregister = _DigitalMicrograph.Function_swigregister
Function_swigregister(Function)


def ApplicationAddEventListener(*args):
  """ApplicationAddEventListener(ScriptObject listener, String event_handler_desc) -> uint32"""
  return _DigitalMicrograph.ApplicationAddEventListener(*args)

def ApplicationRemoveEventListener(*args):
  """ApplicationRemoveEventListener(uint32 listener_id)"""
  return _DigitalMicrograph.ApplicationRemoveEventListener(*args)

def ImageDisplayAddEventListener(*args):
  """ImageDisplayAddEventListener(ImageDisplay img_disp, ScriptObject listener, String event_handler_desc) -> uint32"""
  return _DigitalMicrograph.ImageDisplayAddEventListener(*args)

def ImageDisplayRemoveEventListener(*args):
  """ImageDisplayRemoveEventListener(ImageDisplay img_disp, uint32 listener_id)"""
  return _DigitalMicrograph.ImageDisplayRemoveEventListener(*args)

def ImageDisplayAddKeyHandler(*args):
  """ImageDisplayAddKeyHandler(ImageDisplay img_disp, ScriptObject listener, String event_handler_desc) -> uint32"""
  return _DigitalMicrograph.ImageDisplayAddKeyHandler(*args)

def ImageDisplayRemoveKeyHandler(*args):
  """ImageDisplayRemoveKeyHandler(ImageDisplay img_disp, uint32 listener_id)"""
  return _DigitalMicrograph.ImageDisplayRemoveKeyHandler(*args)

def MatchesKeyDescriptor(*args):
  """MatchesKeyDescriptor(ScriptObject keystroke, String key_name) -> bool"""
  return _DigitalMicrograph.MatchesKeyDescriptor(*args)

def WindowAddWindowListener(*args):
  """WindowAddWindowListener(Window window, ScriptObject listener, String event_handler_desc) -> uint32"""
  return _DigitalMicrograph.WindowAddWindowListener(*args)

def WindowRemoveWindowListener(*args):
  """WindowRemoveWindowListener(Window window, uint32 listener_id)"""
  return _DigitalMicrograph.WindowRemoveWindowListener(*args)

def ImageAddEventListener(*args):
  """ImageAddEventListener(Image img, ScriptObject listener, String event_handler_desc) -> uint32"""
  return _DigitalMicrograph.ImageAddEventListener(*args)

def ImageRemoveEventListener(*args):
  """ImageRemoveEventListener(Image img, uint32 listener_id)"""
  return _DigitalMicrograph.ImageRemoveEventListener(*args)

def NewImageDisplay(*args):
  """NewImageDisplay(Image img, String display_type) -> ImageDisplay"""
  return _DigitalMicrograph.NewImageDisplay(*args)

def ImageDisplayAddImage(*args):
  """ImageDisplayAddImage(ImageDisplay img_disp, Image image, String label) -> ScriptObject"""
  return _DigitalMicrograph.ImageDisplayAddImage(*args)

def ImageDisplayCountSlices(*args):
  """ImageDisplayCountSlices(ImageDisplay id) -> uint32"""
  return _DigitalMicrograph.ImageDisplayCountSlices(*args)

def ImageDisplayFindSliceIndexById(*args):
  """ImageDisplayFindSliceIndexById(ImageDisplay id, ScriptObject slice_id, uint32 slice_index) -> bool"""
  return _DigitalMicrograph.ImageDisplayFindSliceIndexById(*args)

def ImageDisplayGetSliceIdByIndex(*args):
  """ImageDisplayGetSliceIdByIndex(ImageDisplay id, uint32 slice_index) -> ScriptObject"""
  return _DigitalMicrograph.ImageDisplayGetSliceIdByIndex(*args)

def ImageDisplayGetSliceIdByLabel(*args):
  """ImageDisplayGetSliceIdByLabel(ImageDisplay id, String slice_label) -> ScriptObject"""
  return _DigitalMicrograph.ImageDisplayGetSliceIdByLabel(*args)

def ImageDisplayContainsSliceWithId(*args):
  """ImageDisplayContainsSliceWithId(ImageDisplay img_disp, ScriptObject slice_id) -> bool"""
  return _DigitalMicrograph.ImageDisplayContainsSliceWithId(*args)

def ImageDisplayGetSliceLabelById(*args):
  """ImageDisplayGetSliceLabelById(ImageDisplay img_disp, ScriptObject slice_id) -> String"""
  return _DigitalMicrograph.ImageDisplayGetSliceLabelById(*args)

def ImageDisplaySetSliceLabelById(*args):
  """ImageDisplaySetSliceLabelById(ImageDisplay img_disp, ScriptObject slice_id, String label)"""
  return _DigitalMicrograph.ImageDisplaySetSliceLabelById(*args)

def ImageDisplayGetFullSliceLabelById(*args):
  """ImageDisplayGetFullSliceLabelById(ImageDisplay img_disp, ScriptObject slice_id) -> String"""
  return _DigitalMicrograph.ImageDisplayGetFullSliceLabelById(*args)

def ImageDisplayFindSliceIdByLabel(*args):
  """ImageDisplayFindSliceIdByLabel(ImageDisplay img_disp, String slice_label, ScriptObject slice_id) -> bool"""
  return _DigitalMicrograph.ImageDisplayFindSliceIdByLabel(*args)

def ImageDisplayGetCalibrationSlice(*args):
  """ImageDisplayGetCalibrationSlice(ImageDisplay img_disp) -> ScriptObject"""
  return _DigitalMicrograph.ImageDisplayGetCalibrationSlice(*args)

def ImageDisplaySetCalibrationSlice(*args):
  """ImageDisplaySetCalibrationSlice(ImageDisplay img_disp, ScriptObject slice_id)"""
  return _DigitalMicrograph.ImageDisplaySetCalibrationSlice(*args)

def ImageDisplayGetSinglePrimarySlice(*args):
  """ImageDisplayGetSinglePrimarySlice(ImageDisplay id) -> ScriptObject"""
  return _DigitalMicrograph.ImageDisplayGetSinglePrimarySlice(*args)

def ImageDisplayIsSliceSelected(*args):
  """ImageDisplayIsSliceSelected(ImageDisplay id, ScriptObject slice_id) -> bool"""
  return _DigitalMicrograph.ImageDisplayIsSliceSelected(*args)

def ImageDisplaySetSliceSelected(*args):
  """ImageDisplaySetSliceSelected(ImageDisplay id, ScriptObject slice_id, bool is_selected)"""
  return _DigitalMicrograph.ImageDisplaySetSliceSelected(*args)

def ImageDisplayIsSliceVisible(*args):
  """ImageDisplayIsSliceVisible(ImageDisplay id, ScriptObject slice_id) -> bool"""
  return _DigitalMicrograph.ImageDisplayIsSliceVisible(*args)

def ImageDisplaySetSliceVisible(*args):
  """ImageDisplaySetSliceVisible(ImageDisplay id, ScriptObject slice_id, bool is_visible)"""
  return _DigitalMicrograph.ImageDisplaySetSliceVisible(*args)

def ImageDisplayDeleteSliceWithId(*args):
  """ImageDisplayDeleteSliceWithId(ImageDisplay id, ScriptObject slice_id) -> bool"""
  return _DigitalMicrograph.ImageDisplayDeleteSliceWithId(*args)

def ImageDisplaySetIntensityLabel(*args):
  """ImageDisplaySetIntensityLabel(ImageDisplay img_disp, String label)"""
  return _DigitalMicrograph.ImageDisplaySetIntensityLabel(*args)

def ImageDisplaySetDimensionLabel(*args):
  """ImageDisplaySetDimensionLabel(ImageDisplay img_disp, uint32 i_dim, String label)"""
  return _DigitalMicrograph.ImageDisplaySetDimensionLabel(*args)

def ImageDisplayGetIntensityLabel(*args):
  """ImageDisplayGetIntensityLabel(ImageDisplay img_disp) -> String"""
  return _DigitalMicrograph.ImageDisplayGetIntensityLabel(*args)

def ImageDisplayGetDimensionLabel(*args):
  """ImageDisplayGetDimensionLabel(ImageDisplay img_disp, uint32 i_dim) -> String"""
  return _DigitalMicrograph.ImageDisplayGetDimensionLabel(*args)
# This file is compatible with both classic and new-style classes.


def GetApplicationDirectory(*args):
  """
    GetApplicationDirectory(long index, bool create_if_necessary) -> String
    GetApplicationDirectory(String dir_name, bool create_if_necessary, String dir_path) -> bool
    """
  return _DigitalMicrograph.GetApplicationDirectory(*args)

def CountImageDisplays(*args):
  """
    CountImageDisplays() -> uint32
    CountImageDisplays(Image argument_1) -> uint32
    """
  return _DigitalMicrograph.CountImageDisplays(*args)

def ShowImage(*args):
  """
    ShowImage(Image img) -> Window
    ShowImage(Image img, ImageDisplay img_disp) -> Window
    ShowImage(Image img, ImageDisplay img_disp, ImageDocument img_doc) -> Window
    """
  return _DigitalMicrograph.ShowImage(*args)

def ShowImageDisplay(*args):
  """
    ShowImageDisplay(ImageDisplay img_disp) -> Window
    ShowImageDisplay(ImageDisplay img_disp, ImageDocument img_doc) -> Window
    """
  return _DigitalMicrograph.ShowImageDisplay(*args)

def GetNthImageDisplay(*args):
  """
    GetNthImageDisplay(uint32 index) -> ImageDisplay
    GetNthImageDisplay(uint32 index, ImageDocument img_doc) -> ImageDisplay
    GetNthImageDisplay(uint32 index, ImageDocument img_doc, Window img_win) -> ImageDisplay
    GetNthImageDisplay(Image img, uint32 index) -> ImageDisplay
    GetNthImageDisplay(Image img, uint32 index, ImageDocument img_doc) -> ImageDisplay
    GetNthImageDisplay(Image img, uint32 index, ImageDocument img_doc, Window img_win) -> ImageDisplay
    """
  return _DigitalMicrograph.GetNthImageDisplay(*args)

def ImageDocumentAddImageDisplay(*args):
  """
    ImageDocumentAddImageDisplay(ImageDocument imgDoc, Image image, long displayType) -> ImageDisplay
    ImageDocumentAddImageDisplay(ImageDocument img_doc, Image img, String img_disp_type_name) -> ImageDisplay
    """
  return _DigitalMicrograph.ImageDocumentAddImageDisplay(*args)

def ImageDisplayChangeDisplayType(*args):
  """
    ImageDisplayChangeDisplayType(ImageDisplay imgDisp, long new_type)
    ImageDisplayChangeDisplayType(ImageDisplay imgDisp, String new_display_type) -> ImageDisplay
    """
  return _DigitalMicrograph.ImageDisplayChangeDisplayType(*args)

def ImageDisplayGetSliceImageById(*args):
  """
    ImageDisplayGetSliceImageById(ImageDisplay img_disp, ScriptObject slice_id) -> Image
    ImageDisplayGetSliceImageById(ImageDisplay img_disp, ScriptObject slice_id, ROI r) -> Image
    """
  return _DigitalMicrograph.ImageDisplayGetSliceImageById(*args)

def ImageDisplayGetSliceImageByLabel(*args):
  """
    ImageDisplayGetSliceImageByLabel(ImageDisplay img_disp, String slice_label) -> Image
    ImageDisplayGetSliceImageByLabel(ImageDisplay img_disp, String slice_label, ROI r) -> Image
    """
  return _DigitalMicrograph.ImageDisplayGetSliceImageByLabel(*args)

def ImageDisplayGetSliceImageByIndex(*args):
  """
    ImageDisplayGetSliceImageByIndex(ImageDisplay img_disp, uint32 slice_index) -> Image
    ImageDisplayGetSliceImageByIndex(ImageDisplay img_disp, uint32 slice_index, ROI r) -> Image
    """
  return _DigitalMicrograph.ImageDisplayGetSliceImageByIndex(*args)

